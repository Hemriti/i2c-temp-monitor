
temperature reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a07c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800a210  0800a210  0000b210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a680  0800a680  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a680  0800a680  0000b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a688  0800a688  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a688  0800a688  0000b688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a68c  0800a68c  0000b68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a690  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1dc  2**0
                  CONTENTS
 10 .bss          000002d8  200001dc  200001dc  0000c1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004b4  200004b4  0000c1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f719  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002659  00000000  00000000  0001b925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  0001df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca0  00000000  00000000  0001efb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb77  00000000  00000000  0001fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005255  00000000  00000000  0002e7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00033a24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  00033a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0003940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1f4 	.word	0x0800a1f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a1f4 	.word	0x0800a1f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f023 030f 	bic.w	r3, r3, #15
 8000ff4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2db      	uxtb	r3, r3
 8001004:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	b2db      	uxtb	r3, r3
 800100e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	f043 030c 	orr.w	r3, r3, #12
 8001016:	b2db      	uxtb	r3, r3
 8001018:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	b2db      	uxtb	r3, r3
 8001022:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001024:	f107 0208 	add.w	r2, r7, #8
 8001028:	2364      	movs	r3, #100	@ 0x64
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2304      	movs	r3, #4
 800102e:	214e      	movs	r1, #78	@ 0x4e
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <lcd_send_cmd+0x5c>)
 8001032:	f001 fa45 	bl	80024c0 <HAL_I2C_Master_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001f8 	.word	0x200001f8

08001044 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f023 030f 	bic.w	r3, r3, #15
 8001054:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f043 030d 	orr.w	r3, r3, #13
 8001062:	b2db      	uxtb	r3, r3
 8001064:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f043 0309 	orr.w	r3, r3, #9
 800106c:	b2db      	uxtb	r3, r3
 800106e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	f043 030d 	orr.w	r3, r3, #13
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	f043 0309 	orr.w	r3, r3, #9
 8001080:	b2db      	uxtb	r3, r3
 8001082:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2304      	movs	r3, #4
 800108e:	214e      	movs	r1, #78	@ 0x4e
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <lcd_send_data+0x5c>)
 8001092:	f001 fa15 	bl	80024c0 <HAL_I2C_Master_Transmit>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001f8 	.word	0x200001f8

080010a4 <lcd_clear>:

void lcd_clear (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80010aa:	2080      	movs	r0, #128	@ 0x80
 80010ac:	f7ff ff9a 	bl	8000fe4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	e005      	b.n	80010c2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010b6:	2020      	movs	r0, #32
 80010b8:	f7ff ffc4 	bl	8001044 <lcd_send_data>
	for (int i=0; i<70; i++)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b45      	cmp	r3, #69	@ 0x45
 80010c6:	ddf6      	ble.n	80010b6 <lcd_clear+0x12>
	}
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
    switch (row)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <lcd_put_cur+0x18>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <lcd_put_cur+0x22>
 80010e8:	e009      	b.n	80010fe <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f0:	603b      	str	r3, [r7, #0]
            break;
 80010f2:	e004      	b.n	80010fe <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80010fa:	603b      	str	r3, [r7, #0]
            break;
 80010fc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff6e 	bl	8000fe4 <lcd_send_cmd>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <lcd_init>:


void lcd_init (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001114:	2032      	movs	r0, #50	@ 0x32
 8001116:	f000 fd43 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800111a:	2030      	movs	r0, #48	@ 0x30
 800111c:	f7ff ff62 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001120:	2005      	movs	r0, #5
 8001122:	f000 fd3d 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001126:	2030      	movs	r0, #48	@ 0x30
 8001128:	f7ff ff5c 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800112c:	2001      	movs	r0, #1
 800112e:	f000 fd37 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001132:	2030      	movs	r0, #48	@ 0x30
 8001134:	f7ff ff56 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f000 fd31 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800113e:	2020      	movs	r0, #32
 8001140:	f7ff ff50 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f000 fd2b 	bl	8001ba0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800114a:	2028      	movs	r0, #40	@ 0x28
 800114c:	f7ff ff4a 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f000 fd25 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001156:	2008      	movs	r0, #8
 8001158:	f7ff ff44 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f000 fd1f 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff ff3e 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f000 fd19 	bl	8001ba0 <HAL_Delay>
	HAL_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fd16 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001174:	2006      	movs	r0, #6
 8001176:	f7ff ff35 	bl	8000fe4 <lcd_send_cmd>
	HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 fd10 	bl	8001ba0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001180:	200c      	movs	r0, #12
 8001182:	f7ff ff2f 	bl	8000fe4 <lcd_send_cmd>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001192:	e006      	b.n	80011a2 <lcd_send_string+0x18>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff51 	bl	8001044 <lcd_send_data>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f4      	bne.n	8001194 <lcd_send_string+0xa>
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d102      	bne.n	80011cc <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        T_100ms = 255; // Set every 100ms
 80011c6:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80011c8:	22ff      	movs	r2, #255	@ 0xff
 80011ca:	701a      	strb	r2, [r3, #0]
    }
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40000800 	.word	0x40000800
 80011dc:	20000003 	.word	0x20000003

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b094      	sub	sp, #80	@ 0x50
 80011e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e6:	f000 fc69 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ea:	f000 f921 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ee:	f000 f9fb 	bl	80015e8 <MX_GPIO_Init>
  MX_I2C3_Init();
 80011f2:	f000 f97b 	bl	80014ec <MX_I2C3_Init>
  MX_TIM4_Init();
 80011f6:	f000 f9a7 	bl	8001548 <MX_TIM4_Init>
  lcd_init();
 80011fa:	f7ff ff89 	bl	8001110 <lcd_init>


  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim4); // Start TIM4 interrupts
 80011fe:	487a      	ldr	r0, [pc, #488]	@ (80013e8 <main+0x208>)
 8001200:	f003 fe58 	bl	8004eb4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (T_100ms)
 8001204:	4b79      	ldr	r3, [pc, #484]	@ (80013ec <main+0x20c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 8082 	beq.w	8001312 <main+0x132>
        {
            if (AHT10_Switcher)
 800120e:	4b78      	ldr	r3, [pc, #480]	@ (80013f0 <main+0x210>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <main+0x44>
            {
                HAL_I2C_Master_Transmit_IT(&hi2c3, AHT10_ADRESS, (uint8_t *)AHT10_TmpHum_Cmd, 3);
 8001216:	2303      	movs	r3, #3
 8001218:	4a76      	ldr	r2, [pc, #472]	@ (80013f4 <main+0x214>)
 800121a:	2170      	movs	r1, #112	@ 0x70
 800121c:	4876      	ldr	r0, [pc, #472]	@ (80013f8 <main+0x218>)
 800121e:	f001 fa4d 	bl	80026bc <HAL_I2C_Master_Transmit_IT>
 8001222:	e005      	b.n	8001230 <main+0x50>
            }
            else
            {
                HAL_I2C_Master_Receive_IT(&hi2c3, AHT10_ADRESS, (uint8_t *)AHT10_RX_Data, 6);
 8001224:	2306      	movs	r3, #6
 8001226:	4a75      	ldr	r2, [pc, #468]	@ (80013fc <main+0x21c>)
 8001228:	2170      	movs	r1, #112	@ 0x70
 800122a:	4873      	ldr	r0, [pc, #460]	@ (80013f8 <main+0x218>)
 800122c:	f001 fae8 	bl	8002800 <HAL_I2C_Master_Receive_IT>
            }

            if ((AHT10_RX_Data[0] & 0x80) == 0)
 8001230:	4b72      	ldr	r3, [pc, #456]	@ (80013fc <main+0x21c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	db5c      	blt.n	80012f4 <main+0x114>
            {
                AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) |
 800123a:	4b70      	ldr	r3, [pc, #448]	@ (80013fc <main+0x21c>)
 800123c:	78db      	ldrb	r3, [r3, #3]
 800123e:	041b      	lsls	r3, r3, #16
 8001240:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                                ((uint32_t)AHT10_RX_Data[4] << 8) |
 8001244:	4b6d      	ldr	r3, [pc, #436]	@ (80013fc <main+0x21c>)
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	021b      	lsls	r3, r3, #8
                AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) |
 800124a:	4313      	orrs	r3, r2
                                AHT10_RX_Data[5];
 800124c:	4a6b      	ldr	r2, [pc, #428]	@ (80013fc <main+0x21c>)
 800124e:	7952      	ldrb	r2, [r2, #5]
                                ((uint32_t)AHT10_RX_Data[4] << 8) |
 8001250:	4313      	orrs	r3, r2
                AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) |
 8001252:	4a6b      	ldr	r2, [pc, #428]	@ (8001400 <main+0x220>)
 8001254:	6013      	str	r3, [r2, #0]
                AHT10_Temperature = (float)((AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00);
 8001256:	4b6a      	ldr	r3, [pc, #424]	@ (8001400 <main+0x220>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f952 	bl	8000504 <__aeabi_ui2d>
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b67      	ldr	r3, [pc, #412]	@ (8001404 <main+0x224>)
 8001266:	f7ff f9c7 	bl	80005f8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b64      	ldr	r3, [pc, #400]	@ (8001408 <main+0x228>)
 8001278:	f7ff fae8 	bl	800084c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b60      	ldr	r3, [pc, #384]	@ (800140c <main+0x22c>)
 800128a:	f7fe fffd 	bl	8000288 <__aeabi_dsub>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fca7 	bl	8000be8 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	4a5c      	ldr	r2, [pc, #368]	@ (8001410 <main+0x230>)
 800129e:	6013      	str	r3, [r2, #0]

                AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) |
 80012a0:	4b56      	ldr	r3, [pc, #344]	@ (80013fc <main+0x21c>)
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	031a      	lsls	r2, r3, #12
                                ((uint32_t)AHT10_RX_Data[2] << 4) |
 80012a6:	4b55      	ldr	r3, [pc, #340]	@ (80013fc <main+0x21c>)
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	011b      	lsls	r3, r3, #4
                AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) |
 80012ac:	4313      	orrs	r3, r2
                                (AHT10_RX_Data[3] >> 4);
 80012ae:	4a53      	ldr	r2, [pc, #332]	@ (80013fc <main+0x21c>)
 80012b0:	78d2      	ldrb	r2, [r2, #3]
 80012b2:	0912      	lsrs	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
                                ((uint32_t)AHT10_RX_Data[2] << 4) |
 80012b6:	4313      	orrs	r3, r2
                AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) |
 80012b8:	4a51      	ldr	r2, [pc, #324]	@ (8001400 <main+0x220>)
 80012ba:	6013      	str	r3, [r2, #0]
                AHT10_Humidity = (float)(AHT10_ADC_Raw * 100.00 / 1048576.00);
 80012bc:	4b50      	ldr	r3, [pc, #320]	@ (8001400 <main+0x220>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f91f 	bl	8000504 <__aeabi_ui2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b52      	ldr	r3, [pc, #328]	@ (8001414 <main+0x234>)
 80012cc:	f7ff f994 	bl	80005f8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001408 <main+0x228>)
 80012de:	f7ff fab5 	bl	800084c <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc7d 	bl	8000be8 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a49      	ldr	r2, [pc, #292]	@ (8001418 <main+0x238>)
 80012f2:	6013      	str	r3, [r2, #0]
            }

            AHT10_Switcher = ~AHT10_Switcher;
 80012f4:	4b3e      	ldr	r3, [pc, #248]	@ (80013f0 <main+0x210>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b3c      	ldr	r3, [pc, #240]	@ (80013f0 <main+0x210>)
 80012fe:	701a      	strb	r2, [r3, #0]
            GPIOC->ODR ^= GPIO_ODR_OD13;
 8001300:	4b46      	ldr	r3, [pc, #280]	@ (800141c <main+0x23c>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4a45      	ldr	r2, [pc, #276]	@ (800141c <main+0x23c>)
 8001306:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800130a:	6153      	str	r3, [r2, #20]

            T_100ms = 0;
 800130c:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <main+0x20c>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
        }

        HAL_Delay(50); // Delay between AHT10 and LCD updates
 8001312:	2032      	movs	r0, #50	@ 0x32
 8001314:	f000 fc44 	bl	8001ba0 <HAL_Delay>

        char temp_str[16], hum_str[16];
        sprintf(temp_str, "%.2f", AHT10_Temperature);
 8001318:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <main+0x230>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f913 	bl	8000548 <__aeabi_f2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800132a:	493d      	ldr	r1, [pc, #244]	@ (8001420 <main+0x240>)
 800132c:	f005 fb28 	bl	8006980 <siprintf>
        sprintf(hum_str, "%.2f", AHT10_Humidity);
 8001330:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <main+0x238>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	f107 0020 	add.w	r0, r7, #32
 8001342:	4937      	ldr	r1, [pc, #220]	@ (8001420 <main+0x240>)
 8001344:	f005 fb1c 	bl	8006980 <siprintf>
        lcd_clear();
 8001348:	f7ff feac 	bl	80010a4 <lcd_clear>

        lcd_put_cur(0, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff febf 	bl	80010d2 <lcd_put_cur>
        lcd_send_string("Temp: ");
 8001354:	4833      	ldr	r0, [pc, #204]	@ (8001424 <main+0x244>)
 8001356:	f7ff ff18 	bl	800118a <lcd_send_string>
        lcd_send_string(temp_str);
 800135a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff13 	bl	800118a <lcd_send_string>
        lcd_put_cur(1, 0);
 8001364:	2100      	movs	r1, #0
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff feb3 	bl	80010d2 <lcd_put_cur>
        lcd_send_string("Humidity: ");
 800136c:	482e      	ldr	r0, [pc, #184]	@ (8001428 <main+0x248>)
 800136e:	f7ff ff0c 	bl	800118a <lcd_send_string>
        lcd_send_string(hum_str);
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff07 	bl	800118a <lcd_send_string>

        HAL_Delay(100);
 800137c:	2064      	movs	r0, #100	@ 0x64
 800137e:	f000 fc0f 	bl	8001ba0 <HAL_Delay>

		#define RPI_I2C_ADDRESS 0x08
        char buffer[32];
        snprintf(buffer, sizeof(buffer), "T:%.2f H:%.2f", AHT10_Temperature,AHT10_Humidity);
 8001382:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <main+0x230>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8de 	bl	8000548 <__aeabi_f2d>
 800138c:	4604      	mov	r4, r0
 800138e:	460d      	mov	r5, r1
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <main+0x238>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4638      	mov	r0, r7
 80013a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013a4:	e9cd 4500 	strd	r4, r5, [sp]
 80013a8:	4a20      	ldr	r2, [pc, #128]	@ (800142c <main+0x24c>)
 80013aa:	2120      	movs	r1, #32
 80013ac:	f005 fab4 	bl	8006918 <sniprintf>
        if (HAL_I2C_Master_Transmit(&hi2c3, RPI_I2C_ADDRESS << 1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY) == HAL_OK) {
 80013b0:	463b      	mov	r3, r7
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ff5c 	bl	8000270 <strlen>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	463a      	mov	r2, r7
 80013be:	f04f 31ff 	mov.w	r1, #4294967295
 80013c2:	9100      	str	r1, [sp, #0]
 80013c4:	2110      	movs	r1, #16
 80013c6:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <main+0x218>)
 80013c8:	f001 f87a 	bl	80024c0 <HAL_I2C_Master_Transmit>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d104      	bne.n	80013dc <main+0x1fc>
                   HAL_Delay(1000); // Wait for 1 second
 80013d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013d6:	f000 fbe3 	bl	8001ba0 <HAL_Delay>
 80013da:	e713      	b.n	8001204 <main+0x24>
               } else {
                   // Handle errors
                   HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Blink LED on error
 80013dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013e0:	480e      	ldr	r0, [pc, #56]	@ (800141c <main+0x23c>)
 80013e2:	f000 fef8 	bl	80021d6 <HAL_GPIO_TogglePin>
    {
 80013e6:	e70d      	b.n	8001204 <main+0x24>
 80013e8:	2000024c 	.word	0x2000024c
 80013ec:	20000003 	.word	0x20000003
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000000 	.word	0x20000000
 80013f8:	200001f8 	.word	0x200001f8
 80013fc:	20000294 	.word	0x20000294
 8001400:	2000029c 	.word	0x2000029c
 8001404:	40690000 	.word	0x40690000
 8001408:	41300000 	.word	0x41300000
 800140c:	40490000 	.word	0x40490000
 8001410:	200002a0 	.word	0x200002a0
 8001414:	40590000 	.word	0x40590000
 8001418:	200002a4 	.word	0x200002a4
 800141c:	40020800 	.word	0x40020800
 8001420:	0800a210 	.word	0x0800a210
 8001424:	0800a218 	.word	0x0800a218
 8001428:	0800a220 	.word	0x0800a220
 800142c:	0800a22c 	.word	0x0800a22c

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b094      	sub	sp, #80	@ 0x50
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2230      	movs	r2, #48	@ 0x30
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f005 fb01 	bl	8006a46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <SystemClock_Config+0xb4>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	4a21      	ldr	r2, [pc, #132]	@ (80014e4 <SystemClock_Config+0xb4>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001462:	6413      	str	r3, [r2, #64]	@ 0x40
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <SystemClock_Config+0xb4>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <SystemClock_Config+0xb8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1b      	ldr	r2, [pc, #108]	@ (80014e8 <SystemClock_Config+0xb8>)
 800147a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <SystemClock_Config+0xb8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	2301      	movs	r3, #1
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001494:	2310      	movs	r3, #16
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001498:	2300      	movs	r3, #0
 800149a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 f873 	bl	800458c <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014ac:	f000 f8fc 	bl	80016a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 fad6 	bl	8004a7c <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014d6:	f000 f8e7 	bl	80016a8 <Error_Handler>
  }
}
 80014da:	bf00      	nop
 80014dc:	3750      	adds	r7, #80	@ 0x50
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <MX_I2C3_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	@ (8001540 <MX_I2C3_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_I2C3_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_I2C3_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_I2C3_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_I2C3_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_I2C3_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <MX_I2C3_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_I2C3_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <MX_I2C3_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_I2C3_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_I2C3_Init+0x50>)
 800152a:	f000 fe6f 	bl	800220c <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 f8b8 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200001f8 	.word	0x200001f8
 8001540:	40005c00 	.word	0x40005c00
 8001544:	000186a0 	.word	0x000186a0

08001548 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <MX_TIM4_Init+0x98>)
 8001568:	4a1e      	ldr	r2, [pc, #120]	@ (80015e4 <MX_TIM4_Init+0x9c>)
 800156a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 800156c:	4b1c      	ldr	r3, [pc, #112]	@ (80015e0 <MX_TIM4_Init+0x98>)
 800156e:	f240 321f 	movw	r2, #799	@ 0x31f
 8001572:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_TIM4_Init+0x98>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800157a:	4b19      	ldr	r3, [pc, #100]	@ (80015e0 <MX_TIM4_Init+0x98>)
 800157c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001580:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_TIM4_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_TIM4_Init+0x98>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800158e:	4814      	ldr	r0, [pc, #80]	@ (80015e0 <MX_TIM4_Init+0x98>)
 8001590:	f003 fc40 	bl	8004e14 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800159a:	f000 f885 	bl	80016a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <MX_TIM4_Init+0x98>)
 80015ae:	f003 fde1 	bl	8005174 <HAL_TIM_SlaveConfigSynchro>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80015b8:	f000 f876 	bl	80016a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_TIM4_Init+0x98>)
 80015ca:	f003 fff9 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80015d4:	f000 f868 	bl	80016a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000024c 	.word	0x2000024c
 80015e4:	40000800 	.word	0x40000800

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	@ 0x28
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a26      	ldr	r2, [pc, #152]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a1f      	ldr	r2, [pc, #124]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_GPIO_Init+0xb8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001674:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <MX_GPIO_Init+0xbc>)
 8001676:	f000 fd95 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800167a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <MX_GPIO_Init+0xbc>)
 8001694:	f000 fbea 	bl	8001e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	@ 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020c00 	.word	0x40020c00

080016a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x8>

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_MspInit+0x54>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <HAL_MspInit+0x54>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_MspInit+0x54>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_MspInit+0x54>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <HAL_MspInit+0x54>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_MspInit+0x54>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	210f      	movs	r1, #15
 80016f6:	f06f 0001 	mvn.w	r0, #1
 80016fa:	f000 fb50 	bl	8001d9e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800

0800170c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	@ 0x28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a2d      	ldr	r2, [pc, #180]	@ (80017e0 <HAL_I2C_MspInit+0xd4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d153      	bne.n	80017d6 <HAL_I2C_MspInit+0xca>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a2b      	ldr	r2, [pc, #172]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a24      	ldr	r2, [pc, #144]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176c:	2312      	movs	r3, #18
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001778:	2304      	movs	r3, #4
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4819      	ldr	r0, [pc, #100]	@ (80017e8 <HAL_I2C_MspInit+0xdc>)
 8001784:	f000 fb72 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178e:	2312      	movs	r3, #18
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800179a:	2304      	movs	r3, #4
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4811      	ldr	r0, [pc, #68]	@ (80017ec <HAL_I2C_MspInit+0xe0>)
 80017a6:	f000 fb61 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 80017b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_I2C_MspInit+0xd8>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2105      	movs	r1, #5
 80017ca:	2048      	movs	r0, #72	@ 0x48
 80017cc:	f000 fae7 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80017d0:	2048      	movs	r0, #72	@ 0x48
 80017d2:	f000 fb00 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40005c00 	.word	0x40005c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <HAL_TIM_Base_MspInit+0x48>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d115      	bne.n	800182e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <HAL_TIM_Base_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <HAL_TIM_Base_MspInit+0x4c>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6413      	str	r3, [r2, #64]	@ 0x40
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <HAL_TIM_Base_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2105      	movs	r1, #5
 8001822:	201e      	movs	r0, #30
 8001824:	f000 fabb 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001828:	201e      	movs	r0, #30
 800182a:	f000 fad4 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40000800 	.word	0x40000800
 800183c:	40023800 	.word	0x40023800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <NMI_Handler+0x4>

08001848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <MemManage_Handler+0x4>

08001858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <UsageFault_Handler+0x4>

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187a:	f000 f971 	bl	8001b60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800187e:	f004 f88f 	bl	80059a0 <xTaskGetSchedulerState>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	d001      	beq.n	800188c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001888:	f004 f8f6 	bl	8005a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM4_IRQHandler+0x10>)
 8001896:	f003 fb7d 	bl	8004f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000024c 	.word	0x2000024c

080018a4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <I2C3_EV_IRQHandler+0x10>)
 80018aa:	f001 f853 	bl	8002954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001f8 	.word	0x200001f8

080018b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return 1;
 80018bc:	2301      	movs	r3, #1
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_kill>:

int _kill(int pid, int sig)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d2:	f005 f90b 	bl	8006aec <__errno>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2216      	movs	r2, #22
 80018da:	601a      	str	r2, [r3, #0]
  return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_exit>:

void _exit (int status)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ffe7 	bl	80018c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fa:	bf00      	nop
 80018fc:	e7fd      	b.n	80018fa <_exit+0x12>

080018fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e00a      	b.n	8001926 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001910:	f3af 8000 	nop.w
 8001914:	4601      	mov	r1, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	60ba      	str	r2, [r7, #8]
 800191c:	b2ca      	uxtb	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3301      	adds	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	dbf0      	blt.n	8001910 <_read+0x12>
  }

  return len;
 800192e:	687b      	ldr	r3, [r7, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e009      	b.n	800195e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	60ba      	str	r2, [r7, #8]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	dbf1      	blt.n	800194a <_write+0x12>
  }
  return len;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_close>:

int _close(int file)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001998:	605a      	str	r2, [r3, #4]
  return 0;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_isatty>:

int _isatty(int file)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	@ (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f005 f870 	bl	8006aec <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	@ (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	200002a8 	.word	0x200002a8
 8001a40:	200004b8 	.word	0x200004b8

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a6c:	f7ff ffea 	bl	8001a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a70:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a72:	490d      	ldr	r1, [pc, #52]	@ (8001aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a74:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a88:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a96:	f005 f82f 	bl	8006af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff fba1 	bl	80011e0 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001aac:	0800a690 	.word	0x0800a690
  ldr r2, =_sbss
 8001ab0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ab4:	200004b4 	.word	0x200004b4

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8001afc <HAL_Init+0x40>)
 8001ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_Init+0x40>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <HAL_Init+0x40>)
 8001ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f94f 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fde0 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f967 	bl	8001df2 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f92f 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000008 	.word	0x20000008
 8001b58:	20000010 	.word	0x20000010
 8001b5c:	2000000c 	.word	0x2000000c

08001b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <HAL_IncTick+0x24>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000010 	.word	0x20000010
 8001b84:	200002ac 	.word	0x200002ac

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	200002ac 	.word	0x200002ac

08001ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff ffee 	bl	8001b88 <HAL_GetTick>
 8001bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d005      	beq.n	8001bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_Delay+0x44>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bc6:	bf00      	nop
 8001bc8:	f7ff ffde 	bl	8001b88 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f7      	bhi.n	8001bc8 <HAL_Delay+0x28>
  {
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000010 	.word	0x20000010

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	@ (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	@ (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	@ (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	@ 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
         );
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	@ 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff3e 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff8e 	bl	8001cdc <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5d 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff31 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d004      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2280      	movs	r2, #128	@ 0x80
 8001e22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e00c      	b.n	8001e42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e16b      	b.n	8002160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 815a 	bne.w	800215a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80b4 	beq.w	800215a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b60      	ldr	r3, [pc, #384]	@ (8002178 <HAL_GPIO_Init+0x30c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	@ (8002178 <HAL_GPIO_Init+0x30c>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b5d      	ldr	r3, [pc, #372]	@ (8002178 <HAL_GPIO_Init+0x30c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a5b      	ldr	r2, [pc, #364]	@ (800217c <HAL_GPIO_Init+0x310>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a52      	ldr	r2, [pc, #328]	@ (8002180 <HAL_GPIO_Init+0x314>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x226>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a51      	ldr	r2, [pc, #324]	@ (8002184 <HAL_GPIO_Init+0x318>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x222>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a50      	ldr	r2, [pc, #320]	@ (8002188 <HAL_GPIO_Init+0x31c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x21e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4f      	ldr	r2, [pc, #316]	@ (800218c <HAL_GPIO_Init+0x320>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x21a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4e      	ldr	r2, [pc, #312]	@ (8002190 <HAL_GPIO_Init+0x324>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x216>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4d      	ldr	r2, [pc, #308]	@ (8002194 <HAL_GPIO_Init+0x328>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x212>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4c      	ldr	r2, [pc, #304]	@ (8002198 <HAL_GPIO_Init+0x32c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4b      	ldr	r2, [pc, #300]	@ (800219c <HAL_GPIO_Init+0x330>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x20a>
 8002072:	2307      	movs	r3, #7
 8002074:	e00e      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002076:	2308      	movs	r3, #8
 8002078:	e00c      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800207a:	2306      	movs	r3, #6
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800207e:	2305      	movs	r3, #5
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a4:	4935      	ldr	r1, [pc, #212]	@ (800217c <HAL_GPIO_Init+0x310>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b3b      	ldr	r3, [pc, #236]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d6:	4a32      	ldr	r2, [pc, #200]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020dc:	4b30      	ldr	r3, [pc, #192]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002100:	4a27      	ldr	r2, [pc, #156]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212a:	4a1d      	ldr	r2, [pc, #116]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002130:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002154:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <HAL_GPIO_Init+0x334>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f ae90 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3724      	adds	r7, #36	@ 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021800 	.word	0x40021800
 800219c:	40021c00 	.word	0x40021c00
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	400b      	ands	r3, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e12b      	b.n	8002476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fa6a 	bl	800170c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2224      	movs	r2, #36	@ 0x24
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800225e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800226e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002270:	f002 fdbc 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8002274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4a81      	ldr	r2, [pc, #516]	@ (8002480 <HAL_I2C_Init+0x274>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d807      	bhi.n	8002290 <HAL_I2C_Init+0x84>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a80      	ldr	r2, [pc, #512]	@ (8002484 <HAL_I2C_Init+0x278>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e006      	b.n	800229e <HAL_I2C_Init+0x92>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a7d      	ldr	r2, [pc, #500]	@ (8002488 <HAL_I2C_Init+0x27c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0e7      	b.n	8002476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a78      	ldr	r2, [pc, #480]	@ (800248c <HAL_I2C_Init+0x280>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0c9b      	lsrs	r3, r3, #18
 80022b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002480 <HAL_I2C_Init+0x274>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d802      	bhi.n	80022e0 <HAL_I2C_Init+0xd4>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3301      	adds	r3, #1
 80022de:	e009      	b.n	80022f4 <HAL_I2C_Init+0xe8>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	4a69      	ldr	r2, [pc, #420]	@ (8002490 <HAL_I2C_Init+0x284>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	3301      	adds	r3, #1
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002306:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	495c      	ldr	r1, [pc, #368]	@ (8002480 <HAL_I2C_Init+0x274>)
 8002310:	428b      	cmp	r3, r1
 8002312:	d819      	bhi.n	8002348 <HAL_I2C_Init+0x13c>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e59      	subs	r1, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002322:	1c59      	adds	r1, r3, #1
 8002324:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002328:	400b      	ands	r3, r1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_I2C_Init+0x138>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1e59      	subs	r1, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fbb1 f3f3 	udiv	r3, r1, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002342:	e051      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 8002344:	2304      	movs	r3, #4
 8002346:	e04f      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d111      	bne.n	8002374 <HAL_I2C_Init+0x168>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	440b      	add	r3, r1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	3301      	adds	r3, #1
 8002364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e012      	b.n	800239a <HAL_I2C_Init+0x18e>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf0c      	ite	eq
 8002394:	2301      	moveq	r3, #1
 8002396:	2300      	movne	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Init+0x196>
 800239e:	2301      	movs	r3, #1
 80023a0:	e022      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10e      	bne.n	80023c8 <HAL_I2C_Init+0x1bc>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e58      	subs	r0, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	440b      	add	r3, r1
 80023b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c6:	e00f      	b.n	80023e8 <HAL_I2C_Init+0x1dc>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	6809      	ldr	r1, [r1, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002416:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6911      	ldr	r1, [r2, #16]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68d2      	ldr	r2, [r2, #12]
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	430b      	orrs	r3, r1
 800242a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	000186a0 	.word	0x000186a0
 8002484:	001e847f 	.word	0x001e847f
 8002488:	003d08ff 	.word	0x003d08ff
 800248c:	431bde83 	.word	0x431bde83
 8002490:	10624dd3 	.word	0x10624dd3

08002494 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a6:	2b80      	cmp	r3, #128	@ 0x80
 80024a8:	d103      	bne.n	80024b2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	461a      	mov	r2, r3
 80024cc:	460b      	mov	r3, r1
 80024ce:	817b      	strh	r3, [r7, #10]
 80024d0:	4613      	mov	r3, r2
 80024d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff fb58 	bl	8001b88 <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b20      	cmp	r3, #32
 80024e4:	f040 80e0 	bne.w	80026a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2319      	movs	r3, #25
 80024ee:	2201      	movs	r2, #1
 80024f0:	4970      	ldr	r1, [pc, #448]	@ (80026b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f001 fe24 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
 8002500:	e0d3      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x50>
 800250c:	2302      	movs	r3, #2
 800250e:	e0cc      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b01      	cmp	r3, #1
 8002524:	d007      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2221      	movs	r2, #33	@ 0x21
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2210      	movs	r2, #16
 8002552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	893a      	ldrh	r2, [r7, #8]
 8002566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a50      	ldr	r2, [pc, #320]	@ (80026b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002578:	8979      	ldrh	r1, [r7, #10]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6a3a      	ldr	r2, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f001 fcb4 	bl	8003eec <I2C_MasterRequestWrite>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e08d      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025a4:	e066      	b.n	8002674 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6a39      	ldr	r1, [r7, #32]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f001 fee2 	bl	8004374 <I2C_WaitOnTXEFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00d      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b04      	cmp	r3, #4
 800260e:	d11b      	bne.n	8002648 <HAL_I2C_Master_Transmit+0x188>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d017      	beq.n	8002648 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	6a39      	ldr	r1, [r7, #32]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f001 fed9 	bl	8004404 <I2C_WaitOnBTFFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	2b04      	cmp	r3, #4
 800265e:	d107      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e01a      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d194      	bne.n	80025a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e000      	b.n	80026aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026a8:	2302      	movs	r3, #2
  }
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	00100002 	.word	0x00100002
 80026b8:	ffff0000 	.word	0xffff0000

080026bc <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
 80026cc:	4613      	mov	r3, r2
 80026ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	f040 8081 	bne.w	80027e4 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80026e2:	4b44      	ldr	r3, [pc, #272]	@ (80027f4 <HAL_I2C_Master_Transmit_IT+0x138>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	4a43      	ldr	r2, [pc, #268]	@ (80027f8 <HAL_I2C_Master_Transmit_IT+0x13c>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0a1a      	lsrs	r2, r3, #8
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3b01      	subs	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d112      	bne.n	800272e <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800272a:	2302      	movs	r3, #2
 800272c:	e05b      	b.n	80027e6 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d0df      	beq.n	80026fc <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_I2C_Master_Transmit_IT+0x8e>
 8002746:	2302      	movs	r3, #2
 8002748:	e04d      	b.n	80027e6 <HAL_I2C_Master_Transmit_IT+0x12a>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d007      	beq.n	8002770 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800277e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2221      	movs	r2, #33	@ 0x21
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2210      	movs	r2, #16
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	893a      	ldrh	r2, [r7, #8]
 80027a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <HAL_I2C_Master_Transmit_IT+0x140>)
 80027b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80027b2:	897a      	ldrh	r2, [r7, #10]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80027ce:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000008 	.word	0x20000008
 80027f8:	14f8b589 	.word	0x14f8b589
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b20      	cmp	r3, #32
 8002822:	f040 8089 	bne.w	8002938 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002826:	4b48      	ldr	r3, [pc, #288]	@ (8002948 <HAL_I2C_Master_Receive_IT+0x148>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	08db      	lsrs	r3, r3, #3
 800282c:	4a47      	ldr	r2, [pc, #284]	@ (800294c <HAL_I2C_Master_Receive_IT+0x14c>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a1a      	lsrs	r2, r3, #8
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3b01      	subs	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d112      	bne.n	8002872 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	e063      	b.n	800293a <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d0df      	beq.n	8002840 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_I2C_Master_Receive_IT+0x8e>
 800288a:	2302      	movs	r3, #2
 800288c:	e055      	b.n	800293a <HAL_I2C_Master_Receive_IT+0x13a>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d007      	beq.n	80028b4 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2222      	movs	r2, #34	@ 0x22
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2210      	movs	r2, #16
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	893a      	ldrh	r2, [r7, #8]
 80028e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <HAL_I2C_Master_Receive_IT+0x150>)
 80028f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80028f6:	897a      	ldrh	r2, [r7, #10]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002912:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002922:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002932:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000008 	.word	0x20000008
 800294c:	14f8b589 	.word	0x14f8b589
 8002950:	ffff0000 	.word	0xffff0000

08002954 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002974:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b10      	cmp	r3, #16
 8002982:	d003      	beq.n	800298c <HAL_I2C_EV_IRQHandler+0x38>
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b40      	cmp	r3, #64	@ 0x40
 8002988:	f040 80b1 	bne.w	8002aee <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80029ac:	d003      	beq.n	80029b6 <HAL_I2C_EV_IRQHandler+0x62>
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80029b4:	d101      	bne.n	80029ba <HAL_I2C_EV_IRQHandler+0x66>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_I2C_EV_IRQHandler+0x68>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f000 8114 	beq.w	8002bea <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x90>
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f001 fdbd 	bl	8004556 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fcdb 	bl	8003398 <I2C_Master_SB>
 80029e2:	e083      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_I2C_EV_IRQHandler+0xac>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fd53 	bl	80034a4 <I2C_Master_ADD10>
 80029fe:	e075      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d008      	beq.n	8002a1c <HAL_I2C_EV_IRQHandler+0xc8>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fd6f 	bl	80034f8 <I2C_Master_ADDR>
 8002a1a:	e067      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d036      	beq.n	8002a94 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a34:	f000 80db 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <HAL_I2C_EV_IRQHandler+0x10a>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_I2C_EV_IRQHandler+0x10a>
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f937 	bl	8002cca <I2C_MasterTransmit_TXE>
 8002a5c:	e046      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80c2 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80bc 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a76:	7bbb      	ldrb	r3, [r7, #14]
 8002a78:	2b21      	cmp	r3, #33	@ 0x21
 8002a7a:	d103      	bne.n	8002a84 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9c0 	bl	8002e02 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a82:	e0b4      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	f040 80b1 	bne.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fa2e 	bl	8002eee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a92:	e0ac      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa2:	f000 80a4 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x178>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x178>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 faaa 	bl	800301e <I2C_MasterReceive_RXNE>
 8002aca:	e00f      	b.n	8002aec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 808b 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8085 	beq.w	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fb62 	bl	80031ae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aea:	e080      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
 8002aec:	e07f      	b.n	8002bee <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	e007      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d011      	beq.n	8002b3e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00c      	beq.n	8002b3e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 ff2d 	bl	8003996 <I2C_Slave_ADDR>
 8002b3c:	e05a      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x206>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 ff68 	bl	8003a28 <I2C_Slave_STOPF>
 8002b58:	e04c      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	2b21      	cmp	r3, #33	@ 0x21
 8002b5e:	d002      	beq.n	8002b66 <HAL_I2C_EV_IRQHandler+0x212>
 8002b60:	7bbb      	ldrb	r3, [r7, #14]
 8002b62:	2b29      	cmp	r3, #41	@ 0x29
 8002b64:	d120      	bne.n	8002ba8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x238>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x238>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fe48 	bl	800381a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b8a:	e032      	b.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02d      	beq.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d028      	beq.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fe77 	bl	8003894 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba6:	e024      	b.n	8002bf2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x27a>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x27a>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fe85 	bl	80038d6 <I2C_SlaveReceive_RXNE>
 8002bcc:	e012      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 feb5 	bl	8003952 <I2C_SlaveReceive_BTF>
 8002be8:	e004      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	460b      	mov	r3, r1
 8002c54:	70fb      	strb	r3, [r7, #3]
 8002c56:	4613      	mov	r3, r2
 8002c58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ce0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d150      	bne.n	8002d92 <I2C_MasterTransmit_TXE+0xc8>
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b21      	cmp	r3, #33	@ 0x21
 8002cf4:	d14d      	bne.n	8002d92 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d01d      	beq.n	8002d38 <I2C_MasterTransmit_TXE+0x6e>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d01a      	beq.n	8002d38 <I2C_MasterTransmit_TXE+0x6e>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d08:	d016      	beq.n	8002d38 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d18:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2211      	movs	r2, #17
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff62 	bl	8002bfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d36:	e060      	b.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d46:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d56:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b40      	cmp	r3, #64	@ 0x40
 8002d70:	d107      	bne.n	8002d82 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff7d 	bl	8002c7a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d80:	e03b      	b.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff35 	bl	8002bfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d90:	e033      	b.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b21      	cmp	r3, #33	@ 0x21
 8002d96:	d005      	beq.n	8002da4 <I2C_MasterTransmit_TXE+0xda>
 8002d98:	7bbb      	ldrb	r3, [r7, #14]
 8002d9a:	2b40      	cmp	r3, #64	@ 0x40
 8002d9c:	d12d      	bne.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b22      	cmp	r3, #34	@ 0x22
 8002da2:	d12a      	bne.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dbc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002dbe:	e01c      	b.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b40      	cmp	r3, #64	@ 0x40
 8002dca:	d103      	bne.n	8002dd4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f88e 	bl	8002eee <I2C_MemoryTransmit_TXE_BTF>
}
 8002dd2:	e012      	b.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002df8:	e7ff      	b.n	8002dfa <I2C_MasterTransmit_TXE+0x130>
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b21      	cmp	r3, #33	@ 0x21
 8002e1a:	d164      	bne.n	8002ee6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e4a:	e04c      	b.n	8002ee6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d01d      	beq.n	8002e8e <I2C_MasterTransmit_BTF+0x8c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d01a      	beq.n	8002e8e <I2C_MasterTransmit_BTF+0x8c>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e5e:	d016      	beq.n	8002e8e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e6e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2211      	movs	r2, #17
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff feb7 	bl	8002bfa <HAL_I2C_MasterTxCpltCallback>
}
 8002e8c:	e02b      	b.n	8002ee6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e9c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d107      	bne.n	8002ed8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fed2 	bl	8002c7a <HAL_I2C_MemTxCpltCallback>
}
 8002ed6:	e006      	b.n	8002ee6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff fe8a 	bl	8002bfa <HAL_I2C_MasterTxCpltCallback>
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11d      	bne.n	8002f42 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10b      	bne.n	8002f26 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1e:	1c9a      	adds	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002f24:	e077      	b.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	121b      	asrs	r3, r3, #8
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f40:	e069      	b.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10b      	bne.n	8002f62 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f60:	e059      	b.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d152      	bne.n	8003010 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b22      	cmp	r3, #34	@ 0x22
 8002f6e:	d10d      	bne.n	8002f8c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f7e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002f8a:	e044      	b.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b21      	cmp	r3, #33	@ 0x21
 8002f9a:	d112      	bne.n	8002fc2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002fc0:	e029      	b.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d124      	bne.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b21      	cmp	r3, #33	@ 0x21
 8002fd0:	d121      	bne.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fe0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fe36 	bl	8002c7a <HAL_I2C_MemTxCpltCallback>
}
 800300e:	e002      	b.n	8003016 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff fa3f 	bl	8002494 <I2C_Flush_DR>
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b22      	cmp	r3, #34	@ 0x22
 8003030:	f040 80b9 	bne.w	80031a6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d921      	bls.n	800308c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b03      	cmp	r3, #3
 8003076:	f040 8096 	bne.w	80031a6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003088:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800308a:	e08c      	b.n	80031a6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	2b02      	cmp	r3, #2
 8003092:	d07f      	beq.n	8003194 <I2C_MasterReceive_RXNE+0x176>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d002      	beq.n	80030a0 <I2C_MasterReceive_RXNE+0x82>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d179      	bne.n	8003194 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f001 f9f7 	bl	8004494 <I2C_WaitOnSTOPRequestThroughIT>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d14c      	bne.n	8003146 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d10a      	bne.n	800311c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff fdba 	bl	8002c8e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800311a:	e044      	b.n	80031a6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b08      	cmp	r3, #8
 8003128:	d002      	beq.n	8003130 <I2C_MasterReceive_RXNE+0x112>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b20      	cmp	r3, #32
 800312e:	d103      	bne.n	8003138 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
 8003136:	e002      	b.n	800313e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2212      	movs	r2, #18
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fd65 	bl	8002c0e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003144:	e02f      	b.n	80031a6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003154:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fd88 	bl	8002ca2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003192:	e008      	b.n	80031a6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a2:	605a      	str	r2, [r3, #4]
}
 80031a4:	e7ff      	b.n	80031a6 <I2C_MasterReceive_RXNE+0x188>
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d11b      	bne.n	80031fe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80031fc:	e0c8      	b.n	8003390 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d129      	bne.n	800325c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003216:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b04      	cmp	r3, #4
 800321c:	d00a      	beq.n	8003234 <I2C_MasterReceive_BTF+0x86>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d007      	beq.n	8003234 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003232:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800325a:	e099      	b.n	8003390 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	f040 8081 	bne.w	800336a <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d002      	beq.n	8003274 <I2C_MasterReceive_BTF+0xc6>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b10      	cmp	r3, #16
 8003272:	d108      	bne.n	8003286 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e019      	b.n	80032ba <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b04      	cmp	r3, #4
 800328a:	d002      	beq.n	8003292 <I2C_MasterReceive_BTF+0xe4>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d108      	bne.n	80032a4 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e00a      	b.n	80032ba <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d007      	beq.n	80032ba <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003314:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d10a      	bne.n	8003340 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fca8 	bl	8002c8e <HAL_I2C_MemRxCpltCallback>
}
 800333e:	e027      	b.n	8003390 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b08      	cmp	r3, #8
 800334c:	d002      	beq.n	8003354 <I2C_MasterReceive_BTF+0x1a6>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b20      	cmp	r3, #32
 8003352:	d103      	bne.n	800335c <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	@ 0x30
 800335a:	e002      	b.n	8003362 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2212      	movs	r2, #18
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff fc53 	bl	8002c0e <HAL_I2C_MasterRxCpltCallback>
}
 8003368:	e012      	b.n	8003390 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b40      	cmp	r3, #64	@ 0x40
 80033aa:	d117      	bne.n	80033dc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033c4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033c6:	e067      	b.n	8003498 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	611a      	str	r2, [r3, #16]
}
 80033da:	e05d      	b.n	8003498 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e4:	d133      	bne.n	800344e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b21      	cmp	r3, #33	@ 0x21
 80033f0:	d109      	bne.n	8003406 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003402:	611a      	str	r2, [r3, #16]
 8003404:	e008      	b.n	8003418 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	b2da      	uxtb	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <I2C_Master_SB+0x92>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342e:	2b00      	cmp	r3, #0
 8003430:	d032      	beq.n	8003498 <I2C_Master_SB+0x100>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02d      	beq.n	8003498 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344a:	605a      	str	r2, [r3, #4]
}
 800344c:	e024      	b.n	8003498 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10e      	bne.n	8003474 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	b29b      	uxth	r3, r3
 800345c:	11db      	asrs	r3, r3, #7
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 0306 	and.w	r3, r3, #6
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f063 030f 	orn	r3, r3, #15
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	611a      	str	r2, [r3, #16]
}
 8003472:	e011      	b.n	8003498 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10d      	bne.n	8003498 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	b29b      	uxth	r3, r3
 8003482:	11db      	asrs	r3, r3, #7
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 0306 	and.w	r3, r3, #6
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f063 030e 	orn	r3, r3, #14
 8003490:	b2da      	uxtb	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <I2C_Master_ADD10+0x26>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d108      	bne.n	80034dc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <I2C_Master_ADD10+0x48>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ea:	605a      	str	r2, [r3, #4]
  }
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b091      	sub	sp, #68	@ 0x44
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003506:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b22      	cmp	r3, #34	@ 0x22
 8003520:	f040 8169 	bne.w	80037f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10f      	bne.n	800354c <I2C_Master_ADDR+0x54>
 800352c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003530:	2b40      	cmp	r3, #64	@ 0x40
 8003532:	d10b      	bne.n	800354c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003534:	2300      	movs	r3, #0
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354a:	e160      	b.n	800380e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11d      	bne.n	8003590 <I2C_Master_ADDR+0x98>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800355c:	d118      	bne.n	8003590 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003582:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	651a      	str	r2, [r3, #80]	@ 0x50
 800358e:	e13e      	b.n	800380e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d113      	bne.n	80035c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359a:	2300      	movs	r3, #0
 800359c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e115      	b.n	80037ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 808a 	bne.w	80036e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035d4:	d137      	bne.n	8003646 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f4:	d113      	bne.n	800361e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003604:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	e0e7      	b.n	80037ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e0d3      	b.n	80037ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	2b08      	cmp	r3, #8
 800364a:	d02e      	beq.n	80036aa <I2C_Master_ADDR+0x1b2>
 800364c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364e:	2b20      	cmp	r3, #32
 8003650:	d02b      	beq.n	80036aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003654:	2b12      	cmp	r3, #18
 8003656:	d102      	bne.n	800365e <I2C_Master_ADDR+0x166>
 8003658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365a:	2b01      	cmp	r3, #1
 800365c:	d125      	bne.n	80036aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003660:	2b04      	cmp	r3, #4
 8003662:	d00e      	beq.n	8003682 <I2C_Master_ADDR+0x18a>
 8003664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003666:	2b02      	cmp	r3, #2
 8003668:	d00b      	beq.n	8003682 <I2C_Master_ADDR+0x18a>
 800366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366c:	2b10      	cmp	r3, #16
 800366e:	d008      	beq.n	8003682 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e007      	b.n	8003692 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003690:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	e0a1      	b.n	80037ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e085      	b.n	80037ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d14d      	bne.n	8003788 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d016      	beq.n	8003720 <I2C_Master_ADDR+0x228>
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d013      	beq.n	8003720 <I2C_Master_ADDR+0x228>
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d010      	beq.n	8003720 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e007      	b.n	8003730 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800372e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800373a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800373e:	d117      	bne.n	8003770 <I2C_Master_ADDR+0x278>
 8003740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003742:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003746:	d00b      	beq.n	8003760 <I2C_Master_ADDR+0x268>
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	2b01      	cmp	r3, #1
 800374c:	d008      	beq.n	8003760 <I2C_Master_ADDR+0x268>
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	2b08      	cmp	r3, #8
 8003752:	d005      	beq.n	8003760 <I2C_Master_ADDR+0x268>
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	2b10      	cmp	r3, #16
 8003758:	d002      	beq.n	8003760 <I2C_Master_ADDR+0x268>
 800375a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375c:	2b20      	cmp	r3, #32
 800375e:	d107      	bne.n	8003770 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800376e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	e032      	b.n	80037ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003796:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a6:	d117      	bne.n	80037d8 <I2C_Master_ADDR+0x2e0>
 80037a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037ae:	d00b      	beq.n	80037c8 <I2C_Master_ADDR+0x2d0>
 80037b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d008      	beq.n	80037c8 <I2C_Master_ADDR+0x2d0>
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d005      	beq.n	80037c8 <I2C_Master_ADDR+0x2d0>
 80037bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d002      	beq.n	80037c8 <I2C_Master_ADDR+0x2d0>
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d107      	bne.n	80037d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80037f4:	e00b      	b.n	800380e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	e7ff      	b.n	800380e <I2C_Master_ADDR+0x316>
 800380e:	bf00      	nop
 8003810:	3744      	adds	r7, #68	@ 0x44
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003828:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02b      	beq.n	800388c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d114      	bne.n	800388c <I2C_SlaveTransmit_TXE+0x72>
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b29      	cmp	r3, #41	@ 0x29
 8003866:	d111      	bne.n	800388c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003876:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2221      	movs	r2, #33	@ 0x21
 800387c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2228      	movs	r2, #40	@ 0x28
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff f9cb 	bl	8002c22 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d011      	beq.n	80038ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	781a      	ldrb	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02c      	beq.n	800394a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d114      	bne.n	800394a <I2C_SlaveReceive_RXNE+0x74>
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b2a      	cmp	r3, #42	@ 0x2a
 8003924:	d111      	bne.n	800394a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003934:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2222      	movs	r2, #34	@ 0x22
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2228      	movs	r2, #40	@ 0x28
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff f976 	bl	8002c36 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039b0:	2b28      	cmp	r3, #40	@ 0x28
 80039b2:	d125      	bne.n	8003a00 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	81bb      	strh	r3, [r7, #12]
 80039e2:	e002      	b.n	80039ea <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80039f2:	89ba      	ldrh	r2, [r7, #12]
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	4619      	mov	r1, r3
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff f926 	bl	8002c4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80039fe:	e00e      	b.n	8003a1e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a84:	d172      	bne.n	8003b6c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b22      	cmp	r3, #34	@ 0x22
 8003a8a:	d002      	beq.n	8003a92 <I2C_Slave_STOPF+0x6a>
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a90:	d135      	bne.n	8003afe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ac4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe f9bf 	bl	8001e4e <HAL_DMA_GetState>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d049      	beq.n	8003b6a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	4a69      	ldr	r2, [pc, #420]	@ (8003c80 <I2C_Slave_STOPF+0x258>)
 8003adc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe f991 	bl	8001e0a <HAL_DMA_Abort_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d03d      	beq.n	8003b6a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003afc:	e035      	b.n	8003b6a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe f989 	bl	8001e4e <HAL_DMA_GetState>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d014      	beq.n	8003b6c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b46:	4a4e      	ldr	r2, [pc, #312]	@ (8003c80 <I2C_Slave_STOPF+0x258>)
 8003b48:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe f95b 	bl	8001e0a <HAL_DMA_Abort_IT>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b64:	4610      	mov	r0, r2
 8003b66:	4798      	blx	r3
 8003b68:	e000      	b.n	8003b6c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b6a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d03e      	beq.n	8003bf4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d112      	bne.n	8003baa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	d112      	bne.n	8003bde <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	f043 0204 	orr.w	r2, r3, #4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f843 	bl	8003c88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c02:	e039      	b.n	8003c78 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c08:	d109      	bne.n	8003c1e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2228      	movs	r2, #40	@ 0x28
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff f80c 	bl	8002c36 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b28      	cmp	r3, #40	@ 0x28
 8003c28:	d111      	bne.n	8003c4e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a15      	ldr	r2, [pc, #84]	@ (8003c84 <I2C_Slave_STOPF+0x25c>)
 8003c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff f80d 	bl	8002c66 <HAL_I2C_ListenCpltCallback>
}
 8003c4c:	e014      	b.n	8003c78 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c52:	2b22      	cmp	r3, #34	@ 0x22
 8003c54:	d002      	beq.n	8003c5c <I2C_Slave_STOPF+0x234>
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b22      	cmp	r3, #34	@ 0x22
 8003c5a:	d10d      	bne.n	8003c78 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fe ffdf 	bl	8002c36 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	08003ff1 	.word	0x08003ff1
 8003c84:	ffff0000 	.word	0xffff0000

08003c88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ca0:	7bbb      	ldrb	r3, [r7, #14]
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d002      	beq.n	8003cac <I2C_ITError+0x24>
 8003ca6:	7bbb      	ldrb	r3, [r7, #14]
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d10a      	bne.n	8003cc2 <I2C_ITError+0x3a>
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b22      	cmp	r3, #34	@ 0x22
 8003cb0:	d107      	bne.n	8003cc2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cc8:	2b28      	cmp	r3, #40	@ 0x28
 8003cca:	d107      	bne.n	8003cdc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2228      	movs	r2, #40	@ 0x28
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003cda:	e015      	b.n	8003d08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cea:	d00a      	beq.n	8003d02 <I2C_ITError+0x7a>
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b60      	cmp	r3, #96	@ 0x60
 8003cf0:	d007      	beq.n	8003d02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d16:	d162      	bne.n	8003dde <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d020      	beq.n	8003d78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ee4 <I2C_ITError+0x25c>)
 8003d3c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe f861 	bl	8001e0a <HAL_DMA_Abort_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8089 	beq.w	8003e62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d72:	4610      	mov	r0, r2
 8003d74:	4798      	blx	r3
 8003d76:	e074      	b.n	8003e62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	4a59      	ldr	r2, [pc, #356]	@ (8003ee4 <I2C_ITError+0x25c>)
 8003d7e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe f840 	bl	8001e0a <HAL_DMA_Abort_IT>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d068      	beq.n	8003e62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b40      	cmp	r3, #64	@ 0x40
 8003d9c:	d10b      	bne.n	8003db6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4798      	blx	r3
 8003ddc:	e041      	b.n	8003e62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b60      	cmp	r3, #96	@ 0x60
 8003de8:	d125      	bne.n	8003e36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e02:	2b40      	cmp	r3, #64	@ 0x40
 8003e04:	d10b      	bne.n	8003e1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fe ff41 	bl	8002cb6 <HAL_I2C_AbortCpltCallback>
 8003e34:	e015      	b.n	8003e62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e40:	2b40      	cmp	r3, #64	@ 0x40
 8003e42:	d10b      	bne.n	8003e5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fe ff20 	bl	8002ca2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10e      	bne.n	8003e90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d113      	bne.n	8003edc <I2C_ITError+0x254>
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b28      	cmp	r3, #40	@ 0x28
 8003eb8:	d110      	bne.n	8003edc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee8 <I2C_ITError+0x260>)
 8003ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fe fec5 	bl	8002c66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08003ff1 	.word	0x08003ff1
 8003ee8:	ffff0000 	.word	0xffff0000

08003eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d006      	beq.n	8003f16 <I2C_MasterRequestWrite+0x2a>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d003      	beq.n	8003f16 <I2C_MasterRequestWrite+0x2a>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f14:	d108      	bne.n	8003f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e00b      	b.n	8003f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2c:	2b12      	cmp	r3, #18
 8003f2e:	d107      	bne.n	8003f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f8f7 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f66:	d103      	bne.n	8003f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e035      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7e:	897b      	ldrh	r3, [r7, #10]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f8c:	611a      	str	r2, [r3, #16]
 8003f8e:	e01b      	b.n	8003fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f90:	897b      	ldrh	r3, [r7, #10]
 8003f92:	11db      	asrs	r3, r3, #7
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0306 	and.w	r3, r3, #6
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f063 030f 	orn	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	490e      	ldr	r1, [pc, #56]	@ (8003fe8 <I2C_MasterRequestWrite+0xfc>)
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f940 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e010      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fbe:	897b      	ldrh	r3, [r7, #10]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4907      	ldr	r1, [pc, #28]	@ (8003fec <I2C_MasterRequestWrite+0x100>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f930 	bl	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00010008 	.word	0x00010008
 8003fec:	00010002 	.word	0x00010002

08003ff0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004008:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800400a:	4b4b      	ldr	r3, [pc, #300]	@ (8004138 <I2C_DMAAbort+0x148>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	08db      	lsrs	r3, r3, #3
 8004010:	4a4a      	ldr	r2, [pc, #296]	@ (800413c <I2C_DMAAbort+0x14c>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0a1a      	lsrs	r2, r3, #8
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00da      	lsls	r2, r3, #3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004036:	e00a      	b.n	800404e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3b01      	subs	r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404c:	d0ea      	beq.n	8004024 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405a:	2200      	movs	r2, #0
 800405c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406a:	2200      	movs	r2, #0
 800406c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004090:	2200      	movs	r2, #0
 8004092:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	2200      	movs	r2, #0
 80040a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b60      	cmp	r3, #96	@ 0x60
 80040be:	d10e      	bne.n	80040de <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040d6:	6978      	ldr	r0, [r7, #20]
 80040d8:	f7fe fded 	bl	8002cb6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040dc:	e027      	b.n	800412e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040e4:	2b28      	cmp	r3, #40	@ 0x28
 80040e6:	d117      	bne.n	8004118 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004106:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2228      	movs	r2, #40	@ 0x28
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004116:	e007      	b.n	8004128 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004128:	6978      	ldr	r0, [r7, #20]
 800412a:	f7fe fdba 	bl	8002ca2 <HAL_I2C_ErrorCallback>
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000008 	.word	0x20000008
 800413c:	14f8b589 	.word	0x14f8b589

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e048      	b.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d044      	beq.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fd fd15 	bl	8001b88 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d139      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10d      	bne.n	8004196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	e00c      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	43da      	mvns	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d116      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e023      	b.n	800422c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	0c1b      	lsrs	r3, r3, #16
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d10d      	bne.n	800420a <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	e00c      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	43da      	mvns	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4013      	ands	r3, r2
 8004216:	b29b      	uxth	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	429a      	cmp	r2, r3
 8004228:	d093      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004242:	e071      	b.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004252:	d123      	bne.n	800429c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800426c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e067      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d041      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fd fc70 	bl	8001b88 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d136      	bne.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10c      	bne.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4013      	ands	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e00b      	b.n	80042f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e021      	b.n	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10c      	bne.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf14      	ite	ne
 8004344:	2301      	movne	r3, #1
 8004346:	2300      	moveq	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e00b      	b.n	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	f47f af6d 	bne.w	8004244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004380:	e034      	b.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8b8 	bl	80044f8 <I2C_IsAcknowledgeFailed>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e034      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d028      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fd fbf5 	bl	8001b88 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11d      	bne.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b80      	cmp	r3, #128	@ 0x80
 80043bc:	d016      	beq.n	80043ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e007      	b.n	80043fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f6:	2b80      	cmp	r3, #128	@ 0x80
 80043f8:	d1c3      	bne.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004410:	e034      	b.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f870 	bl	80044f8 <I2C_IsAcknowledgeFailed>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e034      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d028      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fd fbad 	bl	8001b88 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d016      	beq.n	800447c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e007      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d1c3      	bne.n	8004412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044a0:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	4a13      	ldr	r2, [pc, #76]	@ (80044f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	0a1a      	lsrs	r2, r3, #8
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d107      	bne.n	80044d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f043 0220 	orr.w	r2, r3, #32
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e008      	b.n	80044e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e0:	d0e9      	beq.n	80044b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000008 	.word	0x20000008
 80044f4:	14f8b589 	.word	0x14f8b589

080044f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800450e:	d11b      	bne.n	8004548 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004518:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	f043 0204 	orr.w	r2, r3, #4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004566:	d103      	bne.n	8004570 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800456e:	e007      	b.n	8004580 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004578:	d102      	bne.n	8004580 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2208      	movs	r2, #8
 800457e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e267      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d075      	beq.n	8004696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045aa:	4b88      	ldr	r3, [pc, #544]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d00c      	beq.n	80045d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b6:	4b85      	ldr	r3, [pc, #532]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d112      	bne.n	80045e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c2:	4b82      	ldr	r3, [pc, #520]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045ce:	d10b      	bne.n	80045e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	4b7e      	ldr	r3, [pc, #504]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05b      	beq.n	8004694 <HAL_RCC_OscConfig+0x108>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d157      	bne.n	8004694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e242      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f0:	d106      	bne.n	8004600 <HAL_RCC_OscConfig+0x74>
 80045f2:	4b76      	ldr	r3, [pc, #472]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a75      	ldr	r2, [pc, #468]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e01d      	b.n	800463c <HAL_RCC_OscConfig+0xb0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x98>
 800460a:	4b70      	ldr	r3, [pc, #448]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6f      	ldr	r2, [pc, #444]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b6d      	ldr	r3, [pc, #436]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6c      	ldr	r2, [pc, #432]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0xb0>
 8004624:	4b69      	ldr	r3, [pc, #420]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a68      	ldr	r2, [pc, #416]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 800462a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b66      	ldr	r3, [pc, #408]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a65      	ldr	r2, [pc, #404]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800463a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd faa0 	bl	8001b88 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fd fa9c 	bl	8001b88 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e207      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b5b      	ldr	r3, [pc, #364]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0xc0>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fd fa8c 	bl	8001b88 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004674:	f7fd fa88 	bl	8001b88 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	@ 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e1f3      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004686:	4b51      	ldr	r3, [pc, #324]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0xe8>
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d063      	beq.n	800476a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046a2:	4b4a      	ldr	r3, [pc, #296]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ae:	4b47      	ldr	r3, [pc, #284]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d11c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ba:	4b44      	ldr	r3, [pc, #272]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d116      	bne.n	80046f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_RCC_OscConfig+0x152>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e1c7      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4937      	ldr	r1, [pc, #220]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f2:	e03a      	b.n	800476a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046fc:	4b34      	ldr	r3, [pc, #208]	@ (80047d0 <HAL_RCC_OscConfig+0x244>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7fd fa41 	bl	8001b88 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7fd fa3d 	bl	8001b88 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e1a8      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471c:	4b2b      	ldr	r3, [pc, #172]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004728:	4b28      	ldr	r3, [pc, #160]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4925      	ldr	r1, [pc, #148]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]
 800473c:	e015      	b.n	800476a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_RCC_OscConfig+0x244>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd fa20 	bl	8001b88 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474c:	f7fd fa1c 	bl	8001b88 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e187      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475e:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d036      	beq.n	80047e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <HAL_RCC_OscConfig+0x248>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7fd fa00 	bl	8001b88 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478c:	f7fd f9fc 	bl	8001b88 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e167      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479e:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_OscConfig+0x240>)
 80047a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x200>
 80047aa:	e01b      	b.n	80047e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ac:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <HAL_RCC_OscConfig+0x248>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b2:	f7fd f9e9 	bl	8001b88 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b8:	e00e      	b.n	80047d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ba:	f7fd f9e5 	bl	8001b88 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d907      	bls.n	80047d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e150      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
 80047cc:	40023800 	.word	0x40023800
 80047d0:	42470000 	.word	0x42470000
 80047d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	4b88      	ldr	r3, [pc, #544]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 80047da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ea      	bne.n	80047ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8097 	beq.w	8004920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f6:	4b81      	ldr	r3, [pc, #516]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	4b7d      	ldr	r3, [pc, #500]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	4a7c      	ldr	r2, [pc, #496]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004810:	6413      	str	r3, [r2, #64]	@ 0x40
 8004812:	4b7a      	ldr	r3, [pc, #488]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481e:	2301      	movs	r3, #1
 8004820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004822:	4b77      	ldr	r3, [pc, #476]	@ (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d118      	bne.n	8004860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482e:	4b74      	ldr	r3, [pc, #464]	@ (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a73      	ldr	r2, [pc, #460]	@ (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483a:	f7fd f9a5 	bl	8001b88 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004842:	f7fd f9a1 	bl	8001b88 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e10c      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004854:	4b6a      	ldr	r3, [pc, #424]	@ (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d106      	bne.n	8004876 <HAL_RCC_OscConfig+0x2ea>
 8004868:	4b64      	ldr	r3, [pc, #400]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	4a63      	ldr	r2, [pc, #396]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6713      	str	r3, [r2, #112]	@ 0x70
 8004874:	e01c      	b.n	80048b0 <HAL_RCC_OscConfig+0x324>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b05      	cmp	r3, #5
 800487c:	d10c      	bne.n	8004898 <HAL_RCC_OscConfig+0x30c>
 800487e:	4b5f      	ldr	r3, [pc, #380]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004882:	4a5e      	ldr	r2, [pc, #376]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	6713      	str	r3, [r2, #112]	@ 0x70
 800488a:	4b5c      	ldr	r3, [pc, #368]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a5b      	ldr	r2, [pc, #364]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6713      	str	r3, [r2, #112]	@ 0x70
 8004896:	e00b      	b.n	80048b0 <HAL_RCC_OscConfig+0x324>
 8004898:	4b58      	ldr	r3, [pc, #352]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489c:	4a57      	ldr	r2, [pc, #348]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a4:	4b55      	ldr	r3, [pc, #340]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	4a54      	ldr	r2, [pc, #336]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 80048aa:	f023 0304 	bic.w	r3, r3, #4
 80048ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d015      	beq.n	80048e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fd f966 	bl	8001b88 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fd f962 	bl	8001b88 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0cb      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d6:	4b49      	ldr	r3, [pc, #292]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0ee      	beq.n	80048c0 <HAL_RCC_OscConfig+0x334>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e4:	f7fd f950 	bl	8001b88 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fd f94c 	bl	8001b88 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0b5      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004902:	4b3e      	ldr	r3, [pc, #248]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ee      	bne.n	80048ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d105      	bne.n	8004920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004914:	4b39      	ldr	r3, [pc, #228]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	4a38      	ldr	r2, [pc, #224]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800491a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80a1 	beq.w	8004a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800492a:	4b34      	ldr	r3, [pc, #208]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b08      	cmp	r3, #8
 8004934:	d05c      	beq.n	80049f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d141      	bne.n	80049c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493e:	4b31      	ldr	r3, [pc, #196]	@ (8004a04 <HAL_RCC_OscConfig+0x478>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fd f920 	bl	8001b88 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd f91c 	bl	8001b88 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e087      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	4b27      	ldr	r3, [pc, #156]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	3b01      	subs	r3, #1
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	061b      	lsls	r3, r3, #24
 800498e:	491b      	ldr	r1, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004994:	4b1b      	ldr	r3, [pc, #108]	@ (8004a04 <HAL_RCC_OscConfig+0x478>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499a:	f7fd f8f5 	bl	8001b88 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fd f8f1 	bl	8001b88 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e05c      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b4:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x416>
 80049c0:	e054      	b.n	8004a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <HAL_RCC_OscConfig+0x478>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fd f8de 	bl	8001b88 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fd f8da 	bl	8001b88 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e045      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_RCC_OscConfig+0x470>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x444>
 80049ee:	e03d      	b.n	8004a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e038      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40007000 	.word	0x40007000
 8004a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <HAL_RCC_OscConfig+0x4ec>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d028      	beq.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d121      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d11a      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d111      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	3b01      	subs	r3, #1
 8004a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800

08004a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0cc      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a90:	4b68      	ldr	r3, [pc, #416]	@ (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d90c      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b65      	ldr	r3, [pc, #404]	@ (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b63      	ldr	r3, [pc, #396]	@ (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0b8      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d020      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad0:	4b59      	ldr	r3, [pc, #356]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4a58      	ldr	r2, [pc, #352]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae8:	4b53      	ldr	r3, [pc, #332]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a52      	ldr	r2, [pc, #328]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af4:	4b50      	ldr	r3, [pc, #320]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	494d      	ldr	r1, [pc, #308]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d044      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b47      	ldr	r3, [pc, #284]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d119      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e07f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d003      	beq.n	8004b3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e06f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e067      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5a:	4b37      	ldr	r3, [pc, #220]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4934      	ldr	r1, [pc, #208]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b6c:	f7fd f80c 	bl	8001b88 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b74:	f7fd f808 	bl	8001b88 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e04f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 020c 	and.w	r2, r3, #12
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1eb      	bne.n	8004b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b25      	ldr	r3, [pc, #148]	@ (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d20c      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b20      	ldr	r3, [pc, #128]	@ (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e032      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	4b19      	ldr	r3, [pc, #100]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4916      	ldr	r1, [pc, #88]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bee:	4b12      	ldr	r3, [pc, #72]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	490e      	ldr	r1, [pc, #56]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c02:	f000 f821 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004c06:	4602      	mov	r2, r0
 8004c08:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	490a      	ldr	r1, [pc, #40]	@ (8004c3c <HAL_RCC_ClockConfig+0x1c0>)
 8004c14:	5ccb      	ldrb	r3, [r1, r3]
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	4a09      	ldr	r2, [pc, #36]	@ (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c1e:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fc ff6c 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40023c00 	.word	0x40023c00
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	0800a23c 	.word	0x0800a23c
 8004c40:	20000008 	.word	0x20000008
 8004c44:	2000000c 	.word	0x2000000c

08004c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c4c:	b090      	sub	sp, #64	@ 0x40
 8004c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c60:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d00d      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x40>
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	f200 80a1 	bhi.w	8004db4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0x34>
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d003      	beq.n	8004c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c7a:	e09b      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c7c:	4b53      	ldr	r3, [pc, #332]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8004c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c80:	e09b      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c82:	4b53      	ldr	r3, [pc, #332]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c86:	e098      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c88:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c92:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d028      	beq.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	623b      	str	r3, [r7, #32]
 8004ca8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4b47      	ldr	r3, [pc, #284]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cb4:	fb03 f201 	mul.w	r2, r3, r1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	fb00 f303 	mul.w	r3, r0, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	4a43      	ldr	r2, [pc, #268]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cc2:	fba0 1202 	umull	r1, r2, r0, r2
 8004cc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc8:	460a      	mov	r2, r1
 8004cca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ccc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cce:	4413      	add	r3, r2
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	61fa      	str	r2, [r7, #28]
 8004cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ce2:	f7fb ffd1 	bl	8000c88 <__aeabi_uldivmod>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4613      	mov	r3, r2
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cee:	e053      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf0:	4b35      	ldr	r3, [pc, #212]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	617a      	str	r2, [r7, #20]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d02:	f04f 0b00 	mov.w	fp, #0
 8004d06:	4652      	mov	r2, sl
 8004d08:	465b      	mov	r3, fp
 8004d0a:	f04f 0000 	mov.w	r0, #0
 8004d0e:	f04f 0100 	mov.w	r1, #0
 8004d12:	0159      	lsls	r1, r3, #5
 8004d14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d18:	0150      	lsls	r0, r2, #5
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	ebb2 080a 	subs.w	r8, r2, sl
 8004d22:	eb63 090b 	sbc.w	r9, r3, fp
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d3a:	ebb2 0408 	subs.w	r4, r2, r8
 8004d3e:	eb63 0509 	sbc.w	r5, r3, r9
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	00eb      	lsls	r3, r5, #3
 8004d4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d50:	00e2      	lsls	r2, r4, #3
 8004d52:	4614      	mov	r4, r2
 8004d54:	461d      	mov	r5, r3
 8004d56:	eb14 030a 	adds.w	r3, r4, sl
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	eb45 030b 	adc.w	r3, r5, fp
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d6e:	4629      	mov	r1, r5
 8004d70:	028b      	lsls	r3, r1, #10
 8004d72:	4621      	mov	r1, r4
 8004d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d78:	4621      	mov	r1, r4
 8004d7a:	028a      	lsls	r2, r1, #10
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d82:	2200      	movs	r2, #0
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	60fa      	str	r2, [r7, #12]
 8004d88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d8c:	f7fb ff7c 	bl	8000c88 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4613      	mov	r3, r2
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	3301      	adds	r3, #1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004da8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db2:	e002      	b.n	8004dba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db4:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x184>)
 8004db6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3740      	adds	r7, #64	@ 0x40
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	017d7840 	.word	0x017d7840

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	@ (8004de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000008 	.word	0x20000008

08004dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004df0:	f7ff fff0 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0a9b      	lsrs	r3, r3, #10
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	@ (8004e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	0800a24c 	.word	0x0800a24c

08004e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e041      	b.n	8004eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc fcd8 	bl	80017f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f000 f9f8 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d001      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e04e      	b.n	8004f6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a23      	ldr	r2, [pc, #140]	@ (8004f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d022      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x80>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef6:	d01d      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x80>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d018      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x80>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1e      	ldr	r2, [pc, #120]	@ (8004f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d013      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x80>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1c      	ldr	r2, [pc, #112]	@ (8004f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00e      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x80>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d009      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x80>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a19      	ldr	r2, [pc, #100]	@ (8004f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <HAL_TIM_Base_Start_IT+0x80>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d111      	bne.n	8004f58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b06      	cmp	r3, #6
 8004f44:	d010      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f56:	e007      	b.n	8004f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40001800 	.word	0x40001800

08004f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d020      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0202 	mvn.w	r2, #2
 8004fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f914 	bl	800520c <HAL_TIM_IC_CaptureCallback>
 8004fe4:	e005      	b.n	8004ff2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f906 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f917 	bl	8005220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d020      	beq.n	8005044 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01b      	beq.n	8005044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0204 	mvn.w	r2, #4
 8005014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f8ee 	bl	800520c <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f8e0 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f8f1 	bl	8005220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d020      	beq.n	8005090 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01b      	beq.n	8005090 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0208 	mvn.w	r2, #8
 8005060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2204      	movs	r2, #4
 8005066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8c8 	bl	800520c <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8ba 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8cb 	bl	8005220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0210 	mvn.w	r2, #16
 80050ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2208      	movs	r2, #8
 80050b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8a2 	bl	800520c <HAL_TIM_IC_CaptureCallback>
 80050c8:	e005      	b.n	80050d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f894 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f8a5 	bl	8005220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00c      	beq.n	8005100 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0201 	mvn.w	r2, #1
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fc f85a 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fad4 	bl	80056cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f876 	bl	8005234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0220 	mvn.w	r2, #32
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 faa6 	bl	80056b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800516c:	bf00      	nop
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005188:	2302      	movs	r3, #2
 800518a:	e031      	b.n	80051f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f8fe 	bl	80053a0 <TIM_SlaveTimer_SetConfig>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e018      	b.n	80051f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051cc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051dc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a46      	ldr	r2, [pc, #280]	@ (8005374 <TIM_Base_SetConfig+0x12c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d00f      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a43      	ldr	r2, [pc, #268]	@ (8005378 <TIM_Base_SetConfig+0x130>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a42      	ldr	r2, [pc, #264]	@ (800537c <TIM_Base_SetConfig+0x134>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a41      	ldr	r2, [pc, #260]	@ (8005380 <TIM_Base_SetConfig+0x138>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a40      	ldr	r2, [pc, #256]	@ (8005384 <TIM_Base_SetConfig+0x13c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a35      	ldr	r2, [pc, #212]	@ (8005374 <TIM_Base_SetConfig+0x12c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052a8:	d027      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a32      	ldr	r2, [pc, #200]	@ (8005378 <TIM_Base_SetConfig+0x130>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d023      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a31      	ldr	r2, [pc, #196]	@ (800537c <TIM_Base_SetConfig+0x134>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a30      	ldr	r2, [pc, #192]	@ (8005380 <TIM_Base_SetConfig+0x138>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005384 <TIM_Base_SetConfig+0x13c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d017      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005388 <TIM_Base_SetConfig+0x140>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2d      	ldr	r2, [pc, #180]	@ (800538c <TIM_Base_SetConfig+0x144>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005390 <TIM_Base_SetConfig+0x148>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005394 <TIM_Base_SetConfig+0x14c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005398 <TIM_Base_SetConfig+0x150>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a29      	ldr	r2, [pc, #164]	@ (800539c <TIM_Base_SetConfig+0x154>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a10      	ldr	r2, [pc, #64]	@ (8005374 <TIM_Base_SetConfig+0x12c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0xf8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a12      	ldr	r2, [pc, #72]	@ (8005384 <TIM_Base_SetConfig+0x13c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d105      	bne.n	8005366 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f023 0201 	bic.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]
  }
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40010400 	.word	0x40010400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800
 8005394:	40001800 	.word	0x40001800
 8005398:	40001c00 	.word	0x40001c00
 800539c:	40002000 	.word	0x40002000

080053a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b70      	cmp	r3, #112	@ 0x70
 80053e8:	d01a      	beq.n	8005420 <TIM_SlaveTimer_SetConfig+0x80>
 80053ea:	2b70      	cmp	r3, #112	@ 0x70
 80053ec:	d860      	bhi.n	80054b0 <TIM_SlaveTimer_SetConfig+0x110>
 80053ee:	2b60      	cmp	r3, #96	@ 0x60
 80053f0:	d054      	beq.n	800549c <TIM_SlaveTimer_SetConfig+0xfc>
 80053f2:	2b60      	cmp	r3, #96	@ 0x60
 80053f4:	d85c      	bhi.n	80054b0 <TIM_SlaveTimer_SetConfig+0x110>
 80053f6:	2b50      	cmp	r3, #80	@ 0x50
 80053f8:	d046      	beq.n	8005488 <TIM_SlaveTimer_SetConfig+0xe8>
 80053fa:	2b50      	cmp	r3, #80	@ 0x50
 80053fc:	d858      	bhi.n	80054b0 <TIM_SlaveTimer_SetConfig+0x110>
 80053fe:	2b40      	cmp	r3, #64	@ 0x40
 8005400:	d019      	beq.n	8005436 <TIM_SlaveTimer_SetConfig+0x96>
 8005402:	2b40      	cmp	r3, #64	@ 0x40
 8005404:	d854      	bhi.n	80054b0 <TIM_SlaveTimer_SetConfig+0x110>
 8005406:	2b30      	cmp	r3, #48	@ 0x30
 8005408:	d055      	beq.n	80054b6 <TIM_SlaveTimer_SetConfig+0x116>
 800540a:	2b30      	cmp	r3, #48	@ 0x30
 800540c:	d850      	bhi.n	80054b0 <TIM_SlaveTimer_SetConfig+0x110>
 800540e:	2b20      	cmp	r3, #32
 8005410:	d051      	beq.n	80054b6 <TIM_SlaveTimer_SetConfig+0x116>
 8005412:	2b20      	cmp	r3, #32
 8005414:	d84c      	bhi.n	80054b0 <TIM_SlaveTimer_SetConfig+0x110>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d04d      	beq.n	80054b6 <TIM_SlaveTimer_SetConfig+0x116>
 800541a:	2b10      	cmp	r3, #16
 800541c:	d04b      	beq.n	80054b6 <TIM_SlaveTimer_SetConfig+0x116>
 800541e:	e047      	b.n	80054b0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005430:	f000 f8a6 	bl	8005580 <TIM_ETR_SetConfig>
      break;
 8005434:	e040      	b.n	80054b8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b05      	cmp	r3, #5
 800543c:	d101      	bne.n	8005442 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e03b      	b.n	80054ba <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005468:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4313      	orrs	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
      break;
 8005486:	e017      	b.n	80054b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005494:	461a      	mov	r2, r3
 8005496:	f000 f814 	bl	80054c2 <TIM_TI1_ConfigInputStage>
      break;
 800549a:	e00d      	b.n	80054b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a8:	461a      	mov	r2, r3
 80054aa:	f000 f839 	bl	8005520 <TIM_TI2_ConfigInputStage>
      break;
 80054ae:	e003      	b.n	80054b8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	e000      	b.n	80054b8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80054b6:	bf00      	nop
  }

  return status;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b087      	sub	sp, #28
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f023 0201 	bic.w	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 030a 	bic.w	r3, r3, #10
 80054fe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0210 	bic.w	r2, r3, #16
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	031b      	lsls	r3, r3, #12
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	621a      	str	r2, [r3, #32]
}
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800559a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e05a      	b.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a21      	ldr	r2, [pc, #132]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d022      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005624:	d01d      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1b      	ldr	r2, [pc, #108]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1a      	ldr	r2, [pc, #104]	@ (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a18      	ldr	r2, [pc, #96]	@ (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a17      	ldr	r2, [pc, #92]	@ (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10c      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4313      	orrs	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40010400 	.word	0x40010400
 80056b0:	40014000 	.word	0x40014000
 80056b4:	40001800 	.word	0x40001800

080056b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6892      	ldr	r2, [r2, #8]
 800573e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6852      	ldr	r2, [r2, #4]
 8005748:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d103      	bne.n	800575c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005786:	4b3f      	ldr	r3, [pc, #252]	@ (8005884 <xTaskIncrementTick+0x108>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d170      	bne.n	8005870 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800578e:	4b3e      	ldr	r3, [pc, #248]	@ (8005888 <xTaskIncrementTick+0x10c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3301      	adds	r3, #1
 8005794:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005796:	4a3c      	ldr	r2, [pc, #240]	@ (8005888 <xTaskIncrementTick+0x10c>)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d121      	bne.n	80057e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057a2:	4b3a      	ldr	r3, [pc, #232]	@ (800588c <xTaskIncrementTick+0x110>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xTaskIncrementTick+0x44>
 80057c4:	4b31      	ldr	r3, [pc, #196]	@ (800588c <xTaskIncrementTick+0x110>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	4b31      	ldr	r3, [pc, #196]	@ (8005890 <xTaskIncrementTick+0x114>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2f      	ldr	r2, [pc, #188]	@ (800588c <xTaskIncrementTick+0x110>)
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005890 <xTaskIncrementTick+0x114>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005894 <xTaskIncrementTick+0x118>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	4a2d      	ldr	r2, [pc, #180]	@ (8005894 <xTaskIncrementTick+0x118>)
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	f000 f8bd 	bl	8005960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005898 <xTaskIncrementTick+0x11c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d344      	bcc.n	800587a <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057f0:	4b26      	ldr	r3, [pc, #152]	@ (800588c <xTaskIncrementTick+0x110>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057fa:	4b27      	ldr	r3, [pc, #156]	@ (8005898 <xTaskIncrementTick+0x11c>)
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005800:	601a      	str	r2, [r3, #0]
					break;
 8005802:	e03a      	b.n	800587a <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005804:	4b21      	ldr	r3, [pc, #132]	@ (800588c <xTaskIncrementTick+0x110>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d203      	bcs.n	8005824 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800581c:	4a1e      	ldr	r2, [pc, #120]	@ (8005898 <xTaskIncrementTick+0x11c>)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005822:	e02a      	b.n	800587a <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	3304      	adds	r3, #4
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff ff7d 	bl	8005728 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	3318      	adds	r3, #24
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ff74 	bl	8005728 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	2201      	movs	r2, #1
 8005846:	409a      	lsls	r2, r3
 8005848:	4b14      	ldr	r3, [pc, #80]	@ (800589c <xTaskIncrementTick+0x120>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4313      	orrs	r3, r2
 800584e:	4a13      	ldr	r2, [pc, #76]	@ (800589c <xTaskIncrementTick+0x120>)
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <xTaskIncrementTick+0x124>)
 8005860:	441a      	add	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3304      	adds	r3, #4
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f7ff ff39 	bl	80056e0 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586e:	e7bf      	b.n	80057f0 <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005870:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <xTaskIncrementTick+0x128>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	4a0b      	ldr	r2, [pc, #44]	@ (80058a4 <xTaskIncrementTick+0x128>)
 8005878:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800587a:	697b      	ldr	r3, [r7, #20]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000364 	.word	0x20000364
 8005888:	20000348 	.word	0x20000348
 800588c:	20000340 	.word	0x20000340
 8005890:	20000344 	.word	0x20000344
 8005894:	2000035c 	.word	0x2000035c
 8005898:	20000360 	.word	0x20000360
 800589c:	2000034c 	.word	0x2000034c
 80058a0:	200002b4 	.word	0x200002b4
 80058a4:	20000354 	.word	0x20000354

080058a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ae:	4b27      	ldr	r3, [pc, #156]	@ (800594c <vTaskSwitchContext+0xa4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058b6:	4b26      	ldr	r3, [pc, #152]	@ (8005950 <vTaskSwitchContext+0xa8>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058bc:	e040      	b.n	8005940 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80058be:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <vTaskSwitchContext+0xa8>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c4:	4b23      	ldr	r3, [pc, #140]	@ (8005954 <vTaskSwitchContext+0xac>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	fab3 f383 	clz	r3, r3
 80058d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058d2:	7afb      	ldrb	r3, [r7, #11]
 80058d4:	f1c3 031f 	rsb	r3, r3, #31
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	491f      	ldr	r1, [pc, #124]	@ (8005958 <vTaskSwitchContext+0xb0>)
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <vTaskSwitchContext+0x5e>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	607b      	str	r3, [r7, #4]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <vTaskSwitchContext+0x5a>
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4a11      	ldr	r2, [pc, #68]	@ (8005958 <vTaskSwitchContext+0xb0>)
 8005912:	4413      	add	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	3308      	adds	r3, #8
 8005928:	429a      	cmp	r2, r3
 800592a:	d104      	bne.n	8005936 <vTaskSwitchContext+0x8e>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a07      	ldr	r2, [pc, #28]	@ (800595c <vTaskSwitchContext+0xb4>)
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000364 	.word	0x20000364
 8005950:	20000358 	.word	0x20000358
 8005954:	2000034c 	.word	0x2000034c
 8005958:	200002b4 	.word	0x200002b4
 800595c:	200002b0 	.word	0x200002b0

08005960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005966:	4b0c      	ldr	r3, [pc, #48]	@ (8005998 <prvResetNextTaskUnblockTime+0x38>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005970:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <prvResetNextTaskUnblockTime+0x3c>)
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005978:	e008      	b.n	800598c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597a:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <prvResetNextTaskUnblockTime+0x38>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a04      	ldr	r2, [pc, #16]	@ (800599c <prvResetNextTaskUnblockTime+0x3c>)
 800598a:	6013      	str	r3, [r2, #0]
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000340 	.word	0x20000340
 800599c:	20000360 	.word	0x20000360

080059a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059a6:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <xTaskGetSchedulerState+0x34>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d102      	bne.n	80059b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059ae:	2301      	movs	r3, #1
 80059b0:	607b      	str	r3, [r7, #4]
 80059b2:	e008      	b.n	80059c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b4:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <xTaskGetSchedulerState+0x38>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059bc:	2302      	movs	r3, #2
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	e001      	b.n	80059c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059c6:	687b      	ldr	r3, [r7, #4]
	}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	20000350 	.word	0x20000350
 80059d8:	20000364 	.word	0x20000364
 80059dc:	00000000 	.word	0x00000000

080059e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	@ (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	4770      	bx	lr
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst2>:
 8005a00:	200002b0 	.word	0x200002b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
	...

08005a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a10:	f3ef 8009 	mrs	r0, PSP
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <pxCurrentTCBConst>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f01e 0f10 	tst.w	lr, #16
 8005a20:	bf08      	it	eq
 8005a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	6010      	str	r0, [r2, #0]
 8005a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a34:	f380 8811 	msr	BASEPRI, r0
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f7ff ff32 	bl	80058a8 <vTaskSwitchContext>
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f380 8811 	msr	BASEPRI, r0
 8005a4c:	bc09      	pop	{r0, r3}
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a56:	f01e 0f10 	tst.w	lr, #16
 8005a5a:	bf08      	it	eq
 8005a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a60:	f380 8809 	msr	PSP, r0
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst>:
 8005a70:	200002b0 	.word	0x200002b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
}
 8005a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a92:	f7ff fe73 	bl	800577c <xTaskIncrementTick>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <xPortSysTickHandler+0x40>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <__cvt>:
 8005abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	ec57 6b10 	vmov	r6, r7, d0
 8005ac4:	2f00      	cmp	r7, #0
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	4619      	mov	r1, r3
 8005aca:	463b      	mov	r3, r7
 8005acc:	bfbb      	ittet	lt
 8005ace:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ad2:	461f      	movlt	r7, r3
 8005ad4:	2300      	movge	r3, #0
 8005ad6:	232d      	movlt	r3, #45	@ 0x2d
 8005ad8:	700b      	strb	r3, [r1, #0]
 8005ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005adc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005ae0:	4691      	mov	r9, r2
 8005ae2:	f023 0820 	bic.w	r8, r3, #32
 8005ae6:	bfbc      	itt	lt
 8005ae8:	4632      	movlt	r2, r6
 8005aea:	4616      	movlt	r6, r2
 8005aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005af0:	d005      	beq.n	8005afe <__cvt+0x42>
 8005af2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005af6:	d100      	bne.n	8005afa <__cvt+0x3e>
 8005af8:	3401      	adds	r4, #1
 8005afa:	2102      	movs	r1, #2
 8005afc:	e000      	b.n	8005b00 <__cvt+0x44>
 8005afe:	2103      	movs	r1, #3
 8005b00:	ab03      	add	r3, sp, #12
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	ab02      	add	r3, sp, #8
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	ec47 6b10 	vmov	d0, r6, r7
 8005b0c:	4653      	mov	r3, sl
 8005b0e:	4622      	mov	r2, r4
 8005b10:	f001 f8b6 	bl	8006c80 <_dtoa_r>
 8005b14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b18:	4605      	mov	r5, r0
 8005b1a:	d119      	bne.n	8005b50 <__cvt+0x94>
 8005b1c:	f019 0f01 	tst.w	r9, #1
 8005b20:	d00e      	beq.n	8005b40 <__cvt+0x84>
 8005b22:	eb00 0904 	add.w	r9, r0, r4
 8005b26:	2200      	movs	r2, #0
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b32:	b108      	cbz	r0, 8005b38 <__cvt+0x7c>
 8005b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b38:	2230      	movs	r2, #48	@ 0x30
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	454b      	cmp	r3, r9
 8005b3e:	d31e      	bcc.n	8005b7e <__cvt+0xc2>
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b44:	1b5b      	subs	r3, r3, r5
 8005b46:	4628      	mov	r0, r5
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	b004      	add	sp, #16
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b54:	eb00 0904 	add.w	r9, r0, r4
 8005b58:	d1e5      	bne.n	8005b26 <__cvt+0x6a>
 8005b5a:	7803      	ldrb	r3, [r0, #0]
 8005b5c:	2b30      	cmp	r3, #48	@ 0x30
 8005b5e:	d10a      	bne.n	8005b76 <__cvt+0xba>
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b6c:	b918      	cbnz	r0, 8005b76 <__cvt+0xba>
 8005b6e:	f1c4 0401 	rsb	r4, r4, #1
 8005b72:	f8ca 4000 	str.w	r4, [sl]
 8005b76:	f8da 3000 	ldr.w	r3, [sl]
 8005b7a:	4499      	add	r9, r3
 8005b7c:	e7d3      	b.n	8005b26 <__cvt+0x6a>
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	9103      	str	r1, [sp, #12]
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	e7d9      	b.n	8005b3a <__cvt+0x7e>

08005b86 <__exponent>:
 8005b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	bfba      	itte	lt
 8005b8c:	4249      	neglt	r1, r1
 8005b8e:	232d      	movlt	r3, #45	@ 0x2d
 8005b90:	232b      	movge	r3, #43	@ 0x2b
 8005b92:	2909      	cmp	r1, #9
 8005b94:	7002      	strb	r2, [r0, #0]
 8005b96:	7043      	strb	r3, [r0, #1]
 8005b98:	dd29      	ble.n	8005bee <__exponent+0x68>
 8005b9a:	f10d 0307 	add.w	r3, sp, #7
 8005b9e:	461d      	mov	r5, r3
 8005ba0:	270a      	movs	r7, #10
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ba8:	fb07 1416 	mls	r4, r7, r6, r1
 8005bac:	3430      	adds	r4, #48	@ 0x30
 8005bae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	2c63      	cmp	r4, #99	@ 0x63
 8005bb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bba:	4631      	mov	r1, r6
 8005bbc:	dcf1      	bgt.n	8005ba2 <__exponent+0x1c>
 8005bbe:	3130      	adds	r1, #48	@ 0x30
 8005bc0:	1e94      	subs	r4, r2, #2
 8005bc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bc6:	1c41      	adds	r1, r0, #1
 8005bc8:	4623      	mov	r3, r4
 8005bca:	42ab      	cmp	r3, r5
 8005bcc:	d30a      	bcc.n	8005be4 <__exponent+0x5e>
 8005bce:	f10d 0309 	add.w	r3, sp, #9
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	42ac      	cmp	r4, r5
 8005bd6:	bf88      	it	hi
 8005bd8:	2300      	movhi	r3, #0
 8005bda:	3302      	adds	r3, #2
 8005bdc:	4403      	add	r3, r0
 8005bde:	1a18      	subs	r0, r3, r0
 8005be0:	b003      	add	sp, #12
 8005be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005be8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005bec:	e7ed      	b.n	8005bca <__exponent+0x44>
 8005bee:	2330      	movs	r3, #48	@ 0x30
 8005bf0:	3130      	adds	r1, #48	@ 0x30
 8005bf2:	7083      	strb	r3, [r0, #2]
 8005bf4:	70c1      	strb	r1, [r0, #3]
 8005bf6:	1d03      	adds	r3, r0, #4
 8005bf8:	e7f1      	b.n	8005bde <__exponent+0x58>
	...

08005bfc <_printf_float>:
 8005bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	b08d      	sub	sp, #52	@ 0x34
 8005c02:	460c      	mov	r4, r1
 8005c04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c08:	4616      	mov	r6, r2
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	f000 ff23 	bl	8006a58 <_localeconv_r>
 8005c12:	6803      	ldr	r3, [r0, #0]
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fb2a 	bl	8000270 <strlen>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c20:	f8d8 3000 	ldr.w	r3, [r8]
 8005c24:	9005      	str	r0, [sp, #20]
 8005c26:	3307      	adds	r3, #7
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	f103 0208 	add.w	r2, r3, #8
 8005c30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c34:	f8d4 b000 	ldr.w	fp, [r4]
 8005c38:	f8c8 2000 	str.w	r2, [r8]
 8005c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c52:	4b9c      	ldr	r3, [pc, #624]	@ (8005ec4 <_printf_float+0x2c8>)
 8005c54:	f04f 32ff 	mov.w	r2, #4294967295
 8005c58:	f7fa ff68 	bl	8000b2c <__aeabi_dcmpun>
 8005c5c:	bb70      	cbnz	r0, 8005cbc <_printf_float+0xc0>
 8005c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c62:	4b98      	ldr	r3, [pc, #608]	@ (8005ec4 <_printf_float+0x2c8>)
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	f7fa ff42 	bl	8000af0 <__aeabi_dcmple>
 8005c6c:	bb30      	cbnz	r0, 8005cbc <_printf_float+0xc0>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2300      	movs	r3, #0
 8005c72:	4640      	mov	r0, r8
 8005c74:	4649      	mov	r1, r9
 8005c76:	f7fa ff31 	bl	8000adc <__aeabi_dcmplt>
 8005c7a:	b110      	cbz	r0, 8005c82 <_printf_float+0x86>
 8005c7c:	232d      	movs	r3, #45	@ 0x2d
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c82:	4a91      	ldr	r2, [pc, #580]	@ (8005ec8 <_printf_float+0x2cc>)
 8005c84:	4b91      	ldr	r3, [pc, #580]	@ (8005ecc <_printf_float+0x2d0>)
 8005c86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c8a:	bf94      	ite	ls
 8005c8c:	4690      	movls	r8, r2
 8005c8e:	4698      	movhi	r8, r3
 8005c90:	2303      	movs	r3, #3
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	f02b 0304 	bic.w	r3, fp, #4
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	9700      	str	r7, [sp, #0]
 8005ca0:	4633      	mov	r3, r6
 8005ca2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f9d2 	bl	8006050 <_printf_common>
 8005cac:	3001      	adds	r0, #1
 8005cae:	f040 808d 	bne.w	8005dcc <_printf_float+0x1d0>
 8005cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb6:	b00d      	add	sp, #52	@ 0x34
 8005cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	f7fa ff32 	bl	8000b2c <__aeabi_dcmpun>
 8005cc8:	b140      	cbz	r0, 8005cdc <_printf_float+0xe0>
 8005cca:	464b      	mov	r3, r9
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	bfbc      	itt	lt
 8005cd0:	232d      	movlt	r3, #45	@ 0x2d
 8005cd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ed0 <_printf_float+0x2d4>)
 8005cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ed4 <_printf_float+0x2d8>)
 8005cda:	e7d4      	b.n	8005c86 <_printf_float+0x8a>
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ce2:	9206      	str	r2, [sp, #24]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	d13b      	bne.n	8005d60 <_printf_float+0x164>
 8005ce8:	2306      	movs	r3, #6
 8005cea:	6063      	str	r3, [r4, #4]
 8005cec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6022      	str	r2, [r4, #0]
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8005cf8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005cfc:	ab09      	add	r3, sp, #36	@ 0x24
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	6861      	ldr	r1, [r4, #4]
 8005d02:	ec49 8b10 	vmov	d0, r8, r9
 8005d06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7ff fed6 	bl	8005abc <__cvt>
 8005d10:	9b06      	ldr	r3, [sp, #24]
 8005d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d14:	2b47      	cmp	r3, #71	@ 0x47
 8005d16:	4680      	mov	r8, r0
 8005d18:	d129      	bne.n	8005d6e <_printf_float+0x172>
 8005d1a:	1cc8      	adds	r0, r1, #3
 8005d1c:	db02      	blt.n	8005d24 <_printf_float+0x128>
 8005d1e:	6863      	ldr	r3, [r4, #4]
 8005d20:	4299      	cmp	r1, r3
 8005d22:	dd41      	ble.n	8005da8 <_printf_float+0x1ac>
 8005d24:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d28:	fa5f fa8a 	uxtb.w	sl, sl
 8005d2c:	3901      	subs	r1, #1
 8005d2e:	4652      	mov	r2, sl
 8005d30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d34:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d36:	f7ff ff26 	bl	8005b86 <__exponent>
 8005d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d3c:	1813      	adds	r3, r2, r0
 8005d3e:	2a01      	cmp	r2, #1
 8005d40:	4681      	mov	r9, r0
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	dc02      	bgt.n	8005d4c <_printf_float+0x150>
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	07d2      	lsls	r2, r2, #31
 8005d4a:	d501      	bpl.n	8005d50 <_printf_float+0x154>
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0a2      	beq.n	8005c9e <_printf_float+0xa2>
 8005d58:	232d      	movs	r3, #45	@ 0x2d
 8005d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d5e:	e79e      	b.n	8005c9e <_printf_float+0xa2>
 8005d60:	9a06      	ldr	r2, [sp, #24]
 8005d62:	2a47      	cmp	r2, #71	@ 0x47
 8005d64:	d1c2      	bne.n	8005cec <_printf_float+0xf0>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1c0      	bne.n	8005cec <_printf_float+0xf0>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7bd      	b.n	8005cea <_printf_float+0xee>
 8005d6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d72:	d9db      	bls.n	8005d2c <_printf_float+0x130>
 8005d74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d78:	d118      	bne.n	8005dac <_printf_float+0x1b0>
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	dd0b      	ble.n	8005d98 <_printf_float+0x19c>
 8005d80:	6121      	str	r1, [r4, #16]
 8005d82:	b913      	cbnz	r3, 8005d8a <_printf_float+0x18e>
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	07d0      	lsls	r0, r2, #31
 8005d88:	d502      	bpl.n	8005d90 <_printf_float+0x194>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	440b      	add	r3, r1
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d92:	f04f 0900 	mov.w	r9, #0
 8005d96:	e7db      	b.n	8005d50 <_printf_float+0x154>
 8005d98:	b913      	cbnz	r3, 8005da0 <_printf_float+0x1a4>
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	07d2      	lsls	r2, r2, #31
 8005d9e:	d501      	bpl.n	8005da4 <_printf_float+0x1a8>
 8005da0:	3302      	adds	r3, #2
 8005da2:	e7f4      	b.n	8005d8e <_printf_float+0x192>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e7f2      	b.n	8005d8e <_printf_float+0x192>
 8005da8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dae:	4299      	cmp	r1, r3
 8005db0:	db05      	blt.n	8005dbe <_printf_float+0x1c2>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6121      	str	r1, [r4, #16]
 8005db6:	07d8      	lsls	r0, r3, #31
 8005db8:	d5ea      	bpl.n	8005d90 <_printf_float+0x194>
 8005dba:	1c4b      	adds	r3, r1, #1
 8005dbc:	e7e7      	b.n	8005d8e <_printf_float+0x192>
 8005dbe:	2900      	cmp	r1, #0
 8005dc0:	bfd4      	ite	le
 8005dc2:	f1c1 0202 	rsble	r2, r1, #2
 8005dc6:	2201      	movgt	r2, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	e7e0      	b.n	8005d8e <_printf_float+0x192>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	055a      	lsls	r2, r3, #21
 8005dd0:	d407      	bmi.n	8005de2 <_printf_float+0x1e6>
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d12b      	bne.n	8005e38 <_printf_float+0x23c>
 8005de0:	e767      	b.n	8005cb2 <_printf_float+0xb6>
 8005de2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005de6:	f240 80dd 	bls.w	8005fa4 <_printf_float+0x3a8>
 8005dea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005dee:	2200      	movs	r2, #0
 8005df0:	2300      	movs	r3, #0
 8005df2:	f7fa fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d033      	beq.n	8005e62 <_printf_float+0x266>
 8005dfa:	4a37      	ldr	r2, [pc, #220]	@ (8005ed8 <_printf_float+0x2dc>)
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4631      	mov	r1, r6
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	f43f af54 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e0e:	4543      	cmp	r3, r8
 8005e10:	db02      	blt.n	8005e18 <_printf_float+0x21c>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	07d8      	lsls	r0, r3, #31
 8005e16:	d50f      	bpl.n	8005e38 <_printf_float+0x23c>
 8005e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f af45 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e28:	f04f 0900 	mov.w	r9, #0
 8005e2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e30:	f104 0a1a 	add.w	sl, r4, #26
 8005e34:	45c8      	cmp	r8, r9
 8005e36:	dc09      	bgt.n	8005e4c <_printf_float+0x250>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	079b      	lsls	r3, r3, #30
 8005e3c:	f100 8103 	bmi.w	8006046 <_printf_float+0x44a>
 8005e40:	68e0      	ldr	r0, [r4, #12]
 8005e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e44:	4298      	cmp	r0, r3
 8005e46:	bfb8      	it	lt
 8005e48:	4618      	movlt	r0, r3
 8005e4a:	e734      	b.n	8005cb6 <_printf_float+0xba>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4652      	mov	r2, sl
 8005e50:	4631      	mov	r1, r6
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f af2b 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e5c:	f109 0901 	add.w	r9, r9, #1
 8005e60:	e7e8      	b.n	8005e34 <_printf_float+0x238>
 8005e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dc39      	bgt.n	8005edc <_printf_float+0x2e0>
 8005e68:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed8 <_printf_float+0x2dc>)
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4628      	mov	r0, r5
 8005e70:	47b8      	blx	r7
 8005e72:	3001      	adds	r0, #1
 8005e74:	f43f af1d 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005e7c:	ea59 0303 	orrs.w	r3, r9, r3
 8005e80:	d102      	bne.n	8005e88 <_printf_float+0x28c>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	07d9      	lsls	r1, r3, #31
 8005e86:	d5d7      	bpl.n	8005e38 <_printf_float+0x23c>
 8005e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4628      	mov	r0, r5
 8005e90:	47b8      	blx	r7
 8005e92:	3001      	adds	r0, #1
 8005e94:	f43f af0d 	beq.w	8005cb2 <_printf_float+0xb6>
 8005e98:	f04f 0a00 	mov.w	sl, #0
 8005e9c:	f104 0b1a 	add.w	fp, r4, #26
 8005ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea2:	425b      	negs	r3, r3
 8005ea4:	4553      	cmp	r3, sl
 8005ea6:	dc01      	bgt.n	8005eac <_printf_float+0x2b0>
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	e793      	b.n	8005dd4 <_printf_float+0x1d8>
 8005eac:	2301      	movs	r3, #1
 8005eae:	465a      	mov	r2, fp
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f aefb 	beq.w	8005cb2 <_printf_float+0xb6>
 8005ebc:	f10a 0a01 	add.w	sl, sl, #1
 8005ec0:	e7ee      	b.n	8005ea0 <_printf_float+0x2a4>
 8005ec2:	bf00      	nop
 8005ec4:	7fefffff 	.word	0x7fefffff
 8005ec8:	0800a254 	.word	0x0800a254
 8005ecc:	0800a258 	.word	0x0800a258
 8005ed0:	0800a25c 	.word	0x0800a25c
 8005ed4:	0800a260 	.word	0x0800a260
 8005ed8:	0800a264 	.word	0x0800a264
 8005edc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ede:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ee2:	4553      	cmp	r3, sl
 8005ee4:	bfa8      	it	ge
 8005ee6:	4653      	movge	r3, sl
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	4699      	mov	r9, r3
 8005eec:	dc36      	bgt.n	8005f5c <_printf_float+0x360>
 8005eee:	f04f 0b00 	mov.w	fp, #0
 8005ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef6:	f104 021a 	add.w	r2, r4, #26
 8005efa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005efc:	9306      	str	r3, [sp, #24]
 8005efe:	eba3 0309 	sub.w	r3, r3, r9
 8005f02:	455b      	cmp	r3, fp
 8005f04:	dc31      	bgt.n	8005f6a <_printf_float+0x36e>
 8005f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f08:	459a      	cmp	sl, r3
 8005f0a:	dc3a      	bgt.n	8005f82 <_printf_float+0x386>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07da      	lsls	r2, r3, #31
 8005f10:	d437      	bmi.n	8005f82 <_printf_float+0x386>
 8005f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f14:	ebaa 0903 	sub.w	r9, sl, r3
 8005f18:	9b06      	ldr	r3, [sp, #24]
 8005f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f1e:	4599      	cmp	r9, r3
 8005f20:	bfa8      	it	ge
 8005f22:	4699      	movge	r9, r3
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	dc33      	bgt.n	8005f92 <_printf_float+0x396>
 8005f2a:	f04f 0800 	mov.w	r8, #0
 8005f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f32:	f104 0b1a 	add.w	fp, r4, #26
 8005f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f38:	ebaa 0303 	sub.w	r3, sl, r3
 8005f3c:	eba3 0309 	sub.w	r3, r3, r9
 8005f40:	4543      	cmp	r3, r8
 8005f42:	f77f af79 	ble.w	8005e38 <_printf_float+0x23c>
 8005f46:	2301      	movs	r3, #1
 8005f48:	465a      	mov	r2, fp
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f aeae 	beq.w	8005cb2 <_printf_float+0xb6>
 8005f56:	f108 0801 	add.w	r8, r8, #1
 8005f5a:	e7ec      	b.n	8005f36 <_printf_float+0x33a>
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	d1c2      	bne.n	8005eee <_printf_float+0x2f2>
 8005f68:	e6a3      	b.n	8005cb2 <_printf_float+0xb6>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	9206      	str	r2, [sp, #24]
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f ae9c 	beq.w	8005cb2 <_printf_float+0xb6>
 8005f7a:	9a06      	ldr	r2, [sp, #24]
 8005f7c:	f10b 0b01 	add.w	fp, fp, #1
 8005f80:	e7bb      	b.n	8005efa <_printf_float+0x2fe>
 8005f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d1c0      	bne.n	8005f12 <_printf_float+0x316>
 8005f90:	e68f      	b.n	8005cb2 <_printf_float+0xb6>
 8005f92:	9a06      	ldr	r2, [sp, #24]
 8005f94:	464b      	mov	r3, r9
 8005f96:	4442      	add	r2, r8
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	47b8      	blx	r7
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d1c3      	bne.n	8005f2a <_printf_float+0x32e>
 8005fa2:	e686      	b.n	8005cb2 <_printf_float+0xb6>
 8005fa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fa8:	f1ba 0f01 	cmp.w	sl, #1
 8005fac:	dc01      	bgt.n	8005fb2 <_printf_float+0x3b6>
 8005fae:	07db      	lsls	r3, r3, #31
 8005fb0:	d536      	bpl.n	8006020 <_printf_float+0x424>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f ae78 	beq.w	8005cb2 <_printf_float+0xb6>
 8005fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f ae70 	beq.w	8005cb2 <_printf_float+0xb6>
 8005fd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fde:	f7fa fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe2:	b9c0      	cbnz	r0, 8006016 <_printf_float+0x41a>
 8005fe4:	4653      	mov	r3, sl
 8005fe6:	f108 0201 	add.w	r2, r8, #1
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d10c      	bne.n	800600e <_printf_float+0x412>
 8005ff4:	e65d      	b.n	8005cb2 <_printf_float+0xb6>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	465a      	mov	r2, fp
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f ae56 	beq.w	8005cb2 <_printf_float+0xb6>
 8006006:	f108 0801 	add.w	r8, r8, #1
 800600a:	45d0      	cmp	r8, sl
 800600c:	dbf3      	blt.n	8005ff6 <_printf_float+0x3fa>
 800600e:	464b      	mov	r3, r9
 8006010:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006014:	e6df      	b.n	8005dd6 <_printf_float+0x1da>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	f104 0b1a 	add.w	fp, r4, #26
 800601e:	e7f4      	b.n	800600a <_printf_float+0x40e>
 8006020:	2301      	movs	r3, #1
 8006022:	4642      	mov	r2, r8
 8006024:	e7e1      	b.n	8005fea <_printf_float+0x3ee>
 8006026:	2301      	movs	r3, #1
 8006028:	464a      	mov	r2, r9
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae3e 	beq.w	8005cb2 <_printf_float+0xb6>
 8006036:	f108 0801 	add.w	r8, r8, #1
 800603a:	68e3      	ldr	r3, [r4, #12]
 800603c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800603e:	1a5b      	subs	r3, r3, r1
 8006040:	4543      	cmp	r3, r8
 8006042:	dcf0      	bgt.n	8006026 <_printf_float+0x42a>
 8006044:	e6fc      	b.n	8005e40 <_printf_float+0x244>
 8006046:	f04f 0800 	mov.w	r8, #0
 800604a:	f104 0919 	add.w	r9, r4, #25
 800604e:	e7f4      	b.n	800603a <_printf_float+0x43e>

08006050 <_printf_common>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	4616      	mov	r6, r2
 8006056:	4698      	mov	r8, r3
 8006058:	688a      	ldr	r2, [r1, #8]
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006060:	4293      	cmp	r3, r2
 8006062:	bfb8      	it	lt
 8006064:	4613      	movlt	r3, r2
 8006066:	6033      	str	r3, [r6, #0]
 8006068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800606c:	4607      	mov	r7, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b10a      	cbz	r2, 8006076 <_printf_common+0x26>
 8006072:	3301      	adds	r3, #1
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	0699      	lsls	r1, r3, #26
 800607a:	bf42      	ittt	mi
 800607c:	6833      	ldrmi	r3, [r6, #0]
 800607e:	3302      	addmi	r3, #2
 8006080:	6033      	strmi	r3, [r6, #0]
 8006082:	6825      	ldr	r5, [r4, #0]
 8006084:	f015 0506 	ands.w	r5, r5, #6
 8006088:	d106      	bne.n	8006098 <_printf_common+0x48>
 800608a:	f104 0a19 	add.w	sl, r4, #25
 800608e:	68e3      	ldr	r3, [r4, #12]
 8006090:	6832      	ldr	r2, [r6, #0]
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	42ab      	cmp	r3, r5
 8006096:	dc26      	bgt.n	80060e6 <_printf_common+0x96>
 8006098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	3b00      	subs	r3, #0
 80060a0:	bf18      	it	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	0692      	lsls	r2, r2, #26
 80060a6:	d42b      	bmi.n	8006100 <_printf_common+0xb0>
 80060a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060ac:	4641      	mov	r1, r8
 80060ae:	4638      	mov	r0, r7
 80060b0:	47c8      	blx	r9
 80060b2:	3001      	adds	r0, #1
 80060b4:	d01e      	beq.n	80060f4 <_printf_common+0xa4>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	6922      	ldr	r2, [r4, #16]
 80060ba:	f003 0306 	and.w	r3, r3, #6
 80060be:	2b04      	cmp	r3, #4
 80060c0:	bf02      	ittt	eq
 80060c2:	68e5      	ldreq	r5, [r4, #12]
 80060c4:	6833      	ldreq	r3, [r6, #0]
 80060c6:	1aed      	subeq	r5, r5, r3
 80060c8:	68a3      	ldr	r3, [r4, #8]
 80060ca:	bf0c      	ite	eq
 80060cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d0:	2500      	movne	r5, #0
 80060d2:	4293      	cmp	r3, r2
 80060d4:	bfc4      	itt	gt
 80060d6:	1a9b      	subgt	r3, r3, r2
 80060d8:	18ed      	addgt	r5, r5, r3
 80060da:	2600      	movs	r6, #0
 80060dc:	341a      	adds	r4, #26
 80060de:	42b5      	cmp	r5, r6
 80060e0:	d11a      	bne.n	8006118 <_printf_common+0xc8>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e008      	b.n	80060f8 <_printf_common+0xa8>
 80060e6:	2301      	movs	r3, #1
 80060e8:	4652      	mov	r2, sl
 80060ea:	4641      	mov	r1, r8
 80060ec:	4638      	mov	r0, r7
 80060ee:	47c8      	blx	r9
 80060f0:	3001      	adds	r0, #1
 80060f2:	d103      	bne.n	80060fc <_printf_common+0xac>
 80060f4:	f04f 30ff 	mov.w	r0, #4294967295
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	3501      	adds	r5, #1
 80060fe:	e7c6      	b.n	800608e <_printf_common+0x3e>
 8006100:	18e1      	adds	r1, r4, r3
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	2030      	movs	r0, #48	@ 0x30
 8006106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800610a:	4422      	add	r2, r4
 800610c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006114:	3302      	adds	r3, #2
 8006116:	e7c7      	b.n	80060a8 <_printf_common+0x58>
 8006118:	2301      	movs	r3, #1
 800611a:	4622      	mov	r2, r4
 800611c:	4641      	mov	r1, r8
 800611e:	4638      	mov	r0, r7
 8006120:	47c8      	blx	r9
 8006122:	3001      	adds	r0, #1
 8006124:	d0e6      	beq.n	80060f4 <_printf_common+0xa4>
 8006126:	3601      	adds	r6, #1
 8006128:	e7d9      	b.n	80060de <_printf_common+0x8e>
	...

0800612c <_printf_i>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	7e0f      	ldrb	r7, [r1, #24]
 8006132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006134:	2f78      	cmp	r7, #120	@ 0x78
 8006136:	4691      	mov	r9, r2
 8006138:	4680      	mov	r8, r0
 800613a:	460c      	mov	r4, r1
 800613c:	469a      	mov	sl, r3
 800613e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006142:	d807      	bhi.n	8006154 <_printf_i+0x28>
 8006144:	2f62      	cmp	r7, #98	@ 0x62
 8006146:	d80a      	bhi.n	800615e <_printf_i+0x32>
 8006148:	2f00      	cmp	r7, #0
 800614a:	f000 80d2 	beq.w	80062f2 <_printf_i+0x1c6>
 800614e:	2f58      	cmp	r7, #88	@ 0x58
 8006150:	f000 80b9 	beq.w	80062c6 <_printf_i+0x19a>
 8006154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800615c:	e03a      	b.n	80061d4 <_printf_i+0xa8>
 800615e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006162:	2b15      	cmp	r3, #21
 8006164:	d8f6      	bhi.n	8006154 <_printf_i+0x28>
 8006166:	a101      	add	r1, pc, #4	@ (adr r1, 800616c <_printf_i+0x40>)
 8006168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061d9 	.word	0x080061d9
 8006174:	08006155 	.word	0x08006155
 8006178:	08006155 	.word	0x08006155
 800617c:	08006155 	.word	0x08006155
 8006180:	08006155 	.word	0x08006155
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006155 	.word	0x08006155
 800618c:	08006155 	.word	0x08006155
 8006190:	08006155 	.word	0x08006155
 8006194:	08006155 	.word	0x08006155
 8006198:	080062d9 	.word	0x080062d9
 800619c:	08006203 	.word	0x08006203
 80061a0:	08006293 	.word	0x08006293
 80061a4:	08006155 	.word	0x08006155
 80061a8:	08006155 	.word	0x08006155
 80061ac:	080062fb 	.word	0x080062fb
 80061b0:	08006155 	.word	0x08006155
 80061b4:	08006203 	.word	0x08006203
 80061b8:	08006155 	.word	0x08006155
 80061bc:	08006155 	.word	0x08006155
 80061c0:	0800629b 	.word	0x0800629b
 80061c4:	6833      	ldr	r3, [r6, #0]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6032      	str	r2, [r6, #0]
 80061cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e09d      	b.n	8006314 <_printf_i+0x1e8>
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	6031      	str	r1, [r6, #0]
 80061e0:	0606      	lsls	r6, r0, #24
 80061e2:	d501      	bpl.n	80061e8 <_printf_i+0xbc>
 80061e4:	681d      	ldr	r5, [r3, #0]
 80061e6:	e003      	b.n	80061f0 <_printf_i+0xc4>
 80061e8:	0645      	lsls	r5, r0, #25
 80061ea:	d5fb      	bpl.n	80061e4 <_printf_i+0xb8>
 80061ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061f0:	2d00      	cmp	r5, #0
 80061f2:	da03      	bge.n	80061fc <_printf_i+0xd0>
 80061f4:	232d      	movs	r3, #45	@ 0x2d
 80061f6:	426d      	negs	r5, r5
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061fc:	4859      	ldr	r0, [pc, #356]	@ (8006364 <_printf_i+0x238>)
 80061fe:	230a      	movs	r3, #10
 8006200:	e011      	b.n	8006226 <_printf_i+0xfa>
 8006202:	6821      	ldr	r1, [r4, #0]
 8006204:	6833      	ldr	r3, [r6, #0]
 8006206:	0608      	lsls	r0, r1, #24
 8006208:	f853 5b04 	ldr.w	r5, [r3], #4
 800620c:	d402      	bmi.n	8006214 <_printf_i+0xe8>
 800620e:	0649      	lsls	r1, r1, #25
 8006210:	bf48      	it	mi
 8006212:	b2ad      	uxthmi	r5, r5
 8006214:	2f6f      	cmp	r7, #111	@ 0x6f
 8006216:	4853      	ldr	r0, [pc, #332]	@ (8006364 <_printf_i+0x238>)
 8006218:	6033      	str	r3, [r6, #0]
 800621a:	bf14      	ite	ne
 800621c:	230a      	movne	r3, #10
 800621e:	2308      	moveq	r3, #8
 8006220:	2100      	movs	r1, #0
 8006222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006226:	6866      	ldr	r6, [r4, #4]
 8006228:	60a6      	str	r6, [r4, #8]
 800622a:	2e00      	cmp	r6, #0
 800622c:	bfa2      	ittt	ge
 800622e:	6821      	ldrge	r1, [r4, #0]
 8006230:	f021 0104 	bicge.w	r1, r1, #4
 8006234:	6021      	strge	r1, [r4, #0]
 8006236:	b90d      	cbnz	r5, 800623c <_printf_i+0x110>
 8006238:	2e00      	cmp	r6, #0
 800623a:	d04b      	beq.n	80062d4 <_printf_i+0x1a8>
 800623c:	4616      	mov	r6, r2
 800623e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006242:	fb03 5711 	mls	r7, r3, r1, r5
 8006246:	5dc7      	ldrb	r7, [r0, r7]
 8006248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800624c:	462f      	mov	r7, r5
 800624e:	42bb      	cmp	r3, r7
 8006250:	460d      	mov	r5, r1
 8006252:	d9f4      	bls.n	800623e <_printf_i+0x112>
 8006254:	2b08      	cmp	r3, #8
 8006256:	d10b      	bne.n	8006270 <_printf_i+0x144>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	07df      	lsls	r7, r3, #31
 800625c:	d508      	bpl.n	8006270 <_printf_i+0x144>
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	4299      	cmp	r1, r3
 8006264:	bfde      	ittt	le
 8006266:	2330      	movle	r3, #48	@ 0x30
 8006268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800626c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006270:	1b92      	subs	r2, r2, r6
 8006272:	6122      	str	r2, [r4, #16]
 8006274:	f8cd a000 	str.w	sl, [sp]
 8006278:	464b      	mov	r3, r9
 800627a:	aa03      	add	r2, sp, #12
 800627c:	4621      	mov	r1, r4
 800627e:	4640      	mov	r0, r8
 8006280:	f7ff fee6 	bl	8006050 <_printf_common>
 8006284:	3001      	adds	r0, #1
 8006286:	d14a      	bne.n	800631e <_printf_i+0x1f2>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	b004      	add	sp, #16
 800628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	f043 0320 	orr.w	r3, r3, #32
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	4833      	ldr	r0, [pc, #204]	@ (8006368 <_printf_i+0x23c>)
 800629c:	2778      	movs	r7, #120	@ 0x78
 800629e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	6831      	ldr	r1, [r6, #0]
 80062a6:	061f      	lsls	r7, r3, #24
 80062a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80062ac:	d402      	bmi.n	80062b4 <_printf_i+0x188>
 80062ae:	065f      	lsls	r7, r3, #25
 80062b0:	bf48      	it	mi
 80062b2:	b2ad      	uxthmi	r5, r5
 80062b4:	6031      	str	r1, [r6, #0]
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	bf44      	itt	mi
 80062ba:	f043 0320 	orrmi.w	r3, r3, #32
 80062be:	6023      	strmi	r3, [r4, #0]
 80062c0:	b11d      	cbz	r5, 80062ca <_printf_i+0x19e>
 80062c2:	2310      	movs	r3, #16
 80062c4:	e7ac      	b.n	8006220 <_printf_i+0xf4>
 80062c6:	4827      	ldr	r0, [pc, #156]	@ (8006364 <_printf_i+0x238>)
 80062c8:	e7e9      	b.n	800629e <_printf_i+0x172>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f023 0320 	bic.w	r3, r3, #32
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	e7f6      	b.n	80062c2 <_printf_i+0x196>
 80062d4:	4616      	mov	r6, r2
 80062d6:	e7bd      	b.n	8006254 <_printf_i+0x128>
 80062d8:	6833      	ldr	r3, [r6, #0]
 80062da:	6825      	ldr	r5, [r4, #0]
 80062dc:	6961      	ldr	r1, [r4, #20]
 80062de:	1d18      	adds	r0, r3, #4
 80062e0:	6030      	str	r0, [r6, #0]
 80062e2:	062e      	lsls	r6, r5, #24
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	d501      	bpl.n	80062ec <_printf_i+0x1c0>
 80062e8:	6019      	str	r1, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <_printf_i+0x1c6>
 80062ec:	0668      	lsls	r0, r5, #25
 80062ee:	d5fb      	bpl.n	80062e8 <_printf_i+0x1bc>
 80062f0:	8019      	strh	r1, [r3, #0]
 80062f2:	2300      	movs	r3, #0
 80062f4:	6123      	str	r3, [r4, #16]
 80062f6:	4616      	mov	r6, r2
 80062f8:	e7bc      	b.n	8006274 <_printf_i+0x148>
 80062fa:	6833      	ldr	r3, [r6, #0]
 80062fc:	1d1a      	adds	r2, r3, #4
 80062fe:	6032      	str	r2, [r6, #0]
 8006300:	681e      	ldr	r6, [r3, #0]
 8006302:	6862      	ldr	r2, [r4, #4]
 8006304:	2100      	movs	r1, #0
 8006306:	4630      	mov	r0, r6
 8006308:	f7f9 ff62 	bl	80001d0 <memchr>
 800630c:	b108      	cbz	r0, 8006312 <_printf_i+0x1e6>
 800630e:	1b80      	subs	r0, r0, r6
 8006310:	6060      	str	r0, [r4, #4]
 8006312:	6863      	ldr	r3, [r4, #4]
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	2300      	movs	r3, #0
 8006318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800631c:	e7aa      	b.n	8006274 <_printf_i+0x148>
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	4632      	mov	r2, r6
 8006322:	4649      	mov	r1, r9
 8006324:	4640      	mov	r0, r8
 8006326:	47d0      	blx	sl
 8006328:	3001      	adds	r0, #1
 800632a:	d0ad      	beq.n	8006288 <_printf_i+0x15c>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	079b      	lsls	r3, r3, #30
 8006330:	d413      	bmi.n	800635a <_printf_i+0x22e>
 8006332:	68e0      	ldr	r0, [r4, #12]
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	4298      	cmp	r0, r3
 8006338:	bfb8      	it	lt
 800633a:	4618      	movlt	r0, r3
 800633c:	e7a6      	b.n	800628c <_printf_i+0x160>
 800633e:	2301      	movs	r3, #1
 8006340:	4632      	mov	r2, r6
 8006342:	4649      	mov	r1, r9
 8006344:	4640      	mov	r0, r8
 8006346:	47d0      	blx	sl
 8006348:	3001      	adds	r0, #1
 800634a:	d09d      	beq.n	8006288 <_printf_i+0x15c>
 800634c:	3501      	adds	r5, #1
 800634e:	68e3      	ldr	r3, [r4, #12]
 8006350:	9903      	ldr	r1, [sp, #12]
 8006352:	1a5b      	subs	r3, r3, r1
 8006354:	42ab      	cmp	r3, r5
 8006356:	dcf2      	bgt.n	800633e <_printf_i+0x212>
 8006358:	e7eb      	b.n	8006332 <_printf_i+0x206>
 800635a:	2500      	movs	r5, #0
 800635c:	f104 0619 	add.w	r6, r4, #25
 8006360:	e7f5      	b.n	800634e <_printf_i+0x222>
 8006362:	bf00      	nop
 8006364:	0800a266 	.word	0x0800a266
 8006368:	0800a277 	.word	0x0800a277

0800636c <_scanf_float>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	b087      	sub	sp, #28
 8006372:	4617      	mov	r7, r2
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	688b      	ldr	r3, [r1, #8]
 8006378:	1e5a      	subs	r2, r3, #1
 800637a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800637e:	bf81      	itttt	hi
 8006380:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006384:	eb03 0b05 	addhi.w	fp, r3, r5
 8006388:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800638c:	608b      	strhi	r3, [r1, #8]
 800638e:	680b      	ldr	r3, [r1, #0]
 8006390:	460a      	mov	r2, r1
 8006392:	f04f 0500 	mov.w	r5, #0
 8006396:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800639a:	f842 3b1c 	str.w	r3, [r2], #28
 800639e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80063a2:	4680      	mov	r8, r0
 80063a4:	460c      	mov	r4, r1
 80063a6:	bf98      	it	ls
 80063a8:	f04f 0b00 	movls.w	fp, #0
 80063ac:	9201      	str	r2, [sp, #4]
 80063ae:	4616      	mov	r6, r2
 80063b0:	46aa      	mov	sl, r5
 80063b2:	46a9      	mov	r9, r5
 80063b4:	9502      	str	r5, [sp, #8]
 80063b6:	68a2      	ldr	r2, [r4, #8]
 80063b8:	b152      	cbz	r2, 80063d0 <_scanf_float+0x64>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b4e      	cmp	r3, #78	@ 0x4e
 80063c0:	d864      	bhi.n	800648c <_scanf_float+0x120>
 80063c2:	2b40      	cmp	r3, #64	@ 0x40
 80063c4:	d83c      	bhi.n	8006440 <_scanf_float+0xd4>
 80063c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80063ca:	b2c8      	uxtb	r0, r1
 80063cc:	280e      	cmp	r0, #14
 80063ce:	d93a      	bls.n	8006446 <_scanf_float+0xda>
 80063d0:	f1b9 0f00 	cmp.w	r9, #0
 80063d4:	d003      	beq.n	80063de <_scanf_float+0x72>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063e2:	f1ba 0f01 	cmp.w	sl, #1
 80063e6:	f200 8117 	bhi.w	8006618 <_scanf_float+0x2ac>
 80063ea:	9b01      	ldr	r3, [sp, #4]
 80063ec:	429e      	cmp	r6, r3
 80063ee:	f200 8108 	bhi.w	8006602 <_scanf_float+0x296>
 80063f2:	2001      	movs	r0, #1
 80063f4:	b007      	add	sp, #28
 80063f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80063fe:	2a0d      	cmp	r2, #13
 8006400:	d8e6      	bhi.n	80063d0 <_scanf_float+0x64>
 8006402:	a101      	add	r1, pc, #4	@ (adr r1, 8006408 <_scanf_float+0x9c>)
 8006404:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006408:	0800654f 	.word	0x0800654f
 800640c:	080063d1 	.word	0x080063d1
 8006410:	080063d1 	.word	0x080063d1
 8006414:	080063d1 	.word	0x080063d1
 8006418:	080065af 	.word	0x080065af
 800641c:	08006587 	.word	0x08006587
 8006420:	080063d1 	.word	0x080063d1
 8006424:	080063d1 	.word	0x080063d1
 8006428:	0800655d 	.word	0x0800655d
 800642c:	080063d1 	.word	0x080063d1
 8006430:	080063d1 	.word	0x080063d1
 8006434:	080063d1 	.word	0x080063d1
 8006438:	080063d1 	.word	0x080063d1
 800643c:	08006515 	.word	0x08006515
 8006440:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006444:	e7db      	b.n	80063fe <_scanf_float+0x92>
 8006446:	290e      	cmp	r1, #14
 8006448:	d8c2      	bhi.n	80063d0 <_scanf_float+0x64>
 800644a:	a001      	add	r0, pc, #4	@ (adr r0, 8006450 <_scanf_float+0xe4>)
 800644c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006450:	08006505 	.word	0x08006505
 8006454:	080063d1 	.word	0x080063d1
 8006458:	08006505 	.word	0x08006505
 800645c:	0800659b 	.word	0x0800659b
 8006460:	080063d1 	.word	0x080063d1
 8006464:	080064ad 	.word	0x080064ad
 8006468:	080064eb 	.word	0x080064eb
 800646c:	080064eb 	.word	0x080064eb
 8006470:	080064eb 	.word	0x080064eb
 8006474:	080064eb 	.word	0x080064eb
 8006478:	080064eb 	.word	0x080064eb
 800647c:	080064eb 	.word	0x080064eb
 8006480:	080064eb 	.word	0x080064eb
 8006484:	080064eb 	.word	0x080064eb
 8006488:	080064eb 	.word	0x080064eb
 800648c:	2b6e      	cmp	r3, #110	@ 0x6e
 800648e:	d809      	bhi.n	80064a4 <_scanf_float+0x138>
 8006490:	2b60      	cmp	r3, #96	@ 0x60
 8006492:	d8b2      	bhi.n	80063fa <_scanf_float+0x8e>
 8006494:	2b54      	cmp	r3, #84	@ 0x54
 8006496:	d07b      	beq.n	8006590 <_scanf_float+0x224>
 8006498:	2b59      	cmp	r3, #89	@ 0x59
 800649a:	d199      	bne.n	80063d0 <_scanf_float+0x64>
 800649c:	2d07      	cmp	r5, #7
 800649e:	d197      	bne.n	80063d0 <_scanf_float+0x64>
 80064a0:	2508      	movs	r5, #8
 80064a2:	e02c      	b.n	80064fe <_scanf_float+0x192>
 80064a4:	2b74      	cmp	r3, #116	@ 0x74
 80064a6:	d073      	beq.n	8006590 <_scanf_float+0x224>
 80064a8:	2b79      	cmp	r3, #121	@ 0x79
 80064aa:	e7f6      	b.n	800649a <_scanf_float+0x12e>
 80064ac:	6821      	ldr	r1, [r4, #0]
 80064ae:	05c8      	lsls	r0, r1, #23
 80064b0:	d51b      	bpl.n	80064ea <_scanf_float+0x17e>
 80064b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80064b6:	6021      	str	r1, [r4, #0]
 80064b8:	f109 0901 	add.w	r9, r9, #1
 80064bc:	f1bb 0f00 	cmp.w	fp, #0
 80064c0:	d003      	beq.n	80064ca <_scanf_float+0x15e>
 80064c2:	3201      	adds	r2, #1
 80064c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064c8:	60a2      	str	r2, [r4, #8]
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	60a3      	str	r3, [r4, #8]
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	3301      	adds	r3, #1
 80064d4:	6123      	str	r3, [r4, #16]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3b01      	subs	r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
 80064de:	f340 8087 	ble.w	80065f0 <_scanf_float+0x284>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	e765      	b.n	80063b6 <_scanf_float+0x4a>
 80064ea:	eb1a 0105 	adds.w	r1, sl, r5
 80064ee:	f47f af6f 	bne.w	80063d0 <_scanf_float+0x64>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80064f8:	6022      	str	r2, [r4, #0]
 80064fa:	460d      	mov	r5, r1
 80064fc:	468a      	mov	sl, r1
 80064fe:	f806 3b01 	strb.w	r3, [r6], #1
 8006502:	e7e2      	b.n	80064ca <_scanf_float+0x15e>
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	0610      	lsls	r0, r2, #24
 8006508:	f57f af62 	bpl.w	80063d0 <_scanf_float+0x64>
 800650c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006510:	6022      	str	r2, [r4, #0]
 8006512:	e7f4      	b.n	80064fe <_scanf_float+0x192>
 8006514:	f1ba 0f00 	cmp.w	sl, #0
 8006518:	d10e      	bne.n	8006538 <_scanf_float+0x1cc>
 800651a:	f1b9 0f00 	cmp.w	r9, #0
 800651e:	d10e      	bne.n	800653e <_scanf_float+0x1d2>
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006526:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800652a:	d108      	bne.n	800653e <_scanf_float+0x1d2>
 800652c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006530:	6022      	str	r2, [r4, #0]
 8006532:	f04f 0a01 	mov.w	sl, #1
 8006536:	e7e2      	b.n	80064fe <_scanf_float+0x192>
 8006538:	f1ba 0f02 	cmp.w	sl, #2
 800653c:	d055      	beq.n	80065ea <_scanf_float+0x27e>
 800653e:	2d01      	cmp	r5, #1
 8006540:	d002      	beq.n	8006548 <_scanf_float+0x1dc>
 8006542:	2d04      	cmp	r5, #4
 8006544:	f47f af44 	bne.w	80063d0 <_scanf_float+0x64>
 8006548:	3501      	adds	r5, #1
 800654a:	b2ed      	uxtb	r5, r5
 800654c:	e7d7      	b.n	80064fe <_scanf_float+0x192>
 800654e:	f1ba 0f01 	cmp.w	sl, #1
 8006552:	f47f af3d 	bne.w	80063d0 <_scanf_float+0x64>
 8006556:	f04f 0a02 	mov.w	sl, #2
 800655a:	e7d0      	b.n	80064fe <_scanf_float+0x192>
 800655c:	b97d      	cbnz	r5, 800657e <_scanf_float+0x212>
 800655e:	f1b9 0f00 	cmp.w	r9, #0
 8006562:	f47f af38 	bne.w	80063d6 <_scanf_float+0x6a>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800656c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006570:	f040 8108 	bne.w	8006784 <_scanf_float+0x418>
 8006574:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006578:	6022      	str	r2, [r4, #0]
 800657a:	2501      	movs	r5, #1
 800657c:	e7bf      	b.n	80064fe <_scanf_float+0x192>
 800657e:	2d03      	cmp	r5, #3
 8006580:	d0e2      	beq.n	8006548 <_scanf_float+0x1dc>
 8006582:	2d05      	cmp	r5, #5
 8006584:	e7de      	b.n	8006544 <_scanf_float+0x1d8>
 8006586:	2d02      	cmp	r5, #2
 8006588:	f47f af22 	bne.w	80063d0 <_scanf_float+0x64>
 800658c:	2503      	movs	r5, #3
 800658e:	e7b6      	b.n	80064fe <_scanf_float+0x192>
 8006590:	2d06      	cmp	r5, #6
 8006592:	f47f af1d 	bne.w	80063d0 <_scanf_float+0x64>
 8006596:	2507      	movs	r5, #7
 8006598:	e7b1      	b.n	80064fe <_scanf_float+0x192>
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	0591      	lsls	r1, r2, #22
 800659e:	f57f af17 	bpl.w	80063d0 <_scanf_float+0x64>
 80065a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80065a6:	6022      	str	r2, [r4, #0]
 80065a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80065ac:	e7a7      	b.n	80064fe <_scanf_float+0x192>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80065b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80065b8:	d006      	beq.n	80065c8 <_scanf_float+0x25c>
 80065ba:	0550      	lsls	r0, r2, #21
 80065bc:	f57f af08 	bpl.w	80063d0 <_scanf_float+0x64>
 80065c0:	f1b9 0f00 	cmp.w	r9, #0
 80065c4:	f000 80de 	beq.w	8006784 <_scanf_float+0x418>
 80065c8:	0591      	lsls	r1, r2, #22
 80065ca:	bf58      	it	pl
 80065cc:	9902      	ldrpl	r1, [sp, #8]
 80065ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065d2:	bf58      	it	pl
 80065d4:	eba9 0101 	subpl.w	r1, r9, r1
 80065d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80065dc:	bf58      	it	pl
 80065de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065e2:	6022      	str	r2, [r4, #0]
 80065e4:	f04f 0900 	mov.w	r9, #0
 80065e8:	e789      	b.n	80064fe <_scanf_float+0x192>
 80065ea:	f04f 0a03 	mov.w	sl, #3
 80065ee:	e786      	b.n	80064fe <_scanf_float+0x192>
 80065f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80065f4:	4639      	mov	r1, r7
 80065f6:	4640      	mov	r0, r8
 80065f8:	4798      	blx	r3
 80065fa:	2800      	cmp	r0, #0
 80065fc:	f43f aedb 	beq.w	80063b6 <_scanf_float+0x4a>
 8006600:	e6e6      	b.n	80063d0 <_scanf_float+0x64>
 8006602:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800660a:	463a      	mov	r2, r7
 800660c:	4640      	mov	r0, r8
 800660e:	4798      	blx	r3
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	3b01      	subs	r3, #1
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	e6e8      	b.n	80063ea <_scanf_float+0x7e>
 8006618:	1e6b      	subs	r3, r5, #1
 800661a:	2b06      	cmp	r3, #6
 800661c:	d824      	bhi.n	8006668 <_scanf_float+0x2fc>
 800661e:	2d02      	cmp	r5, #2
 8006620:	d836      	bhi.n	8006690 <_scanf_float+0x324>
 8006622:	9b01      	ldr	r3, [sp, #4]
 8006624:	429e      	cmp	r6, r3
 8006626:	f67f aee4 	bls.w	80063f2 <_scanf_float+0x86>
 800662a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800662e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006632:	463a      	mov	r2, r7
 8006634:	4640      	mov	r0, r8
 8006636:	4798      	blx	r3
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	3b01      	subs	r3, #1
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	e7f0      	b.n	8006622 <_scanf_float+0x2b6>
 8006640:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006644:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006648:	463a      	mov	r2, r7
 800664a:	4640      	mov	r0, r8
 800664c:	4798      	blx	r3
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	3b01      	subs	r3, #1
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006658:	fa5f fa8a 	uxtb.w	sl, sl
 800665c:	f1ba 0f02 	cmp.w	sl, #2
 8006660:	d1ee      	bne.n	8006640 <_scanf_float+0x2d4>
 8006662:	3d03      	subs	r5, #3
 8006664:	b2ed      	uxtb	r5, r5
 8006666:	1b76      	subs	r6, r6, r5
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	05da      	lsls	r2, r3, #23
 800666c:	d530      	bpl.n	80066d0 <_scanf_float+0x364>
 800666e:	055b      	lsls	r3, r3, #21
 8006670:	d511      	bpl.n	8006696 <_scanf_float+0x32a>
 8006672:	9b01      	ldr	r3, [sp, #4]
 8006674:	429e      	cmp	r6, r3
 8006676:	f67f aebc 	bls.w	80063f2 <_scanf_float+0x86>
 800667a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800667e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006682:	463a      	mov	r2, r7
 8006684:	4640      	mov	r0, r8
 8006686:	4798      	blx	r3
 8006688:	6923      	ldr	r3, [r4, #16]
 800668a:	3b01      	subs	r3, #1
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	e7f0      	b.n	8006672 <_scanf_float+0x306>
 8006690:	46aa      	mov	sl, r5
 8006692:	46b3      	mov	fp, r6
 8006694:	e7de      	b.n	8006654 <_scanf_float+0x2e8>
 8006696:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	2965      	cmp	r1, #101	@ 0x65
 800669e:	f103 33ff 	add.w	r3, r3, #4294967295
 80066a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80066a6:	6123      	str	r3, [r4, #16]
 80066a8:	d00c      	beq.n	80066c4 <_scanf_float+0x358>
 80066aa:	2945      	cmp	r1, #69	@ 0x45
 80066ac:	d00a      	beq.n	80066c4 <_scanf_float+0x358>
 80066ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066b2:	463a      	mov	r2, r7
 80066b4:	4640      	mov	r0, r8
 80066b6:	4798      	blx	r3
 80066b8:	6923      	ldr	r3, [r4, #16]
 80066ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80066be:	3b01      	subs	r3, #1
 80066c0:	1eb5      	subs	r5, r6, #2
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066c8:	463a      	mov	r2, r7
 80066ca:	4640      	mov	r0, r8
 80066cc:	4798      	blx	r3
 80066ce:	462e      	mov	r6, r5
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	f012 0210 	ands.w	r2, r2, #16
 80066d6:	d001      	beq.n	80066dc <_scanf_float+0x370>
 80066d8:	2000      	movs	r0, #0
 80066da:	e68b      	b.n	80063f4 <_scanf_float+0x88>
 80066dc:	7032      	strb	r2, [r6, #0]
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e8:	d11c      	bne.n	8006724 <_scanf_float+0x3b8>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	454b      	cmp	r3, r9
 80066ee:	eba3 0209 	sub.w	r2, r3, r9
 80066f2:	d123      	bne.n	800673c <_scanf_float+0x3d0>
 80066f4:	9901      	ldr	r1, [sp, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	4640      	mov	r0, r8
 80066fa:	f002 fc39 	bl	8008f70 <_strtod_r>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	6821      	ldr	r1, [r4, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f011 0f02 	tst.w	r1, #2
 8006708:	ec57 6b10 	vmov	r6, r7, d0
 800670c:	f103 0204 	add.w	r2, r3, #4
 8006710:	d01f      	beq.n	8006752 <_scanf_float+0x3e6>
 8006712:	9903      	ldr	r1, [sp, #12]
 8006714:	600a      	str	r2, [r1, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	e9c3 6700 	strd	r6, r7, [r3]
 800671c:	68e3      	ldr	r3, [r4, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	60e3      	str	r3, [r4, #12]
 8006722:	e7d9      	b.n	80066d8 <_scanf_float+0x36c>
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0e4      	beq.n	80066f4 <_scanf_float+0x388>
 800672a:	9905      	ldr	r1, [sp, #20]
 800672c:	230a      	movs	r3, #10
 800672e:	3101      	adds	r1, #1
 8006730:	4640      	mov	r0, r8
 8006732:	f002 fc9d 	bl	8009070 <_strtol_r>
 8006736:	9b04      	ldr	r3, [sp, #16]
 8006738:	9e05      	ldr	r6, [sp, #20]
 800673a:	1ac2      	subs	r2, r0, r3
 800673c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006740:	429e      	cmp	r6, r3
 8006742:	bf28      	it	cs
 8006744:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006748:	4910      	ldr	r1, [pc, #64]	@ (800678c <_scanf_float+0x420>)
 800674a:	4630      	mov	r0, r6
 800674c:	f000 f918 	bl	8006980 <siprintf>
 8006750:	e7d0      	b.n	80066f4 <_scanf_float+0x388>
 8006752:	f011 0f04 	tst.w	r1, #4
 8006756:	9903      	ldr	r1, [sp, #12]
 8006758:	600a      	str	r2, [r1, #0]
 800675a:	d1dc      	bne.n	8006716 <_scanf_float+0x3aa>
 800675c:	681d      	ldr	r5, [r3, #0]
 800675e:	4632      	mov	r2, r6
 8006760:	463b      	mov	r3, r7
 8006762:	4630      	mov	r0, r6
 8006764:	4639      	mov	r1, r7
 8006766:	f7fa f9e1 	bl	8000b2c <__aeabi_dcmpun>
 800676a:	b128      	cbz	r0, 8006778 <_scanf_float+0x40c>
 800676c:	4808      	ldr	r0, [pc, #32]	@ (8006790 <_scanf_float+0x424>)
 800676e:	f000 f9f9 	bl	8006b64 <nanf>
 8006772:	ed85 0a00 	vstr	s0, [r5]
 8006776:	e7d1      	b.n	800671c <_scanf_float+0x3b0>
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7fa fa34 	bl	8000be8 <__aeabi_d2f>
 8006780:	6028      	str	r0, [r5, #0]
 8006782:	e7cb      	b.n	800671c <_scanf_float+0x3b0>
 8006784:	f04f 0900 	mov.w	r9, #0
 8006788:	e629      	b.n	80063de <_scanf_float+0x72>
 800678a:	bf00      	nop
 800678c:	0800a288 	.word	0x0800a288
 8006790:	0800a61d 	.word	0x0800a61d

08006794 <std>:
 8006794:	2300      	movs	r3, #0
 8006796:	b510      	push	{r4, lr}
 8006798:	4604      	mov	r4, r0
 800679a:	e9c0 3300 	strd	r3, r3, [r0]
 800679e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067a2:	6083      	str	r3, [r0, #8]
 80067a4:	8181      	strh	r1, [r0, #12]
 80067a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80067a8:	81c2      	strh	r2, [r0, #14]
 80067aa:	6183      	str	r3, [r0, #24]
 80067ac:	4619      	mov	r1, r3
 80067ae:	2208      	movs	r2, #8
 80067b0:	305c      	adds	r0, #92	@ 0x5c
 80067b2:	f000 f948 	bl	8006a46 <memset>
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <std+0x58>)
 80067b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80067ba:	4b0d      	ldr	r3, [pc, #52]	@ (80067f0 <std+0x5c>)
 80067bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <std+0x60>)
 80067c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067c2:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <std+0x64>)
 80067c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80067c6:	4b0d      	ldr	r3, [pc, #52]	@ (80067fc <std+0x68>)
 80067c8:	6224      	str	r4, [r4, #32]
 80067ca:	429c      	cmp	r4, r3
 80067cc:	d006      	beq.n	80067dc <std+0x48>
 80067ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067d2:	4294      	cmp	r4, r2
 80067d4:	d002      	beq.n	80067dc <std+0x48>
 80067d6:	33d0      	adds	r3, #208	@ 0xd0
 80067d8:	429c      	cmp	r4, r3
 80067da:	d105      	bne.n	80067e8 <std+0x54>
 80067dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e4:	f000 b9ac 	b.w	8006b40 <__retarget_lock_init_recursive>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	080069c1 	.word	0x080069c1
 80067f0:	080069e3 	.word	0x080069e3
 80067f4:	08006a1b 	.word	0x08006a1b
 80067f8:	08006a3f 	.word	0x08006a3f
 80067fc:	20000368 	.word	0x20000368

08006800 <stdio_exit_handler>:
 8006800:	4a02      	ldr	r2, [pc, #8]	@ (800680c <stdio_exit_handler+0xc>)
 8006802:	4903      	ldr	r1, [pc, #12]	@ (8006810 <stdio_exit_handler+0x10>)
 8006804:	4803      	ldr	r0, [pc, #12]	@ (8006814 <stdio_exit_handler+0x14>)
 8006806:	f000 b869 	b.w	80068dc <_fwalk_sglue>
 800680a:	bf00      	nop
 800680c:	20000014 	.word	0x20000014
 8006810:	0800942d 	.word	0x0800942d
 8006814:	20000024 	.word	0x20000024

08006818 <cleanup_stdio>:
 8006818:	6841      	ldr	r1, [r0, #4]
 800681a:	4b0c      	ldr	r3, [pc, #48]	@ (800684c <cleanup_stdio+0x34>)
 800681c:	4299      	cmp	r1, r3
 800681e:	b510      	push	{r4, lr}
 8006820:	4604      	mov	r4, r0
 8006822:	d001      	beq.n	8006828 <cleanup_stdio+0x10>
 8006824:	f002 fe02 	bl	800942c <_fflush_r>
 8006828:	68a1      	ldr	r1, [r4, #8]
 800682a:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <cleanup_stdio+0x38>)
 800682c:	4299      	cmp	r1, r3
 800682e:	d002      	beq.n	8006836 <cleanup_stdio+0x1e>
 8006830:	4620      	mov	r0, r4
 8006832:	f002 fdfb 	bl	800942c <_fflush_r>
 8006836:	68e1      	ldr	r1, [r4, #12]
 8006838:	4b06      	ldr	r3, [pc, #24]	@ (8006854 <cleanup_stdio+0x3c>)
 800683a:	4299      	cmp	r1, r3
 800683c:	d004      	beq.n	8006848 <cleanup_stdio+0x30>
 800683e:	4620      	mov	r0, r4
 8006840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006844:	f002 bdf2 	b.w	800942c <_fflush_r>
 8006848:	bd10      	pop	{r4, pc}
 800684a:	bf00      	nop
 800684c:	20000368 	.word	0x20000368
 8006850:	200003d0 	.word	0x200003d0
 8006854:	20000438 	.word	0x20000438

08006858 <global_stdio_init.part.0>:
 8006858:	b510      	push	{r4, lr}
 800685a:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <global_stdio_init.part.0+0x30>)
 800685c:	4c0b      	ldr	r4, [pc, #44]	@ (800688c <global_stdio_init.part.0+0x34>)
 800685e:	4a0c      	ldr	r2, [pc, #48]	@ (8006890 <global_stdio_init.part.0+0x38>)
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	4620      	mov	r0, r4
 8006864:	2200      	movs	r2, #0
 8006866:	2104      	movs	r1, #4
 8006868:	f7ff ff94 	bl	8006794 <std>
 800686c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006870:	2201      	movs	r2, #1
 8006872:	2109      	movs	r1, #9
 8006874:	f7ff ff8e 	bl	8006794 <std>
 8006878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800687c:	2202      	movs	r2, #2
 800687e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006882:	2112      	movs	r1, #18
 8006884:	f7ff bf86 	b.w	8006794 <std>
 8006888:	200004a0 	.word	0x200004a0
 800688c:	20000368 	.word	0x20000368
 8006890:	08006801 	.word	0x08006801

08006894 <__sfp_lock_acquire>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__sfp_lock_acquire+0x8>)
 8006896:	f000 b954 	b.w	8006b42 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	200004a9 	.word	0x200004a9

080068a0 <__sfp_lock_release>:
 80068a0:	4801      	ldr	r0, [pc, #4]	@ (80068a8 <__sfp_lock_release+0x8>)
 80068a2:	f000 b94f 	b.w	8006b44 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	200004a9 	.word	0x200004a9

080068ac <__sinit>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	f7ff fff0 	bl	8006894 <__sfp_lock_acquire>
 80068b4:	6a23      	ldr	r3, [r4, #32]
 80068b6:	b11b      	cbz	r3, 80068c0 <__sinit+0x14>
 80068b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068bc:	f7ff bff0 	b.w	80068a0 <__sfp_lock_release>
 80068c0:	4b04      	ldr	r3, [pc, #16]	@ (80068d4 <__sinit+0x28>)
 80068c2:	6223      	str	r3, [r4, #32]
 80068c4:	4b04      	ldr	r3, [pc, #16]	@ (80068d8 <__sinit+0x2c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f5      	bne.n	80068b8 <__sinit+0xc>
 80068cc:	f7ff ffc4 	bl	8006858 <global_stdio_init.part.0>
 80068d0:	e7f2      	b.n	80068b8 <__sinit+0xc>
 80068d2:	bf00      	nop
 80068d4:	08006819 	.word	0x08006819
 80068d8:	200004a0 	.word	0x200004a0

080068dc <_fwalk_sglue>:
 80068dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e0:	4607      	mov	r7, r0
 80068e2:	4688      	mov	r8, r1
 80068e4:	4614      	mov	r4, r2
 80068e6:	2600      	movs	r6, #0
 80068e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068ec:	f1b9 0901 	subs.w	r9, r9, #1
 80068f0:	d505      	bpl.n	80068fe <_fwalk_sglue+0x22>
 80068f2:	6824      	ldr	r4, [r4, #0]
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	d1f7      	bne.n	80068e8 <_fwalk_sglue+0xc>
 80068f8:	4630      	mov	r0, r6
 80068fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d907      	bls.n	8006914 <_fwalk_sglue+0x38>
 8006904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006908:	3301      	adds	r3, #1
 800690a:	d003      	beq.n	8006914 <_fwalk_sglue+0x38>
 800690c:	4629      	mov	r1, r5
 800690e:	4638      	mov	r0, r7
 8006910:	47c0      	blx	r8
 8006912:	4306      	orrs	r6, r0
 8006914:	3568      	adds	r5, #104	@ 0x68
 8006916:	e7e9      	b.n	80068ec <_fwalk_sglue+0x10>

08006918 <sniprintf>:
 8006918:	b40c      	push	{r2, r3}
 800691a:	b530      	push	{r4, r5, lr}
 800691c:	4b17      	ldr	r3, [pc, #92]	@ (800697c <sniprintf+0x64>)
 800691e:	1e0c      	subs	r4, r1, #0
 8006920:	681d      	ldr	r5, [r3, #0]
 8006922:	b09d      	sub	sp, #116	@ 0x74
 8006924:	da08      	bge.n	8006938 <sniprintf+0x20>
 8006926:	238b      	movs	r3, #139	@ 0x8b
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	b01d      	add	sp, #116	@ 0x74
 8006930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006934:	b002      	add	sp, #8
 8006936:	4770      	bx	lr
 8006938:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800693c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006940:	bf14      	ite	ne
 8006942:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006946:	4623      	moveq	r3, r4
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	9307      	str	r3, [sp, #28]
 800694c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006950:	9002      	str	r0, [sp, #8]
 8006952:	9006      	str	r0, [sp, #24]
 8006954:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006958:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800695a:	ab21      	add	r3, sp, #132	@ 0x84
 800695c:	a902      	add	r1, sp, #8
 800695e:	4628      	mov	r0, r5
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	f002 fbe3 	bl	800912c <_svfiprintf_r>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	bfbc      	itt	lt
 800696a:	238b      	movlt	r3, #139	@ 0x8b
 800696c:	602b      	strlt	r3, [r5, #0]
 800696e:	2c00      	cmp	r4, #0
 8006970:	d0dd      	beq.n	800692e <sniprintf+0x16>
 8006972:	9b02      	ldr	r3, [sp, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	e7d9      	b.n	800692e <sniprintf+0x16>
 800697a:	bf00      	nop
 800697c:	20000020 	.word	0x20000020

08006980 <siprintf>:
 8006980:	b40e      	push	{r1, r2, r3}
 8006982:	b500      	push	{lr}
 8006984:	b09c      	sub	sp, #112	@ 0x70
 8006986:	ab1d      	add	r3, sp, #116	@ 0x74
 8006988:	9002      	str	r0, [sp, #8]
 800698a:	9006      	str	r0, [sp, #24]
 800698c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006990:	4809      	ldr	r0, [pc, #36]	@ (80069b8 <siprintf+0x38>)
 8006992:	9107      	str	r1, [sp, #28]
 8006994:	9104      	str	r1, [sp, #16]
 8006996:	4909      	ldr	r1, [pc, #36]	@ (80069bc <siprintf+0x3c>)
 8006998:	f853 2b04 	ldr.w	r2, [r3], #4
 800699c:	9105      	str	r1, [sp, #20]
 800699e:	6800      	ldr	r0, [r0, #0]
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	a902      	add	r1, sp, #8
 80069a4:	f002 fbc2 	bl	800912c <_svfiprintf_r>
 80069a8:	9b02      	ldr	r3, [sp, #8]
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	b01c      	add	sp, #112	@ 0x70
 80069b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b4:	b003      	add	sp, #12
 80069b6:	4770      	bx	lr
 80069b8:	20000020 	.word	0x20000020
 80069bc:	ffff0208 	.word	0xffff0208

080069c0 <__sread>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	460c      	mov	r4, r1
 80069c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c8:	f000 f86c 	bl	8006aa4 <_read_r>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	bfab      	itete	ge
 80069d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069d2:	89a3      	ldrhlt	r3, [r4, #12]
 80069d4:	181b      	addge	r3, r3, r0
 80069d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069da:	bfac      	ite	ge
 80069dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069de:	81a3      	strhlt	r3, [r4, #12]
 80069e0:	bd10      	pop	{r4, pc}

080069e2 <__swrite>:
 80069e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	461f      	mov	r7, r3
 80069e8:	898b      	ldrh	r3, [r1, #12]
 80069ea:	05db      	lsls	r3, r3, #23
 80069ec:	4605      	mov	r5, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	4616      	mov	r6, r2
 80069f2:	d505      	bpl.n	8006a00 <__swrite+0x1e>
 80069f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f8:	2302      	movs	r3, #2
 80069fa:	2200      	movs	r2, #0
 80069fc:	f000 f840 	bl	8006a80 <_lseek_r>
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	463b      	mov	r3, r7
 8006a10:	4628      	mov	r0, r5
 8006a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a16:	f000 b857 	b.w	8006ac8 <_write_r>

08006a1a <__sseek>:
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a22:	f000 f82d 	bl	8006a80 <_lseek_r>
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	bf15      	itete	ne
 8006a2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a36:	81a3      	strheq	r3, [r4, #12]
 8006a38:	bf18      	it	ne
 8006a3a:	81a3      	strhne	r3, [r4, #12]
 8006a3c:	bd10      	pop	{r4, pc}

08006a3e <__sclose>:
 8006a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a42:	f000 b80d 	b.w	8006a60 <_close_r>

08006a46 <memset>:
 8006a46:	4402      	add	r2, r0
 8006a48:	4603      	mov	r3, r0
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d100      	bne.n	8006a50 <memset+0xa>
 8006a4e:	4770      	bx	lr
 8006a50:	f803 1b01 	strb.w	r1, [r3], #1
 8006a54:	e7f9      	b.n	8006a4a <memset+0x4>
	...

08006a58 <_localeconv_r>:
 8006a58:	4800      	ldr	r0, [pc, #0]	@ (8006a5c <_localeconv_r+0x4>)
 8006a5a:	4770      	bx	lr
 8006a5c:	20000160 	.word	0x20000160

08006a60 <_close_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	@ (8006a7c <_close_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa ff80 	bl	8001970 <_close>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_close_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_close_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	200004a4 	.word	0x200004a4

08006a80 <_lseek_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d07      	ldr	r5, [pc, #28]	@ (8006aa0 <_lseek_r+0x20>)
 8006a84:	4604      	mov	r4, r0
 8006a86:	4608      	mov	r0, r1
 8006a88:	4611      	mov	r1, r2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f7fa ff95 	bl	80019be <_lseek>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_lseek_r+0x1e>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_lseek_r+0x1e>
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	200004a4 	.word	0x200004a4

08006aa4 <_read_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4d07      	ldr	r5, [pc, #28]	@ (8006ac4 <_read_r+0x20>)
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	4608      	mov	r0, r1
 8006aac:	4611      	mov	r1, r2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	602a      	str	r2, [r5, #0]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f7fa ff23 	bl	80018fe <_read>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d102      	bne.n	8006ac2 <_read_r+0x1e>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	b103      	cbz	r3, 8006ac2 <_read_r+0x1e>
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	200004a4 	.word	0x200004a4

08006ac8 <_write_r>:
 8006ac8:	b538      	push	{r3, r4, r5, lr}
 8006aca:	4d07      	ldr	r5, [pc, #28]	@ (8006ae8 <_write_r+0x20>)
 8006acc:	4604      	mov	r4, r0
 8006ace:	4608      	mov	r0, r1
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f7fa ff2e 	bl	8001938 <_write>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_write_r+0x1e>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_write_r+0x1e>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200004a4 	.word	0x200004a4

08006aec <__errno>:
 8006aec:	4b01      	ldr	r3, [pc, #4]	@ (8006af4 <__errno+0x8>)
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000020 	.word	0x20000020

08006af8 <__libc_init_array>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4d0d      	ldr	r5, [pc, #52]	@ (8006b30 <__libc_init_array+0x38>)
 8006afc:	4c0d      	ldr	r4, [pc, #52]	@ (8006b34 <__libc_init_array+0x3c>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	2600      	movs	r6, #0
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	d109      	bne.n	8006b1c <__libc_init_array+0x24>
 8006b08:	4d0b      	ldr	r5, [pc, #44]	@ (8006b38 <__libc_init_array+0x40>)
 8006b0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b3c <__libc_init_array+0x44>)
 8006b0c:	f003 fb72 	bl	800a1f4 <_init>
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	2600      	movs	r6, #0
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	d105      	bne.n	8006b26 <__libc_init_array+0x2e>
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b20:	4798      	blx	r3
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7ee      	b.n	8006b04 <__libc_init_array+0xc>
 8006b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2a:	4798      	blx	r3
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7f2      	b.n	8006b16 <__libc_init_array+0x1e>
 8006b30:	0800a688 	.word	0x0800a688
 8006b34:	0800a688 	.word	0x0800a688
 8006b38:	0800a688 	.word	0x0800a688
 8006b3c:	0800a68c 	.word	0x0800a68c

08006b40 <__retarget_lock_init_recursive>:
 8006b40:	4770      	bx	lr

08006b42 <__retarget_lock_acquire_recursive>:
 8006b42:	4770      	bx	lr

08006b44 <__retarget_lock_release_recursive>:
 8006b44:	4770      	bx	lr

08006b46 <memcpy>:
 8006b46:	440a      	add	r2, r1
 8006b48:	4291      	cmp	r1, r2
 8006b4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b4e:	d100      	bne.n	8006b52 <memcpy+0xc>
 8006b50:	4770      	bx	lr
 8006b52:	b510      	push	{r4, lr}
 8006b54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b5c:	4291      	cmp	r1, r2
 8006b5e:	d1f9      	bne.n	8006b54 <memcpy+0xe>
 8006b60:	bd10      	pop	{r4, pc}
	...

08006b64 <nanf>:
 8006b64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006b6c <nanf+0x8>
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	7fc00000 	.word	0x7fc00000

08006b70 <quorem>:
 8006b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	6903      	ldr	r3, [r0, #16]
 8006b76:	690c      	ldr	r4, [r1, #16]
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	db7e      	blt.n	8006c7c <quorem+0x10c>
 8006b7e:	3c01      	subs	r4, #1
 8006b80:	f101 0814 	add.w	r8, r1, #20
 8006b84:	00a3      	lsls	r3, r4, #2
 8006b86:	f100 0514 	add.w	r5, r0, #20
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ba2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ba6:	d32e      	bcc.n	8006c06 <quorem+0x96>
 8006ba8:	f04f 0a00 	mov.w	sl, #0
 8006bac:	46c4      	mov	ip, r8
 8006bae:	46ae      	mov	lr, r5
 8006bb0:	46d3      	mov	fp, sl
 8006bb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bb6:	b298      	uxth	r0, r3
 8006bb8:	fb06 a000 	mla	r0, r6, r0, sl
 8006bbc:	0c02      	lsrs	r2, r0, #16
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	fb06 2303 	mla	r3, r6, r3, r2
 8006bc4:	f8de 2000 	ldr.w	r2, [lr]
 8006bc8:	b280      	uxth	r0, r0
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	1a12      	subs	r2, r2, r0
 8006bce:	445a      	add	r2, fp
 8006bd0:	f8de 0000 	ldr.w	r0, [lr]
 8006bd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bde:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006be2:	b292      	uxth	r2, r2
 8006be4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006be8:	45e1      	cmp	r9, ip
 8006bea:	f84e 2b04 	str.w	r2, [lr], #4
 8006bee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006bf2:	d2de      	bcs.n	8006bb2 <quorem+0x42>
 8006bf4:	9b00      	ldr	r3, [sp, #0]
 8006bf6:	58eb      	ldr	r3, [r5, r3]
 8006bf8:	b92b      	cbnz	r3, 8006c06 <quorem+0x96>
 8006bfa:	9b01      	ldr	r3, [sp, #4]
 8006bfc:	3b04      	subs	r3, #4
 8006bfe:	429d      	cmp	r5, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	d32f      	bcc.n	8006c64 <quorem+0xf4>
 8006c04:	613c      	str	r4, [r7, #16]
 8006c06:	4638      	mov	r0, r7
 8006c08:	f001 f9c2 	bl	8007f90 <__mcmp>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	db25      	blt.n	8006c5c <quorem+0xec>
 8006c10:	4629      	mov	r1, r5
 8006c12:	2000      	movs	r0, #0
 8006c14:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c18:	f8d1 c000 	ldr.w	ip, [r1]
 8006c1c:	fa1f fe82 	uxth.w	lr, r2
 8006c20:	fa1f f38c 	uxth.w	r3, ip
 8006c24:	eba3 030e 	sub.w	r3, r3, lr
 8006c28:	4403      	add	r3, r0
 8006c2a:	0c12      	lsrs	r2, r2, #16
 8006c2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c3a:	45c1      	cmp	r9, r8
 8006c3c:	f841 3b04 	str.w	r3, [r1], #4
 8006c40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c44:	d2e6      	bcs.n	8006c14 <quorem+0xa4>
 8006c46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c4e:	b922      	cbnz	r2, 8006c5a <quorem+0xea>
 8006c50:	3b04      	subs	r3, #4
 8006c52:	429d      	cmp	r5, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	d30b      	bcc.n	8006c70 <quorem+0x100>
 8006c58:	613c      	str	r4, [r7, #16]
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	b003      	add	sp, #12
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	3b04      	subs	r3, #4
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d1cb      	bne.n	8006c04 <quorem+0x94>
 8006c6c:	3c01      	subs	r4, #1
 8006c6e:	e7c6      	b.n	8006bfe <quorem+0x8e>
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	3b04      	subs	r3, #4
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	d1ef      	bne.n	8006c58 <quorem+0xe8>
 8006c78:	3c01      	subs	r4, #1
 8006c7a:	e7ea      	b.n	8006c52 <quorem+0xe2>
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e7ee      	b.n	8006c5e <quorem+0xee>

08006c80 <_dtoa_r>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	69c7      	ldr	r7, [r0, #28]
 8006c86:	b099      	sub	sp, #100	@ 0x64
 8006c88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c8c:	ec55 4b10 	vmov	r4, r5, d0
 8006c90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c92:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c94:	4683      	mov	fp, r0
 8006c96:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c9a:	b97f      	cbnz	r7, 8006cbc <_dtoa_r+0x3c>
 8006c9c:	2010      	movs	r0, #16
 8006c9e:	f000 fdfd 	bl	800789c <malloc>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ca8:	b920      	cbnz	r0, 8006cb4 <_dtoa_r+0x34>
 8006caa:	4ba7      	ldr	r3, [pc, #668]	@ (8006f48 <_dtoa_r+0x2c8>)
 8006cac:	21ef      	movs	r1, #239	@ 0xef
 8006cae:	48a7      	ldr	r0, [pc, #668]	@ (8006f4c <_dtoa_r+0x2cc>)
 8006cb0:	f002 fc2a 	bl	8009508 <__assert_func>
 8006cb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006cb8:	6007      	str	r7, [r0, #0]
 8006cba:	60c7      	str	r7, [r0, #12]
 8006cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cc0:	6819      	ldr	r1, [r3, #0]
 8006cc2:	b159      	cbz	r1, 8006cdc <_dtoa_r+0x5c>
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	604a      	str	r2, [r1, #4]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4093      	lsls	r3, r2
 8006ccc:	608b      	str	r3, [r1, #8]
 8006cce:	4658      	mov	r0, fp
 8006cd0:	f000 feda 	bl	8007a88 <_Bfree>
 8006cd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	1e2b      	subs	r3, r5, #0
 8006cde:	bfb9      	ittee	lt
 8006ce0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ce4:	9303      	strlt	r3, [sp, #12]
 8006ce6:	2300      	movge	r3, #0
 8006ce8:	6033      	strge	r3, [r6, #0]
 8006cea:	9f03      	ldr	r7, [sp, #12]
 8006cec:	4b98      	ldr	r3, [pc, #608]	@ (8006f50 <_dtoa_r+0x2d0>)
 8006cee:	bfbc      	itt	lt
 8006cf0:	2201      	movlt	r2, #1
 8006cf2:	6032      	strlt	r2, [r6, #0]
 8006cf4:	43bb      	bics	r3, r7
 8006cf6:	d112      	bne.n	8006d1e <_dtoa_r+0x9e>
 8006cf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d04:	4323      	orrs	r3, r4
 8006d06:	f000 854d 	beq.w	80077a4 <_dtoa_r+0xb24>
 8006d0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f64 <_dtoa_r+0x2e4>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 854f 	beq.w	80077b4 <_dtoa_r+0xb34>
 8006d16:	f10a 0303 	add.w	r3, sl, #3
 8006d1a:	f000 bd49 	b.w	80077b0 <_dtoa_r+0xb30>
 8006d1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d22:	2200      	movs	r2, #0
 8006d24:	ec51 0b17 	vmov	r0, r1, d7
 8006d28:	2300      	movs	r3, #0
 8006d2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006d2e:	f7f9 fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d32:	4680      	mov	r8, r0
 8006d34:	b158      	cbz	r0, 8006d4e <_dtoa_r+0xce>
 8006d36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d38:	2301      	movs	r3, #1
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d3e:	b113      	cbz	r3, 8006d46 <_dtoa_r+0xc6>
 8006d40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d42:	4b84      	ldr	r3, [pc, #528]	@ (8006f54 <_dtoa_r+0x2d4>)
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f68 <_dtoa_r+0x2e8>
 8006d4a:	f000 bd33 	b.w	80077b4 <_dtoa_r+0xb34>
 8006d4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d52:	aa16      	add	r2, sp, #88	@ 0x58
 8006d54:	a917      	add	r1, sp, #92	@ 0x5c
 8006d56:	4658      	mov	r0, fp
 8006d58:	f001 fa3a 	bl	80081d0 <__d2b>
 8006d5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d60:	4681      	mov	r9, r0
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	d077      	beq.n	8006e56 <_dtoa_r+0x1d6>
 8006d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d80:	4619      	mov	r1, r3
 8006d82:	2200      	movs	r2, #0
 8006d84:	4b74      	ldr	r3, [pc, #464]	@ (8006f58 <_dtoa_r+0x2d8>)
 8006d86:	f7f9 fa7f 	bl	8000288 <__aeabi_dsub>
 8006d8a:	a369      	add	r3, pc, #420	@ (adr r3, 8006f30 <_dtoa_r+0x2b0>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fc32 	bl	80005f8 <__aeabi_dmul>
 8006d94:	a368      	add	r3, pc, #416	@ (adr r3, 8006f38 <_dtoa_r+0x2b8>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7f9 fa77 	bl	800028c <__adddf3>
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4630      	mov	r0, r6
 8006da2:	460d      	mov	r5, r1
 8006da4:	f7f9 fbbe 	bl	8000524 <__aeabi_i2d>
 8006da8:	a365      	add	r3, pc, #404	@ (adr r3, 8006f40 <_dtoa_r+0x2c0>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f7f9 fc23 	bl	80005f8 <__aeabi_dmul>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fa67 	bl	800028c <__adddf3>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	f7f9 fec9 	bl	8000b58 <__aeabi_d2iz>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4607      	mov	r7, r0
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 fe84 	bl	8000adc <__aeabi_dcmplt>
 8006dd4:	b140      	cbz	r0, 8006de8 <_dtoa_r+0x168>
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7f9 fba4 	bl	8000524 <__aeabi_i2d>
 8006ddc:	4622      	mov	r2, r4
 8006dde:	462b      	mov	r3, r5
 8006de0:	f7f9 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8006de4:	b900      	cbnz	r0, 8006de8 <_dtoa_r+0x168>
 8006de6:	3f01      	subs	r7, #1
 8006de8:	2f16      	cmp	r7, #22
 8006dea:	d851      	bhi.n	8006e90 <_dtoa_r+0x210>
 8006dec:	4b5b      	ldr	r3, [pc, #364]	@ (8006f5c <_dtoa_r+0x2dc>)
 8006dee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dfa:	f7f9 fe6f 	bl	8000adc <__aeabi_dcmplt>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d048      	beq.n	8006e94 <_dtoa_r+0x214>
 8006e02:	3f01      	subs	r7, #1
 8006e04:	2300      	movs	r3, #0
 8006e06:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006e0a:	1b9b      	subs	r3, r3, r6
 8006e0c:	1e5a      	subs	r2, r3, #1
 8006e0e:	bf44      	itt	mi
 8006e10:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e14:	2300      	movmi	r3, #0
 8006e16:	9208      	str	r2, [sp, #32]
 8006e18:	bf54      	ite	pl
 8006e1a:	f04f 0800 	movpl.w	r8, #0
 8006e1e:	9308      	strmi	r3, [sp, #32]
 8006e20:	2f00      	cmp	r7, #0
 8006e22:	db39      	blt.n	8006e98 <_dtoa_r+0x218>
 8006e24:	9b08      	ldr	r3, [sp, #32]
 8006e26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006e28:	443b      	add	r3, r7
 8006e2a:	9308      	str	r3, [sp, #32]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e32:	2b09      	cmp	r3, #9
 8006e34:	d864      	bhi.n	8006f00 <_dtoa_r+0x280>
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	bfc4      	itt	gt
 8006e3a:	3b04      	subgt	r3, #4
 8006e3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e40:	f1a3 0302 	sub.w	r3, r3, #2
 8006e44:	bfcc      	ite	gt
 8006e46:	2400      	movgt	r4, #0
 8006e48:	2401      	movle	r4, #1
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d863      	bhi.n	8006f16 <_dtoa_r+0x296>
 8006e4e:	e8df f003 	tbb	[pc, r3]
 8006e52:	372a      	.short	0x372a
 8006e54:	5535      	.short	0x5535
 8006e56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e5a:	441e      	add	r6, r3
 8006e5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	bfc1      	itttt	gt
 8006e64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e68:	409f      	lslgt	r7, r3
 8006e6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e72:	bfd6      	itet	le
 8006e74:	f1c3 0320 	rsble	r3, r3, #32
 8006e78:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e7c:	fa04 f003 	lslle.w	r0, r4, r3
 8006e80:	f7f9 fb40 	bl	8000504 <__aeabi_ui2d>
 8006e84:	2201      	movs	r2, #1
 8006e86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e8a:	3e01      	subs	r6, #1
 8006e8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e8e:	e777      	b.n	8006d80 <_dtoa_r+0x100>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e7b8      	b.n	8006e06 <_dtoa_r+0x186>
 8006e94:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e96:	e7b7      	b.n	8006e08 <_dtoa_r+0x188>
 8006e98:	427b      	negs	r3, r7
 8006e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	eba8 0807 	sub.w	r8, r8, r7
 8006ea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ea4:	e7c4      	b.n	8006e30 <_dtoa_r+0x1b0>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dc35      	bgt.n	8006f1c <_dtoa_r+0x29c>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	9307      	str	r3, [sp, #28]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eba:	e00b      	b.n	8006ed4 <_dtoa_r+0x254>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e7f3      	b.n	8006ea8 <_dtoa_r+0x228>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	bfb8      	it	lt
 8006ed2:	2301      	movlt	r3, #1
 8006ed4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ed8:	2100      	movs	r1, #0
 8006eda:	2204      	movs	r2, #4
 8006edc:	f102 0514 	add.w	r5, r2, #20
 8006ee0:	429d      	cmp	r5, r3
 8006ee2:	d91f      	bls.n	8006f24 <_dtoa_r+0x2a4>
 8006ee4:	6041      	str	r1, [r0, #4]
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f000 fd8e 	bl	8007a08 <_Balloc>
 8006eec:	4682      	mov	sl, r0
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d13c      	bne.n	8006f6c <_dtoa_r+0x2ec>
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f60 <_dtoa_r+0x2e0>)
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006efa:	e6d8      	b.n	8006cae <_dtoa_r+0x2e>
 8006efc:	2301      	movs	r3, #1
 8006efe:	e7e0      	b.n	8006ec2 <_dtoa_r+0x242>
 8006f00:	2401      	movs	r4, #1
 8006f02:	2300      	movs	r3, #0
 8006f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	9307      	str	r3, [sp, #28]
 8006f10:	2200      	movs	r2, #0
 8006f12:	2312      	movs	r3, #18
 8006f14:	e7d0      	b.n	8006eb8 <_dtoa_r+0x238>
 8006f16:	2301      	movs	r3, #1
 8006f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f1a:	e7f5      	b.n	8006f08 <_dtoa_r+0x288>
 8006f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	e7d7      	b.n	8006ed4 <_dtoa_r+0x254>
 8006f24:	3101      	adds	r1, #1
 8006f26:	0052      	lsls	r2, r2, #1
 8006f28:	e7d8      	b.n	8006edc <_dtoa_r+0x25c>
 8006f2a:	bf00      	nop
 8006f2c:	f3af 8000 	nop.w
 8006f30:	636f4361 	.word	0x636f4361
 8006f34:	3fd287a7 	.word	0x3fd287a7
 8006f38:	8b60c8b3 	.word	0x8b60c8b3
 8006f3c:	3fc68a28 	.word	0x3fc68a28
 8006f40:	509f79fb 	.word	0x509f79fb
 8006f44:	3fd34413 	.word	0x3fd34413
 8006f48:	0800a29a 	.word	0x0800a29a
 8006f4c:	0800a2b1 	.word	0x0800a2b1
 8006f50:	7ff00000 	.word	0x7ff00000
 8006f54:	0800a265 	.word	0x0800a265
 8006f58:	3ff80000 	.word	0x3ff80000
 8006f5c:	0800a3a8 	.word	0x0800a3a8
 8006f60:	0800a309 	.word	0x0800a309
 8006f64:	0800a296 	.word	0x0800a296
 8006f68:	0800a264 	.word	0x0800a264
 8006f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f70:	6018      	str	r0, [r3, #0]
 8006f72:	9b07      	ldr	r3, [sp, #28]
 8006f74:	2b0e      	cmp	r3, #14
 8006f76:	f200 80a4 	bhi.w	80070c2 <_dtoa_r+0x442>
 8006f7a:	2c00      	cmp	r4, #0
 8006f7c:	f000 80a1 	beq.w	80070c2 <_dtoa_r+0x442>
 8006f80:	2f00      	cmp	r7, #0
 8006f82:	dd33      	ble.n	8006fec <_dtoa_r+0x36c>
 8006f84:	4bad      	ldr	r3, [pc, #692]	@ (800723c <_dtoa_r+0x5bc>)
 8006f86:	f007 020f 	and.w	r2, r7, #15
 8006f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f8e:	ed93 7b00 	vldr	d7, [r3]
 8006f92:	05f8      	lsls	r0, r7, #23
 8006f94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f9c:	d516      	bpl.n	8006fcc <_dtoa_r+0x34c>
 8006f9e:	4ba8      	ldr	r3, [pc, #672]	@ (8007240 <_dtoa_r+0x5c0>)
 8006fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa8:	f7f9 fc50 	bl	800084c <__aeabi_ddiv>
 8006fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb0:	f004 040f 	and.w	r4, r4, #15
 8006fb4:	2603      	movs	r6, #3
 8006fb6:	4da2      	ldr	r5, [pc, #648]	@ (8007240 <_dtoa_r+0x5c0>)
 8006fb8:	b954      	cbnz	r4, 8006fd0 <_dtoa_r+0x350>
 8006fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fc2:	f7f9 fc43 	bl	800084c <__aeabi_ddiv>
 8006fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fca:	e028      	b.n	800701e <_dtoa_r+0x39e>
 8006fcc:	2602      	movs	r6, #2
 8006fce:	e7f2      	b.n	8006fb6 <_dtoa_r+0x336>
 8006fd0:	07e1      	lsls	r1, r4, #31
 8006fd2:	d508      	bpl.n	8006fe6 <_dtoa_r+0x366>
 8006fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fdc:	f7f9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8006fe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fe4:	3601      	adds	r6, #1
 8006fe6:	1064      	asrs	r4, r4, #1
 8006fe8:	3508      	adds	r5, #8
 8006fea:	e7e5      	b.n	8006fb8 <_dtoa_r+0x338>
 8006fec:	f000 80d2 	beq.w	8007194 <_dtoa_r+0x514>
 8006ff0:	427c      	negs	r4, r7
 8006ff2:	4b92      	ldr	r3, [pc, #584]	@ (800723c <_dtoa_r+0x5bc>)
 8006ff4:	4d92      	ldr	r5, [pc, #584]	@ (8007240 <_dtoa_r+0x5c0>)
 8006ff6:	f004 020f 	and.w	r2, r4, #15
 8006ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007006:	f7f9 faf7 	bl	80005f8 <__aeabi_dmul>
 800700a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800700e:	1124      	asrs	r4, r4, #4
 8007010:	2300      	movs	r3, #0
 8007012:	2602      	movs	r6, #2
 8007014:	2c00      	cmp	r4, #0
 8007016:	f040 80b2 	bne.w	800717e <_dtoa_r+0x4fe>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1d3      	bne.n	8006fc6 <_dtoa_r+0x346>
 800701e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007020:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80b7 	beq.w	8007198 <_dtoa_r+0x518>
 800702a:	4b86      	ldr	r3, [pc, #536]	@ (8007244 <_dtoa_r+0x5c4>)
 800702c:	2200      	movs	r2, #0
 800702e:	4620      	mov	r0, r4
 8007030:	4629      	mov	r1, r5
 8007032:	f7f9 fd53 	bl	8000adc <__aeabi_dcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	f000 80ae 	beq.w	8007198 <_dtoa_r+0x518>
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 80aa 	beq.w	8007198 <_dtoa_r+0x518>
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	dd37      	ble.n	80070ba <_dtoa_r+0x43a>
 800704a:	1e7b      	subs	r3, r7, #1
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	4620      	mov	r0, r4
 8007050:	4b7d      	ldr	r3, [pc, #500]	@ (8007248 <_dtoa_r+0x5c8>)
 8007052:	2200      	movs	r2, #0
 8007054:	4629      	mov	r1, r5
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800705e:	9c00      	ldr	r4, [sp, #0]
 8007060:	3601      	adds	r6, #1
 8007062:	4630      	mov	r0, r6
 8007064:	f7f9 fa5e 	bl	8000524 <__aeabi_i2d>
 8007068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800706c:	f7f9 fac4 	bl	80005f8 <__aeabi_dmul>
 8007070:	4b76      	ldr	r3, [pc, #472]	@ (800724c <_dtoa_r+0x5cc>)
 8007072:	2200      	movs	r2, #0
 8007074:	f7f9 f90a 	bl	800028c <__adddf3>
 8007078:	4605      	mov	r5, r0
 800707a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800707e:	2c00      	cmp	r4, #0
 8007080:	f040 808d 	bne.w	800719e <_dtoa_r+0x51e>
 8007084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007088:	4b71      	ldr	r3, [pc, #452]	@ (8007250 <_dtoa_r+0x5d0>)
 800708a:	2200      	movs	r2, #0
 800708c:	f7f9 f8fc 	bl	8000288 <__aeabi_dsub>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007098:	462a      	mov	r2, r5
 800709a:	4633      	mov	r3, r6
 800709c:	f7f9 fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	f040 828b 	bne.w	80075bc <_dtoa_r+0x93c>
 80070a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070aa:	462a      	mov	r2, r5
 80070ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070b0:	f7f9 fd14 	bl	8000adc <__aeabi_dcmplt>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f040 8128 	bne.w	800730a <_dtoa_r+0x68a>
 80070ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f2c0 815a 	blt.w	800737e <_dtoa_r+0x6fe>
 80070ca:	2f0e      	cmp	r7, #14
 80070cc:	f300 8157 	bgt.w	800737e <_dtoa_r+0x6fe>
 80070d0:	4b5a      	ldr	r3, [pc, #360]	@ (800723c <_dtoa_r+0x5bc>)
 80070d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070d6:	ed93 7b00 	vldr	d7, [r3]
 80070da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	ed8d 7b00 	vstr	d7, [sp]
 80070e2:	da03      	bge.n	80070ec <_dtoa_r+0x46c>
 80070e4:	9b07      	ldr	r3, [sp, #28]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f340 8101 	ble.w	80072ee <_dtoa_r+0x66e>
 80070ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070f0:	4656      	mov	r6, sl
 80070f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070f6:	4620      	mov	r0, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	f7f9 fba7 	bl	800084c <__aeabi_ddiv>
 80070fe:	f7f9 fd2b 	bl	8000b58 <__aeabi_d2iz>
 8007102:	4680      	mov	r8, r0
 8007104:	f7f9 fa0e 	bl	8000524 <__aeabi_i2d>
 8007108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800710c:	f7f9 fa74 	bl	80005f8 <__aeabi_dmul>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800711c:	f7f9 f8b4 	bl	8000288 <__aeabi_dsub>
 8007120:	f806 4b01 	strb.w	r4, [r6], #1
 8007124:	9d07      	ldr	r5, [sp, #28]
 8007126:	eba6 040a 	sub.w	r4, r6, sl
 800712a:	42a5      	cmp	r5, r4
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	f040 8117 	bne.w	8007362 <_dtoa_r+0x6e2>
 8007134:	f7f9 f8aa 	bl	800028c <__adddf3>
 8007138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800713c:	4604      	mov	r4, r0
 800713e:	460d      	mov	r5, r1
 8007140:	f7f9 fcea 	bl	8000b18 <__aeabi_dcmpgt>
 8007144:	2800      	cmp	r0, #0
 8007146:	f040 80f9 	bne.w	800733c <_dtoa_r+0x6bc>
 800714a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800714e:	4620      	mov	r0, r4
 8007150:	4629      	mov	r1, r5
 8007152:	f7f9 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007156:	b118      	cbz	r0, 8007160 <_dtoa_r+0x4e0>
 8007158:	f018 0f01 	tst.w	r8, #1
 800715c:	f040 80ee 	bne.w	800733c <_dtoa_r+0x6bc>
 8007160:	4649      	mov	r1, r9
 8007162:	4658      	mov	r0, fp
 8007164:	f000 fc90 	bl	8007a88 <_Bfree>
 8007168:	2300      	movs	r3, #0
 800716a:	7033      	strb	r3, [r6, #0]
 800716c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800716e:	3701      	adds	r7, #1
 8007170:	601f      	str	r7, [r3, #0]
 8007172:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 831d 	beq.w	80077b4 <_dtoa_r+0xb34>
 800717a:	601e      	str	r6, [r3, #0]
 800717c:	e31a      	b.n	80077b4 <_dtoa_r+0xb34>
 800717e:	07e2      	lsls	r2, r4, #31
 8007180:	d505      	bpl.n	800718e <_dtoa_r+0x50e>
 8007182:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007186:	f7f9 fa37 	bl	80005f8 <__aeabi_dmul>
 800718a:	3601      	adds	r6, #1
 800718c:	2301      	movs	r3, #1
 800718e:	1064      	asrs	r4, r4, #1
 8007190:	3508      	adds	r5, #8
 8007192:	e73f      	b.n	8007014 <_dtoa_r+0x394>
 8007194:	2602      	movs	r6, #2
 8007196:	e742      	b.n	800701e <_dtoa_r+0x39e>
 8007198:	9c07      	ldr	r4, [sp, #28]
 800719a:	9704      	str	r7, [sp, #16]
 800719c:	e761      	b.n	8007062 <_dtoa_r+0x3e2>
 800719e:	4b27      	ldr	r3, [pc, #156]	@ (800723c <_dtoa_r+0x5bc>)
 80071a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071aa:	4454      	add	r4, sl
 80071ac:	2900      	cmp	r1, #0
 80071ae:	d053      	beq.n	8007258 <_dtoa_r+0x5d8>
 80071b0:	4928      	ldr	r1, [pc, #160]	@ (8007254 <_dtoa_r+0x5d4>)
 80071b2:	2000      	movs	r0, #0
 80071b4:	f7f9 fb4a 	bl	800084c <__aeabi_ddiv>
 80071b8:	4633      	mov	r3, r6
 80071ba:	462a      	mov	r2, r5
 80071bc:	f7f9 f864 	bl	8000288 <__aeabi_dsub>
 80071c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071c4:	4656      	mov	r6, sl
 80071c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ca:	f7f9 fcc5 	bl	8000b58 <__aeabi_d2iz>
 80071ce:	4605      	mov	r5, r0
 80071d0:	f7f9 f9a8 	bl	8000524 <__aeabi_i2d>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071dc:	f7f9 f854 	bl	8000288 <__aeabi_dsub>
 80071e0:	3530      	adds	r5, #48	@ 0x30
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071ea:	f806 5b01 	strb.w	r5, [r6], #1
 80071ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071f2:	f7f9 fc73 	bl	8000adc <__aeabi_dcmplt>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d171      	bne.n	80072de <_dtoa_r+0x65e>
 80071fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071fe:	4911      	ldr	r1, [pc, #68]	@ (8007244 <_dtoa_r+0x5c4>)
 8007200:	2000      	movs	r0, #0
 8007202:	f7f9 f841 	bl	8000288 <__aeabi_dsub>
 8007206:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800720a:	f7f9 fc67 	bl	8000adc <__aeabi_dcmplt>
 800720e:	2800      	cmp	r0, #0
 8007210:	f040 8095 	bne.w	800733e <_dtoa_r+0x6be>
 8007214:	42a6      	cmp	r6, r4
 8007216:	f43f af50 	beq.w	80070ba <_dtoa_r+0x43a>
 800721a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800721e:	4b0a      	ldr	r3, [pc, #40]	@ (8007248 <_dtoa_r+0x5c8>)
 8007220:	2200      	movs	r2, #0
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	4b08      	ldr	r3, [pc, #32]	@ (8007248 <_dtoa_r+0x5c8>)
 8007228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800722c:	2200      	movs	r2, #0
 800722e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007232:	f7f9 f9e1 	bl	80005f8 <__aeabi_dmul>
 8007236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800723a:	e7c4      	b.n	80071c6 <_dtoa_r+0x546>
 800723c:	0800a3a8 	.word	0x0800a3a8
 8007240:	0800a380 	.word	0x0800a380
 8007244:	3ff00000 	.word	0x3ff00000
 8007248:	40240000 	.word	0x40240000
 800724c:	401c0000 	.word	0x401c0000
 8007250:	40140000 	.word	0x40140000
 8007254:	3fe00000 	.word	0x3fe00000
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	f7f9 f9cc 	bl	80005f8 <__aeabi_dmul>
 8007260:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007264:	9415      	str	r4, [sp, #84]	@ 0x54
 8007266:	4656      	mov	r6, sl
 8007268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800726c:	f7f9 fc74 	bl	8000b58 <__aeabi_d2iz>
 8007270:	4605      	mov	r5, r0
 8007272:	f7f9 f957 	bl	8000524 <__aeabi_i2d>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727e:	f7f9 f803 	bl	8000288 <__aeabi_dsub>
 8007282:	3530      	adds	r5, #48	@ 0x30
 8007284:	f806 5b01 	strb.w	r5, [r6], #1
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	42a6      	cmp	r6, r4
 800728e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	d124      	bne.n	80072e2 <_dtoa_r+0x662>
 8007298:	4bac      	ldr	r3, [pc, #688]	@ (800754c <_dtoa_r+0x8cc>)
 800729a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800729e:	f7f8 fff5 	bl	800028c <__adddf3>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072aa:	f7f9 fc35 	bl	8000b18 <__aeabi_dcmpgt>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d145      	bne.n	800733e <_dtoa_r+0x6be>
 80072b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072b6:	49a5      	ldr	r1, [pc, #660]	@ (800754c <_dtoa_r+0x8cc>)
 80072b8:	2000      	movs	r0, #0
 80072ba:	f7f8 ffe5 	bl	8000288 <__aeabi_dsub>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c6:	f7f9 fc09 	bl	8000adc <__aeabi_dcmplt>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	f43f aef5 	beq.w	80070ba <_dtoa_r+0x43a>
 80072d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80072d2:	1e73      	subs	r3, r6, #1
 80072d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80072d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072da:	2b30      	cmp	r3, #48	@ 0x30
 80072dc:	d0f8      	beq.n	80072d0 <_dtoa_r+0x650>
 80072de:	9f04      	ldr	r7, [sp, #16]
 80072e0:	e73e      	b.n	8007160 <_dtoa_r+0x4e0>
 80072e2:	4b9b      	ldr	r3, [pc, #620]	@ (8007550 <_dtoa_r+0x8d0>)
 80072e4:	f7f9 f988 	bl	80005f8 <__aeabi_dmul>
 80072e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ec:	e7bc      	b.n	8007268 <_dtoa_r+0x5e8>
 80072ee:	d10c      	bne.n	800730a <_dtoa_r+0x68a>
 80072f0:	4b98      	ldr	r3, [pc, #608]	@ (8007554 <_dtoa_r+0x8d4>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072f8:	f7f9 f97e 	bl	80005f8 <__aeabi_dmul>
 80072fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007300:	f7f9 fc00 	bl	8000b04 <__aeabi_dcmpge>
 8007304:	2800      	cmp	r0, #0
 8007306:	f000 8157 	beq.w	80075b8 <_dtoa_r+0x938>
 800730a:	2400      	movs	r4, #0
 800730c:	4625      	mov	r5, r4
 800730e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007310:	43db      	mvns	r3, r3
 8007312:	9304      	str	r3, [sp, #16]
 8007314:	4656      	mov	r6, sl
 8007316:	2700      	movs	r7, #0
 8007318:	4621      	mov	r1, r4
 800731a:	4658      	mov	r0, fp
 800731c:	f000 fbb4 	bl	8007a88 <_Bfree>
 8007320:	2d00      	cmp	r5, #0
 8007322:	d0dc      	beq.n	80072de <_dtoa_r+0x65e>
 8007324:	b12f      	cbz	r7, 8007332 <_dtoa_r+0x6b2>
 8007326:	42af      	cmp	r7, r5
 8007328:	d003      	beq.n	8007332 <_dtoa_r+0x6b2>
 800732a:	4639      	mov	r1, r7
 800732c:	4658      	mov	r0, fp
 800732e:	f000 fbab 	bl	8007a88 <_Bfree>
 8007332:	4629      	mov	r1, r5
 8007334:	4658      	mov	r0, fp
 8007336:	f000 fba7 	bl	8007a88 <_Bfree>
 800733a:	e7d0      	b.n	80072de <_dtoa_r+0x65e>
 800733c:	9704      	str	r7, [sp, #16]
 800733e:	4633      	mov	r3, r6
 8007340:	461e      	mov	r6, r3
 8007342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007346:	2a39      	cmp	r2, #57	@ 0x39
 8007348:	d107      	bne.n	800735a <_dtoa_r+0x6da>
 800734a:	459a      	cmp	sl, r3
 800734c:	d1f8      	bne.n	8007340 <_dtoa_r+0x6c0>
 800734e:	9a04      	ldr	r2, [sp, #16]
 8007350:	3201      	adds	r2, #1
 8007352:	9204      	str	r2, [sp, #16]
 8007354:	2230      	movs	r2, #48	@ 0x30
 8007356:	f88a 2000 	strb.w	r2, [sl]
 800735a:	781a      	ldrb	r2, [r3, #0]
 800735c:	3201      	adds	r2, #1
 800735e:	701a      	strb	r2, [r3, #0]
 8007360:	e7bd      	b.n	80072de <_dtoa_r+0x65e>
 8007362:	4b7b      	ldr	r3, [pc, #492]	@ (8007550 <_dtoa_r+0x8d0>)
 8007364:	2200      	movs	r2, #0
 8007366:	f7f9 f947 	bl	80005f8 <__aeabi_dmul>
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	460d      	mov	r5, r1
 8007372:	f7f9 fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007376:	2800      	cmp	r0, #0
 8007378:	f43f aebb 	beq.w	80070f2 <_dtoa_r+0x472>
 800737c:	e6f0      	b.n	8007160 <_dtoa_r+0x4e0>
 800737e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007380:	2a00      	cmp	r2, #0
 8007382:	f000 80db 	beq.w	800753c <_dtoa_r+0x8bc>
 8007386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007388:	2a01      	cmp	r2, #1
 800738a:	f300 80bf 	bgt.w	800750c <_dtoa_r+0x88c>
 800738e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007390:	2a00      	cmp	r2, #0
 8007392:	f000 80b7 	beq.w	8007504 <_dtoa_r+0x884>
 8007396:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800739a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800739c:	4646      	mov	r6, r8
 800739e:	9a08      	ldr	r2, [sp, #32]
 80073a0:	2101      	movs	r1, #1
 80073a2:	441a      	add	r2, r3
 80073a4:	4658      	mov	r0, fp
 80073a6:	4498      	add	r8, r3
 80073a8:	9208      	str	r2, [sp, #32]
 80073aa:	f000 fc6b 	bl	8007c84 <__i2b>
 80073ae:	4605      	mov	r5, r0
 80073b0:	b15e      	cbz	r6, 80073ca <_dtoa_r+0x74a>
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	dd08      	ble.n	80073ca <_dtoa_r+0x74a>
 80073b8:	42b3      	cmp	r3, r6
 80073ba:	9a08      	ldr	r2, [sp, #32]
 80073bc:	bfa8      	it	ge
 80073be:	4633      	movge	r3, r6
 80073c0:	eba8 0803 	sub.w	r8, r8, r3
 80073c4:	1af6      	subs	r6, r6, r3
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	9308      	str	r3, [sp, #32]
 80073ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073cc:	b1f3      	cbz	r3, 800740c <_dtoa_r+0x78c>
 80073ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80b7 	beq.w	8007544 <_dtoa_r+0x8c4>
 80073d6:	b18c      	cbz	r4, 80073fc <_dtoa_r+0x77c>
 80073d8:	4629      	mov	r1, r5
 80073da:	4622      	mov	r2, r4
 80073dc:	4658      	mov	r0, fp
 80073de:	f000 fd11 	bl	8007e04 <__pow5mult>
 80073e2:	464a      	mov	r2, r9
 80073e4:	4601      	mov	r1, r0
 80073e6:	4605      	mov	r5, r0
 80073e8:	4658      	mov	r0, fp
 80073ea:	f000 fc61 	bl	8007cb0 <__multiply>
 80073ee:	4649      	mov	r1, r9
 80073f0:	9004      	str	r0, [sp, #16]
 80073f2:	4658      	mov	r0, fp
 80073f4:	f000 fb48 	bl	8007a88 <_Bfree>
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	4699      	mov	r9, r3
 80073fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073fe:	1b1a      	subs	r2, r3, r4
 8007400:	d004      	beq.n	800740c <_dtoa_r+0x78c>
 8007402:	4649      	mov	r1, r9
 8007404:	4658      	mov	r0, fp
 8007406:	f000 fcfd 	bl	8007e04 <__pow5mult>
 800740a:	4681      	mov	r9, r0
 800740c:	2101      	movs	r1, #1
 800740e:	4658      	mov	r0, fp
 8007410:	f000 fc38 	bl	8007c84 <__i2b>
 8007414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007416:	4604      	mov	r4, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 81cf 	beq.w	80077bc <_dtoa_r+0xb3c>
 800741e:	461a      	mov	r2, r3
 8007420:	4601      	mov	r1, r0
 8007422:	4658      	mov	r0, fp
 8007424:	f000 fcee 	bl	8007e04 <__pow5mult>
 8007428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800742a:	2b01      	cmp	r3, #1
 800742c:	4604      	mov	r4, r0
 800742e:	f300 8095 	bgt.w	800755c <_dtoa_r+0x8dc>
 8007432:	9b02      	ldr	r3, [sp, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 8087 	bne.w	8007548 <_dtoa_r+0x8c8>
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007440:	2b00      	cmp	r3, #0
 8007442:	f040 8089 	bne.w	8007558 <_dtoa_r+0x8d8>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800744c:	0d1b      	lsrs	r3, r3, #20
 800744e:	051b      	lsls	r3, r3, #20
 8007450:	b12b      	cbz	r3, 800745e <_dtoa_r+0x7de>
 8007452:	9b08      	ldr	r3, [sp, #32]
 8007454:	3301      	adds	r3, #1
 8007456:	9308      	str	r3, [sp, #32]
 8007458:	f108 0801 	add.w	r8, r8, #1
 800745c:	2301      	movs	r3, #1
 800745e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007462:	2b00      	cmp	r3, #0
 8007464:	f000 81b0 	beq.w	80077c8 <_dtoa_r+0xb48>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800746e:	6918      	ldr	r0, [r3, #16]
 8007470:	f000 fbbc 	bl	8007bec <__hi0bits>
 8007474:	f1c0 0020 	rsb	r0, r0, #32
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	4418      	add	r0, r3
 800747c:	f010 001f 	ands.w	r0, r0, #31
 8007480:	d077      	beq.n	8007572 <_dtoa_r+0x8f2>
 8007482:	f1c0 0320 	rsb	r3, r0, #32
 8007486:	2b04      	cmp	r3, #4
 8007488:	dd6b      	ble.n	8007562 <_dtoa_r+0x8e2>
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	f1c0 001c 	rsb	r0, r0, #28
 8007490:	4403      	add	r3, r0
 8007492:	4480      	add	r8, r0
 8007494:	4406      	add	r6, r0
 8007496:	9308      	str	r3, [sp, #32]
 8007498:	f1b8 0f00 	cmp.w	r8, #0
 800749c:	dd05      	ble.n	80074aa <_dtoa_r+0x82a>
 800749e:	4649      	mov	r1, r9
 80074a0:	4642      	mov	r2, r8
 80074a2:	4658      	mov	r0, fp
 80074a4:	f000 fd08 	bl	8007eb8 <__lshift>
 80074a8:	4681      	mov	r9, r0
 80074aa:	9b08      	ldr	r3, [sp, #32]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	dd05      	ble.n	80074bc <_dtoa_r+0x83c>
 80074b0:	4621      	mov	r1, r4
 80074b2:	461a      	mov	r2, r3
 80074b4:	4658      	mov	r0, fp
 80074b6:	f000 fcff 	bl	8007eb8 <__lshift>
 80074ba:	4604      	mov	r4, r0
 80074bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d059      	beq.n	8007576 <_dtoa_r+0x8f6>
 80074c2:	4621      	mov	r1, r4
 80074c4:	4648      	mov	r0, r9
 80074c6:	f000 fd63 	bl	8007f90 <__mcmp>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	da53      	bge.n	8007576 <_dtoa_r+0x8f6>
 80074ce:	1e7b      	subs	r3, r7, #1
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	4649      	mov	r1, r9
 80074d4:	2300      	movs	r3, #0
 80074d6:	220a      	movs	r2, #10
 80074d8:	4658      	mov	r0, fp
 80074da:	f000 faf7 	bl	8007acc <__multadd>
 80074de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074e0:	4681      	mov	r9, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 8172 	beq.w	80077cc <_dtoa_r+0xb4c>
 80074e8:	2300      	movs	r3, #0
 80074ea:	4629      	mov	r1, r5
 80074ec:	220a      	movs	r2, #10
 80074ee:	4658      	mov	r0, fp
 80074f0:	f000 faec 	bl	8007acc <__multadd>
 80074f4:	9b00      	ldr	r3, [sp, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	4605      	mov	r5, r0
 80074fa:	dc67      	bgt.n	80075cc <_dtoa_r+0x94c>
 80074fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074fe:	2b02      	cmp	r3, #2
 8007500:	dc41      	bgt.n	8007586 <_dtoa_r+0x906>
 8007502:	e063      	b.n	80075cc <_dtoa_r+0x94c>
 8007504:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007506:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800750a:	e746      	b.n	800739a <_dtoa_r+0x71a>
 800750c:	9b07      	ldr	r3, [sp, #28]
 800750e:	1e5c      	subs	r4, r3, #1
 8007510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007512:	42a3      	cmp	r3, r4
 8007514:	bfbf      	itttt	lt
 8007516:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007518:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800751a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800751c:	1ae3      	sublt	r3, r4, r3
 800751e:	bfb4      	ite	lt
 8007520:	18d2      	addlt	r2, r2, r3
 8007522:	1b1c      	subge	r4, r3, r4
 8007524:	9b07      	ldr	r3, [sp, #28]
 8007526:	bfbc      	itt	lt
 8007528:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800752a:	2400      	movlt	r4, #0
 800752c:	2b00      	cmp	r3, #0
 800752e:	bfb5      	itete	lt
 8007530:	eba8 0603 	sublt.w	r6, r8, r3
 8007534:	9b07      	ldrge	r3, [sp, #28]
 8007536:	2300      	movlt	r3, #0
 8007538:	4646      	movge	r6, r8
 800753a:	e730      	b.n	800739e <_dtoa_r+0x71e>
 800753c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800753e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007540:	4646      	mov	r6, r8
 8007542:	e735      	b.n	80073b0 <_dtoa_r+0x730>
 8007544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007546:	e75c      	b.n	8007402 <_dtoa_r+0x782>
 8007548:	2300      	movs	r3, #0
 800754a:	e788      	b.n	800745e <_dtoa_r+0x7de>
 800754c:	3fe00000 	.word	0x3fe00000
 8007550:	40240000 	.word	0x40240000
 8007554:	40140000 	.word	0x40140000
 8007558:	9b02      	ldr	r3, [sp, #8]
 800755a:	e780      	b.n	800745e <_dtoa_r+0x7de>
 800755c:	2300      	movs	r3, #0
 800755e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007560:	e782      	b.n	8007468 <_dtoa_r+0x7e8>
 8007562:	d099      	beq.n	8007498 <_dtoa_r+0x818>
 8007564:	9a08      	ldr	r2, [sp, #32]
 8007566:	331c      	adds	r3, #28
 8007568:	441a      	add	r2, r3
 800756a:	4498      	add	r8, r3
 800756c:	441e      	add	r6, r3
 800756e:	9208      	str	r2, [sp, #32]
 8007570:	e792      	b.n	8007498 <_dtoa_r+0x818>
 8007572:	4603      	mov	r3, r0
 8007574:	e7f6      	b.n	8007564 <_dtoa_r+0x8e4>
 8007576:	9b07      	ldr	r3, [sp, #28]
 8007578:	9704      	str	r7, [sp, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	dc20      	bgt.n	80075c0 <_dtoa_r+0x940>
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007582:	2b02      	cmp	r3, #2
 8007584:	dd1e      	ble.n	80075c4 <_dtoa_r+0x944>
 8007586:	9b00      	ldr	r3, [sp, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f47f aec0 	bne.w	800730e <_dtoa_r+0x68e>
 800758e:	4621      	mov	r1, r4
 8007590:	2205      	movs	r2, #5
 8007592:	4658      	mov	r0, fp
 8007594:	f000 fa9a 	bl	8007acc <__multadd>
 8007598:	4601      	mov	r1, r0
 800759a:	4604      	mov	r4, r0
 800759c:	4648      	mov	r0, r9
 800759e:	f000 fcf7 	bl	8007f90 <__mcmp>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	f77f aeb3 	ble.w	800730e <_dtoa_r+0x68e>
 80075a8:	4656      	mov	r6, sl
 80075aa:	2331      	movs	r3, #49	@ 0x31
 80075ac:	f806 3b01 	strb.w	r3, [r6], #1
 80075b0:	9b04      	ldr	r3, [sp, #16]
 80075b2:	3301      	adds	r3, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	e6ae      	b.n	8007316 <_dtoa_r+0x696>
 80075b8:	9c07      	ldr	r4, [sp, #28]
 80075ba:	9704      	str	r7, [sp, #16]
 80075bc:	4625      	mov	r5, r4
 80075be:	e7f3      	b.n	80075a8 <_dtoa_r+0x928>
 80075c0:	9b07      	ldr	r3, [sp, #28]
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 8104 	beq.w	80077d4 <_dtoa_r+0xb54>
 80075cc:	2e00      	cmp	r6, #0
 80075ce:	dd05      	ble.n	80075dc <_dtoa_r+0x95c>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4632      	mov	r2, r6
 80075d4:	4658      	mov	r0, fp
 80075d6:	f000 fc6f 	bl	8007eb8 <__lshift>
 80075da:	4605      	mov	r5, r0
 80075dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d05a      	beq.n	8007698 <_dtoa_r+0xa18>
 80075e2:	6869      	ldr	r1, [r5, #4]
 80075e4:	4658      	mov	r0, fp
 80075e6:	f000 fa0f 	bl	8007a08 <_Balloc>
 80075ea:	4606      	mov	r6, r0
 80075ec:	b928      	cbnz	r0, 80075fa <_dtoa_r+0x97a>
 80075ee:	4b84      	ldr	r3, [pc, #528]	@ (8007800 <_dtoa_r+0xb80>)
 80075f0:	4602      	mov	r2, r0
 80075f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075f6:	f7ff bb5a 	b.w	8006cae <_dtoa_r+0x2e>
 80075fa:	692a      	ldr	r2, [r5, #16]
 80075fc:	3202      	adds	r2, #2
 80075fe:	0092      	lsls	r2, r2, #2
 8007600:	f105 010c 	add.w	r1, r5, #12
 8007604:	300c      	adds	r0, #12
 8007606:	f7ff fa9e 	bl	8006b46 <memcpy>
 800760a:	2201      	movs	r2, #1
 800760c:	4631      	mov	r1, r6
 800760e:	4658      	mov	r0, fp
 8007610:	f000 fc52 	bl	8007eb8 <__lshift>
 8007614:	f10a 0301 	add.w	r3, sl, #1
 8007618:	9307      	str	r3, [sp, #28]
 800761a:	9b00      	ldr	r3, [sp, #0]
 800761c:	4453      	add	r3, sl
 800761e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007620:	9b02      	ldr	r3, [sp, #8]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	462f      	mov	r7, r5
 8007628:	930a      	str	r3, [sp, #40]	@ 0x28
 800762a:	4605      	mov	r5, r0
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	4621      	mov	r1, r4
 8007630:	3b01      	subs	r3, #1
 8007632:	4648      	mov	r0, r9
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	f7ff fa9b 	bl	8006b70 <quorem>
 800763a:	4639      	mov	r1, r7
 800763c:	9002      	str	r0, [sp, #8]
 800763e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007642:	4648      	mov	r0, r9
 8007644:	f000 fca4 	bl	8007f90 <__mcmp>
 8007648:	462a      	mov	r2, r5
 800764a:	9008      	str	r0, [sp, #32]
 800764c:	4621      	mov	r1, r4
 800764e:	4658      	mov	r0, fp
 8007650:	f000 fcba 	bl	8007fc8 <__mdiff>
 8007654:	68c2      	ldr	r2, [r0, #12]
 8007656:	4606      	mov	r6, r0
 8007658:	bb02      	cbnz	r2, 800769c <_dtoa_r+0xa1c>
 800765a:	4601      	mov	r1, r0
 800765c:	4648      	mov	r0, r9
 800765e:	f000 fc97 	bl	8007f90 <__mcmp>
 8007662:	4602      	mov	r2, r0
 8007664:	4631      	mov	r1, r6
 8007666:	4658      	mov	r0, fp
 8007668:	920e      	str	r2, [sp, #56]	@ 0x38
 800766a:	f000 fa0d 	bl	8007a88 <_Bfree>
 800766e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007672:	9e07      	ldr	r6, [sp, #28]
 8007674:	ea43 0102 	orr.w	r1, r3, r2
 8007678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800767a:	4319      	orrs	r1, r3
 800767c:	d110      	bne.n	80076a0 <_dtoa_r+0xa20>
 800767e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007682:	d029      	beq.n	80076d8 <_dtoa_r+0xa58>
 8007684:	9b08      	ldr	r3, [sp, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	dd02      	ble.n	8007690 <_dtoa_r+0xa10>
 800768a:	9b02      	ldr	r3, [sp, #8]
 800768c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007690:	9b00      	ldr	r3, [sp, #0]
 8007692:	f883 8000 	strb.w	r8, [r3]
 8007696:	e63f      	b.n	8007318 <_dtoa_r+0x698>
 8007698:	4628      	mov	r0, r5
 800769a:	e7bb      	b.n	8007614 <_dtoa_r+0x994>
 800769c:	2201      	movs	r2, #1
 800769e:	e7e1      	b.n	8007664 <_dtoa_r+0x9e4>
 80076a0:	9b08      	ldr	r3, [sp, #32]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	db04      	blt.n	80076b0 <_dtoa_r+0xa30>
 80076a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076a8:	430b      	orrs	r3, r1
 80076aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076ac:	430b      	orrs	r3, r1
 80076ae:	d120      	bne.n	80076f2 <_dtoa_r+0xa72>
 80076b0:	2a00      	cmp	r2, #0
 80076b2:	dded      	ble.n	8007690 <_dtoa_r+0xa10>
 80076b4:	4649      	mov	r1, r9
 80076b6:	2201      	movs	r2, #1
 80076b8:	4658      	mov	r0, fp
 80076ba:	f000 fbfd 	bl	8007eb8 <__lshift>
 80076be:	4621      	mov	r1, r4
 80076c0:	4681      	mov	r9, r0
 80076c2:	f000 fc65 	bl	8007f90 <__mcmp>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	dc03      	bgt.n	80076d2 <_dtoa_r+0xa52>
 80076ca:	d1e1      	bne.n	8007690 <_dtoa_r+0xa10>
 80076cc:	f018 0f01 	tst.w	r8, #1
 80076d0:	d0de      	beq.n	8007690 <_dtoa_r+0xa10>
 80076d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076d6:	d1d8      	bne.n	800768a <_dtoa_r+0xa0a>
 80076d8:	9a00      	ldr	r2, [sp, #0]
 80076da:	2339      	movs	r3, #57	@ 0x39
 80076dc:	7013      	strb	r3, [r2, #0]
 80076de:	4633      	mov	r3, r6
 80076e0:	461e      	mov	r6, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076e8:	2a39      	cmp	r2, #57	@ 0x39
 80076ea:	d052      	beq.n	8007792 <_dtoa_r+0xb12>
 80076ec:	3201      	adds	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e612      	b.n	8007318 <_dtoa_r+0x698>
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	dd07      	ble.n	8007706 <_dtoa_r+0xa86>
 80076f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076fa:	d0ed      	beq.n	80076d8 <_dtoa_r+0xa58>
 80076fc:	9a00      	ldr	r2, [sp, #0]
 80076fe:	f108 0301 	add.w	r3, r8, #1
 8007702:	7013      	strb	r3, [r2, #0]
 8007704:	e608      	b.n	8007318 <_dtoa_r+0x698>
 8007706:	9b07      	ldr	r3, [sp, #28]
 8007708:	9a07      	ldr	r2, [sp, #28]
 800770a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800770e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007710:	4293      	cmp	r3, r2
 8007712:	d028      	beq.n	8007766 <_dtoa_r+0xae6>
 8007714:	4649      	mov	r1, r9
 8007716:	2300      	movs	r3, #0
 8007718:	220a      	movs	r2, #10
 800771a:	4658      	mov	r0, fp
 800771c:	f000 f9d6 	bl	8007acc <__multadd>
 8007720:	42af      	cmp	r7, r5
 8007722:	4681      	mov	r9, r0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	f04f 020a 	mov.w	r2, #10
 800772c:	4639      	mov	r1, r7
 800772e:	4658      	mov	r0, fp
 8007730:	d107      	bne.n	8007742 <_dtoa_r+0xac2>
 8007732:	f000 f9cb 	bl	8007acc <__multadd>
 8007736:	4607      	mov	r7, r0
 8007738:	4605      	mov	r5, r0
 800773a:	9b07      	ldr	r3, [sp, #28]
 800773c:	3301      	adds	r3, #1
 800773e:	9307      	str	r3, [sp, #28]
 8007740:	e774      	b.n	800762c <_dtoa_r+0x9ac>
 8007742:	f000 f9c3 	bl	8007acc <__multadd>
 8007746:	4629      	mov	r1, r5
 8007748:	4607      	mov	r7, r0
 800774a:	2300      	movs	r3, #0
 800774c:	220a      	movs	r2, #10
 800774e:	4658      	mov	r0, fp
 8007750:	f000 f9bc 	bl	8007acc <__multadd>
 8007754:	4605      	mov	r5, r0
 8007756:	e7f0      	b.n	800773a <_dtoa_r+0xaba>
 8007758:	9b00      	ldr	r3, [sp, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfcc      	ite	gt
 800775e:	461e      	movgt	r6, r3
 8007760:	2601      	movle	r6, #1
 8007762:	4456      	add	r6, sl
 8007764:	2700      	movs	r7, #0
 8007766:	4649      	mov	r1, r9
 8007768:	2201      	movs	r2, #1
 800776a:	4658      	mov	r0, fp
 800776c:	f000 fba4 	bl	8007eb8 <__lshift>
 8007770:	4621      	mov	r1, r4
 8007772:	4681      	mov	r9, r0
 8007774:	f000 fc0c 	bl	8007f90 <__mcmp>
 8007778:	2800      	cmp	r0, #0
 800777a:	dcb0      	bgt.n	80076de <_dtoa_r+0xa5e>
 800777c:	d102      	bne.n	8007784 <_dtoa_r+0xb04>
 800777e:	f018 0f01 	tst.w	r8, #1
 8007782:	d1ac      	bne.n	80076de <_dtoa_r+0xa5e>
 8007784:	4633      	mov	r3, r6
 8007786:	461e      	mov	r6, r3
 8007788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800778c:	2a30      	cmp	r2, #48	@ 0x30
 800778e:	d0fa      	beq.n	8007786 <_dtoa_r+0xb06>
 8007790:	e5c2      	b.n	8007318 <_dtoa_r+0x698>
 8007792:	459a      	cmp	sl, r3
 8007794:	d1a4      	bne.n	80076e0 <_dtoa_r+0xa60>
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	3301      	adds	r3, #1
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	2331      	movs	r3, #49	@ 0x31
 800779e:	f88a 3000 	strb.w	r3, [sl]
 80077a2:	e5b9      	b.n	8007318 <_dtoa_r+0x698>
 80077a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007804 <_dtoa_r+0xb84>
 80077aa:	b11b      	cbz	r3, 80077b4 <_dtoa_r+0xb34>
 80077ac:	f10a 0308 	add.w	r3, sl, #8
 80077b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	4650      	mov	r0, sl
 80077b6:	b019      	add	sp, #100	@ 0x64
 80077b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077be:	2b01      	cmp	r3, #1
 80077c0:	f77f ae37 	ble.w	8007432 <_dtoa_r+0x7b2>
 80077c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c8:	2001      	movs	r0, #1
 80077ca:	e655      	b.n	8007478 <_dtoa_r+0x7f8>
 80077cc:	9b00      	ldr	r3, [sp, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f77f aed6 	ble.w	8007580 <_dtoa_r+0x900>
 80077d4:	4656      	mov	r6, sl
 80077d6:	4621      	mov	r1, r4
 80077d8:	4648      	mov	r0, r9
 80077da:	f7ff f9c9 	bl	8006b70 <quorem>
 80077de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077e2:	f806 8b01 	strb.w	r8, [r6], #1
 80077e6:	9b00      	ldr	r3, [sp, #0]
 80077e8:	eba6 020a 	sub.w	r2, r6, sl
 80077ec:	4293      	cmp	r3, r2
 80077ee:	ddb3      	ble.n	8007758 <_dtoa_r+0xad8>
 80077f0:	4649      	mov	r1, r9
 80077f2:	2300      	movs	r3, #0
 80077f4:	220a      	movs	r2, #10
 80077f6:	4658      	mov	r0, fp
 80077f8:	f000 f968 	bl	8007acc <__multadd>
 80077fc:	4681      	mov	r9, r0
 80077fe:	e7ea      	b.n	80077d6 <_dtoa_r+0xb56>
 8007800:	0800a309 	.word	0x0800a309
 8007804:	0800a28d 	.word	0x0800a28d

08007808 <_free_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4605      	mov	r5, r0
 800780c:	2900      	cmp	r1, #0
 800780e:	d041      	beq.n	8007894 <_free_r+0x8c>
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f0c      	subs	r4, r1, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfb8      	it	lt
 800781a:	18e4      	addlt	r4, r4, r3
 800781c:	f000 f8e8 	bl	80079f0 <__malloc_lock>
 8007820:	4a1d      	ldr	r2, [pc, #116]	@ (8007898 <_free_r+0x90>)
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	b933      	cbnz	r3, 8007834 <_free_r+0x2c>
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	6014      	str	r4, [r2, #0]
 800782a:	4628      	mov	r0, r5
 800782c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007830:	f000 b8e4 	b.w	80079fc <__malloc_unlock>
 8007834:	42a3      	cmp	r3, r4
 8007836:	d908      	bls.n	800784a <_free_r+0x42>
 8007838:	6820      	ldr	r0, [r4, #0]
 800783a:	1821      	adds	r1, r4, r0
 800783c:	428b      	cmp	r3, r1
 800783e:	bf01      	itttt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	1809      	addeq	r1, r1, r0
 8007846:	6021      	streq	r1, [r4, #0]
 8007848:	e7ed      	b.n	8007826 <_free_r+0x1e>
 800784a:	461a      	mov	r2, r3
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b10b      	cbz	r3, 8007854 <_free_r+0x4c>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d9fa      	bls.n	800784a <_free_r+0x42>
 8007854:	6811      	ldr	r1, [r2, #0]
 8007856:	1850      	adds	r0, r2, r1
 8007858:	42a0      	cmp	r0, r4
 800785a:	d10b      	bne.n	8007874 <_free_r+0x6c>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4401      	add	r1, r0
 8007860:	1850      	adds	r0, r2, r1
 8007862:	4283      	cmp	r3, r0
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	d1e0      	bne.n	800782a <_free_r+0x22>
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	6053      	str	r3, [r2, #4]
 800786e:	4408      	add	r0, r1
 8007870:	6010      	str	r0, [r2, #0]
 8007872:	e7da      	b.n	800782a <_free_r+0x22>
 8007874:	d902      	bls.n	800787c <_free_r+0x74>
 8007876:	230c      	movs	r3, #12
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	e7d6      	b.n	800782a <_free_r+0x22>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	1821      	adds	r1, r4, r0
 8007880:	428b      	cmp	r3, r1
 8007882:	bf04      	itt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	bf04      	itt	eq
 800788c:	1809      	addeq	r1, r1, r0
 800788e:	6021      	streq	r1, [r4, #0]
 8007890:	6054      	str	r4, [r2, #4]
 8007892:	e7ca      	b.n	800782a <_free_r+0x22>
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	bf00      	nop
 8007898:	200004b0 	.word	0x200004b0

0800789c <malloc>:
 800789c:	4b02      	ldr	r3, [pc, #8]	@ (80078a8 <malloc+0xc>)
 800789e:	4601      	mov	r1, r0
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	f000 b825 	b.w	80078f0 <_malloc_r>
 80078a6:	bf00      	nop
 80078a8:	20000020 	.word	0x20000020

080078ac <sbrk_aligned>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	4e0f      	ldr	r6, [pc, #60]	@ (80078ec <sbrk_aligned+0x40>)
 80078b0:	460c      	mov	r4, r1
 80078b2:	6831      	ldr	r1, [r6, #0]
 80078b4:	4605      	mov	r5, r0
 80078b6:	b911      	cbnz	r1, 80078be <sbrk_aligned+0x12>
 80078b8:	f001 fe0c 	bl	80094d4 <_sbrk_r>
 80078bc:	6030      	str	r0, [r6, #0]
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f001 fe07 	bl	80094d4 <_sbrk_r>
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	d103      	bne.n	80078d2 <sbrk_aligned+0x26>
 80078ca:	f04f 34ff 	mov.w	r4, #4294967295
 80078ce:	4620      	mov	r0, r4
 80078d0:	bd70      	pop	{r4, r5, r6, pc}
 80078d2:	1cc4      	adds	r4, r0, #3
 80078d4:	f024 0403 	bic.w	r4, r4, #3
 80078d8:	42a0      	cmp	r0, r4
 80078da:	d0f8      	beq.n	80078ce <sbrk_aligned+0x22>
 80078dc:	1a21      	subs	r1, r4, r0
 80078de:	4628      	mov	r0, r5
 80078e0:	f001 fdf8 	bl	80094d4 <_sbrk_r>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d1f2      	bne.n	80078ce <sbrk_aligned+0x22>
 80078e8:	e7ef      	b.n	80078ca <sbrk_aligned+0x1e>
 80078ea:	bf00      	nop
 80078ec:	200004ac 	.word	0x200004ac

080078f0 <_malloc_r>:
 80078f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	1ccd      	adds	r5, r1, #3
 80078f6:	f025 0503 	bic.w	r5, r5, #3
 80078fa:	3508      	adds	r5, #8
 80078fc:	2d0c      	cmp	r5, #12
 80078fe:	bf38      	it	cc
 8007900:	250c      	movcc	r5, #12
 8007902:	2d00      	cmp	r5, #0
 8007904:	4606      	mov	r6, r0
 8007906:	db01      	blt.n	800790c <_malloc_r+0x1c>
 8007908:	42a9      	cmp	r1, r5
 800790a:	d904      	bls.n	8007916 <_malloc_r+0x26>
 800790c:	230c      	movs	r3, #12
 800790e:	6033      	str	r3, [r6, #0]
 8007910:	2000      	movs	r0, #0
 8007912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079ec <_malloc_r+0xfc>
 800791a:	f000 f869 	bl	80079f0 <__malloc_lock>
 800791e:	f8d8 3000 	ldr.w	r3, [r8]
 8007922:	461c      	mov	r4, r3
 8007924:	bb44      	cbnz	r4, 8007978 <_malloc_r+0x88>
 8007926:	4629      	mov	r1, r5
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff ffbf 	bl	80078ac <sbrk_aligned>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	4604      	mov	r4, r0
 8007932:	d158      	bne.n	80079e6 <_malloc_r+0xf6>
 8007934:	f8d8 4000 	ldr.w	r4, [r8]
 8007938:	4627      	mov	r7, r4
 800793a:	2f00      	cmp	r7, #0
 800793c:	d143      	bne.n	80079c6 <_malloc_r+0xd6>
 800793e:	2c00      	cmp	r4, #0
 8007940:	d04b      	beq.n	80079da <_malloc_r+0xea>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	4639      	mov	r1, r7
 8007946:	4630      	mov	r0, r6
 8007948:	eb04 0903 	add.w	r9, r4, r3
 800794c:	f001 fdc2 	bl	80094d4 <_sbrk_r>
 8007950:	4581      	cmp	r9, r0
 8007952:	d142      	bne.n	80079da <_malloc_r+0xea>
 8007954:	6821      	ldr	r1, [r4, #0]
 8007956:	1a6d      	subs	r5, r5, r1
 8007958:	4629      	mov	r1, r5
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ffa6 	bl	80078ac <sbrk_aligned>
 8007960:	3001      	adds	r0, #1
 8007962:	d03a      	beq.n	80079da <_malloc_r+0xea>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	442b      	add	r3, r5
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	f8d8 3000 	ldr.w	r3, [r8]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	bb62      	cbnz	r2, 80079cc <_malloc_r+0xdc>
 8007972:	f8c8 7000 	str.w	r7, [r8]
 8007976:	e00f      	b.n	8007998 <_malloc_r+0xa8>
 8007978:	6822      	ldr	r2, [r4, #0]
 800797a:	1b52      	subs	r2, r2, r5
 800797c:	d420      	bmi.n	80079c0 <_malloc_r+0xd0>
 800797e:	2a0b      	cmp	r2, #11
 8007980:	d917      	bls.n	80079b2 <_malloc_r+0xc2>
 8007982:	1961      	adds	r1, r4, r5
 8007984:	42a3      	cmp	r3, r4
 8007986:	6025      	str	r5, [r4, #0]
 8007988:	bf18      	it	ne
 800798a:	6059      	strne	r1, [r3, #4]
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	bf08      	it	eq
 8007990:	f8c8 1000 	streq.w	r1, [r8]
 8007994:	5162      	str	r2, [r4, r5]
 8007996:	604b      	str	r3, [r1, #4]
 8007998:	4630      	mov	r0, r6
 800799a:	f000 f82f 	bl	80079fc <__malloc_unlock>
 800799e:	f104 000b 	add.w	r0, r4, #11
 80079a2:	1d23      	adds	r3, r4, #4
 80079a4:	f020 0007 	bic.w	r0, r0, #7
 80079a8:	1ac2      	subs	r2, r0, r3
 80079aa:	bf1c      	itt	ne
 80079ac:	1a1b      	subne	r3, r3, r0
 80079ae:	50a3      	strne	r3, [r4, r2]
 80079b0:	e7af      	b.n	8007912 <_malloc_r+0x22>
 80079b2:	6862      	ldr	r2, [r4, #4]
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	bf0c      	ite	eq
 80079b8:	f8c8 2000 	streq.w	r2, [r8]
 80079bc:	605a      	strne	r2, [r3, #4]
 80079be:	e7eb      	b.n	8007998 <_malloc_r+0xa8>
 80079c0:	4623      	mov	r3, r4
 80079c2:	6864      	ldr	r4, [r4, #4]
 80079c4:	e7ae      	b.n	8007924 <_malloc_r+0x34>
 80079c6:	463c      	mov	r4, r7
 80079c8:	687f      	ldr	r7, [r7, #4]
 80079ca:	e7b6      	b.n	800793a <_malloc_r+0x4a>
 80079cc:	461a      	mov	r2, r3
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	d1fb      	bne.n	80079cc <_malloc_r+0xdc>
 80079d4:	2300      	movs	r3, #0
 80079d6:	6053      	str	r3, [r2, #4]
 80079d8:	e7de      	b.n	8007998 <_malloc_r+0xa8>
 80079da:	230c      	movs	r3, #12
 80079dc:	6033      	str	r3, [r6, #0]
 80079de:	4630      	mov	r0, r6
 80079e0:	f000 f80c 	bl	80079fc <__malloc_unlock>
 80079e4:	e794      	b.n	8007910 <_malloc_r+0x20>
 80079e6:	6005      	str	r5, [r0, #0]
 80079e8:	e7d6      	b.n	8007998 <_malloc_r+0xa8>
 80079ea:	bf00      	nop
 80079ec:	200004b0 	.word	0x200004b0

080079f0 <__malloc_lock>:
 80079f0:	4801      	ldr	r0, [pc, #4]	@ (80079f8 <__malloc_lock+0x8>)
 80079f2:	f7ff b8a6 	b.w	8006b42 <__retarget_lock_acquire_recursive>
 80079f6:	bf00      	nop
 80079f8:	200004a8 	.word	0x200004a8

080079fc <__malloc_unlock>:
 80079fc:	4801      	ldr	r0, [pc, #4]	@ (8007a04 <__malloc_unlock+0x8>)
 80079fe:	f7ff b8a1 	b.w	8006b44 <__retarget_lock_release_recursive>
 8007a02:	bf00      	nop
 8007a04:	200004a8 	.word	0x200004a8

08007a08 <_Balloc>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	69c6      	ldr	r6, [r0, #28]
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	460d      	mov	r5, r1
 8007a10:	b976      	cbnz	r6, 8007a30 <_Balloc+0x28>
 8007a12:	2010      	movs	r0, #16
 8007a14:	f7ff ff42 	bl	800789c <malloc>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	61e0      	str	r0, [r4, #28]
 8007a1c:	b920      	cbnz	r0, 8007a28 <_Balloc+0x20>
 8007a1e:	4b18      	ldr	r3, [pc, #96]	@ (8007a80 <_Balloc+0x78>)
 8007a20:	4818      	ldr	r0, [pc, #96]	@ (8007a84 <_Balloc+0x7c>)
 8007a22:	216b      	movs	r1, #107	@ 0x6b
 8007a24:	f001 fd70 	bl	8009508 <__assert_func>
 8007a28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a2c:	6006      	str	r6, [r0, #0]
 8007a2e:	60c6      	str	r6, [r0, #12]
 8007a30:	69e6      	ldr	r6, [r4, #28]
 8007a32:	68f3      	ldr	r3, [r6, #12]
 8007a34:	b183      	cbz	r3, 8007a58 <_Balloc+0x50>
 8007a36:	69e3      	ldr	r3, [r4, #28]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a3e:	b9b8      	cbnz	r0, 8007a70 <_Balloc+0x68>
 8007a40:	2101      	movs	r1, #1
 8007a42:	fa01 f605 	lsl.w	r6, r1, r5
 8007a46:	1d72      	adds	r2, r6, #5
 8007a48:	0092      	lsls	r2, r2, #2
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f001 fd7a 	bl	8009544 <_calloc_r>
 8007a50:	b160      	cbz	r0, 8007a6c <_Balloc+0x64>
 8007a52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a56:	e00e      	b.n	8007a76 <_Balloc+0x6e>
 8007a58:	2221      	movs	r2, #33	@ 0x21
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f001 fd71 	bl	8009544 <_calloc_r>
 8007a62:	69e3      	ldr	r3, [r4, #28]
 8007a64:	60f0      	str	r0, [r6, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e4      	bne.n	8007a36 <_Balloc+0x2e>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	6802      	ldr	r2, [r0, #0]
 8007a72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a76:	2300      	movs	r3, #0
 8007a78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a7c:	e7f7      	b.n	8007a6e <_Balloc+0x66>
 8007a7e:	bf00      	nop
 8007a80:	0800a29a 	.word	0x0800a29a
 8007a84:	0800a31a 	.word	0x0800a31a

08007a88 <_Bfree>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	69c6      	ldr	r6, [r0, #28]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b976      	cbnz	r6, 8007ab0 <_Bfree+0x28>
 8007a92:	2010      	movs	r0, #16
 8007a94:	f7ff ff02 	bl	800789c <malloc>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	61e8      	str	r0, [r5, #28]
 8007a9c:	b920      	cbnz	r0, 8007aa8 <_Bfree+0x20>
 8007a9e:	4b09      	ldr	r3, [pc, #36]	@ (8007ac4 <_Bfree+0x3c>)
 8007aa0:	4809      	ldr	r0, [pc, #36]	@ (8007ac8 <_Bfree+0x40>)
 8007aa2:	218f      	movs	r1, #143	@ 0x8f
 8007aa4:	f001 fd30 	bl	8009508 <__assert_func>
 8007aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aac:	6006      	str	r6, [r0, #0]
 8007aae:	60c6      	str	r6, [r0, #12]
 8007ab0:	b13c      	cbz	r4, 8007ac2 <_Bfree+0x3a>
 8007ab2:	69eb      	ldr	r3, [r5, #28]
 8007ab4:	6862      	ldr	r2, [r4, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007abc:	6021      	str	r1, [r4, #0]
 8007abe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	0800a29a 	.word	0x0800a29a
 8007ac8:	0800a31a 	.word	0x0800a31a

08007acc <__multadd>:
 8007acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad0:	690d      	ldr	r5, [r1, #16]
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	461e      	mov	r6, r3
 8007ad8:	f101 0c14 	add.w	ip, r1, #20
 8007adc:	2000      	movs	r0, #0
 8007ade:	f8dc 3000 	ldr.w	r3, [ip]
 8007ae2:	b299      	uxth	r1, r3
 8007ae4:	fb02 6101 	mla	r1, r2, r1, r6
 8007ae8:	0c1e      	lsrs	r6, r3, #16
 8007aea:	0c0b      	lsrs	r3, r1, #16
 8007aec:	fb02 3306 	mla	r3, r2, r6, r3
 8007af0:	b289      	uxth	r1, r1
 8007af2:	3001      	adds	r0, #1
 8007af4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007af8:	4285      	cmp	r5, r0
 8007afa:	f84c 1b04 	str.w	r1, [ip], #4
 8007afe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b02:	dcec      	bgt.n	8007ade <__multadd+0x12>
 8007b04:	b30e      	cbz	r6, 8007b4a <__multadd+0x7e>
 8007b06:	68a3      	ldr	r3, [r4, #8]
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	dc19      	bgt.n	8007b40 <__multadd+0x74>
 8007b0c:	6861      	ldr	r1, [r4, #4]
 8007b0e:	4638      	mov	r0, r7
 8007b10:	3101      	adds	r1, #1
 8007b12:	f7ff ff79 	bl	8007a08 <_Balloc>
 8007b16:	4680      	mov	r8, r0
 8007b18:	b928      	cbnz	r0, 8007b26 <__multadd+0x5a>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b50 <__multadd+0x84>)
 8007b1e:	480d      	ldr	r0, [pc, #52]	@ (8007b54 <__multadd+0x88>)
 8007b20:	21ba      	movs	r1, #186	@ 0xba
 8007b22:	f001 fcf1 	bl	8009508 <__assert_func>
 8007b26:	6922      	ldr	r2, [r4, #16]
 8007b28:	3202      	adds	r2, #2
 8007b2a:	f104 010c 	add.w	r1, r4, #12
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	300c      	adds	r0, #12
 8007b32:	f7ff f808 	bl	8006b46 <memcpy>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7ff ffa5 	bl	8007a88 <_Bfree>
 8007b3e:	4644      	mov	r4, r8
 8007b40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b44:	3501      	adds	r5, #1
 8007b46:	615e      	str	r6, [r3, #20]
 8007b48:	6125      	str	r5, [r4, #16]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b50:	0800a309 	.word	0x0800a309
 8007b54:	0800a31a 	.word	0x0800a31a

08007b58 <__s2b>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	4615      	mov	r5, r2
 8007b60:	461f      	mov	r7, r3
 8007b62:	2209      	movs	r2, #9
 8007b64:	3308      	adds	r3, #8
 8007b66:	4606      	mov	r6, r0
 8007b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	2201      	movs	r2, #1
 8007b70:	429a      	cmp	r2, r3
 8007b72:	db09      	blt.n	8007b88 <__s2b+0x30>
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff ff47 	bl	8007a08 <_Balloc>
 8007b7a:	b940      	cbnz	r0, 8007b8e <__s2b+0x36>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4b19      	ldr	r3, [pc, #100]	@ (8007be4 <__s2b+0x8c>)
 8007b80:	4819      	ldr	r0, [pc, #100]	@ (8007be8 <__s2b+0x90>)
 8007b82:	21d3      	movs	r1, #211	@ 0xd3
 8007b84:	f001 fcc0 	bl	8009508 <__assert_func>
 8007b88:	0052      	lsls	r2, r2, #1
 8007b8a:	3101      	adds	r1, #1
 8007b8c:	e7f0      	b.n	8007b70 <__s2b+0x18>
 8007b8e:	9b08      	ldr	r3, [sp, #32]
 8007b90:	6143      	str	r3, [r0, #20]
 8007b92:	2d09      	cmp	r5, #9
 8007b94:	f04f 0301 	mov.w	r3, #1
 8007b98:	6103      	str	r3, [r0, #16]
 8007b9a:	dd16      	ble.n	8007bca <__s2b+0x72>
 8007b9c:	f104 0909 	add.w	r9, r4, #9
 8007ba0:	46c8      	mov	r8, r9
 8007ba2:	442c      	add	r4, r5
 8007ba4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ba8:	4601      	mov	r1, r0
 8007baa:	3b30      	subs	r3, #48	@ 0x30
 8007bac:	220a      	movs	r2, #10
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7ff ff8c 	bl	8007acc <__multadd>
 8007bb4:	45a0      	cmp	r8, r4
 8007bb6:	d1f5      	bne.n	8007ba4 <__s2b+0x4c>
 8007bb8:	f1a5 0408 	sub.w	r4, r5, #8
 8007bbc:	444c      	add	r4, r9
 8007bbe:	1b2d      	subs	r5, r5, r4
 8007bc0:	1963      	adds	r3, r4, r5
 8007bc2:	42bb      	cmp	r3, r7
 8007bc4:	db04      	blt.n	8007bd0 <__s2b+0x78>
 8007bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bca:	340a      	adds	r4, #10
 8007bcc:	2509      	movs	r5, #9
 8007bce:	e7f6      	b.n	8007bbe <__s2b+0x66>
 8007bd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bd4:	4601      	mov	r1, r0
 8007bd6:	3b30      	subs	r3, #48	@ 0x30
 8007bd8:	220a      	movs	r2, #10
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff ff76 	bl	8007acc <__multadd>
 8007be0:	e7ee      	b.n	8007bc0 <__s2b+0x68>
 8007be2:	bf00      	nop
 8007be4:	0800a309 	.word	0x0800a309
 8007be8:	0800a31a 	.word	0x0800a31a

08007bec <__hi0bits>:
 8007bec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	bf36      	itet	cc
 8007bf4:	0403      	lslcc	r3, r0, #16
 8007bf6:	2000      	movcs	r0, #0
 8007bf8:	2010      	movcc	r0, #16
 8007bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007bfe:	bf3c      	itt	cc
 8007c00:	021b      	lslcc	r3, r3, #8
 8007c02:	3008      	addcc	r0, #8
 8007c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c08:	bf3c      	itt	cc
 8007c0a:	011b      	lslcc	r3, r3, #4
 8007c0c:	3004      	addcc	r0, #4
 8007c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c12:	bf3c      	itt	cc
 8007c14:	009b      	lslcc	r3, r3, #2
 8007c16:	3002      	addcc	r0, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	db05      	blt.n	8007c28 <__hi0bits+0x3c>
 8007c1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c20:	f100 0001 	add.w	r0, r0, #1
 8007c24:	bf08      	it	eq
 8007c26:	2020      	moveq	r0, #32
 8007c28:	4770      	bx	lr

08007c2a <__lo0bits>:
 8007c2a:	6803      	ldr	r3, [r0, #0]
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	f013 0007 	ands.w	r0, r3, #7
 8007c32:	d00b      	beq.n	8007c4c <__lo0bits+0x22>
 8007c34:	07d9      	lsls	r1, r3, #31
 8007c36:	d421      	bmi.n	8007c7c <__lo0bits+0x52>
 8007c38:	0798      	lsls	r0, r3, #30
 8007c3a:	bf49      	itett	mi
 8007c3c:	085b      	lsrmi	r3, r3, #1
 8007c3e:	089b      	lsrpl	r3, r3, #2
 8007c40:	2001      	movmi	r0, #1
 8007c42:	6013      	strmi	r3, [r2, #0]
 8007c44:	bf5c      	itt	pl
 8007c46:	6013      	strpl	r3, [r2, #0]
 8007c48:	2002      	movpl	r0, #2
 8007c4a:	4770      	bx	lr
 8007c4c:	b299      	uxth	r1, r3
 8007c4e:	b909      	cbnz	r1, 8007c54 <__lo0bits+0x2a>
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	2010      	movs	r0, #16
 8007c54:	b2d9      	uxtb	r1, r3
 8007c56:	b909      	cbnz	r1, 8007c5c <__lo0bits+0x32>
 8007c58:	3008      	adds	r0, #8
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	0719      	lsls	r1, r3, #28
 8007c5e:	bf04      	itt	eq
 8007c60:	091b      	lsreq	r3, r3, #4
 8007c62:	3004      	addeq	r0, #4
 8007c64:	0799      	lsls	r1, r3, #30
 8007c66:	bf04      	itt	eq
 8007c68:	089b      	lsreq	r3, r3, #2
 8007c6a:	3002      	addeq	r0, #2
 8007c6c:	07d9      	lsls	r1, r3, #31
 8007c6e:	d403      	bmi.n	8007c78 <__lo0bits+0x4e>
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	f100 0001 	add.w	r0, r0, #1
 8007c76:	d003      	beq.n	8007c80 <__lo0bits+0x56>
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	4770      	bx	lr
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	4770      	bx	lr
 8007c80:	2020      	movs	r0, #32
 8007c82:	4770      	bx	lr

08007c84 <__i2b>:
 8007c84:	b510      	push	{r4, lr}
 8007c86:	460c      	mov	r4, r1
 8007c88:	2101      	movs	r1, #1
 8007c8a:	f7ff febd 	bl	8007a08 <_Balloc>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	b928      	cbnz	r0, 8007c9e <__i2b+0x1a>
 8007c92:	4b05      	ldr	r3, [pc, #20]	@ (8007ca8 <__i2b+0x24>)
 8007c94:	4805      	ldr	r0, [pc, #20]	@ (8007cac <__i2b+0x28>)
 8007c96:	f240 1145 	movw	r1, #325	@ 0x145
 8007c9a:	f001 fc35 	bl	8009508 <__assert_func>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	6144      	str	r4, [r0, #20]
 8007ca2:	6103      	str	r3, [r0, #16]
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	bf00      	nop
 8007ca8:	0800a309 	.word	0x0800a309
 8007cac:	0800a31a 	.word	0x0800a31a

08007cb0 <__multiply>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	690a      	ldr	r2, [r1, #16]
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	bfa8      	it	ge
 8007cbe:	4623      	movge	r3, r4
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	bfa4      	itt	ge
 8007cc4:	460c      	movge	r4, r1
 8007cc6:	461f      	movge	r7, r3
 8007cc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ccc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007cd0:	68a3      	ldr	r3, [r4, #8]
 8007cd2:	6861      	ldr	r1, [r4, #4]
 8007cd4:	eb0a 0609 	add.w	r6, sl, r9
 8007cd8:	42b3      	cmp	r3, r6
 8007cda:	b085      	sub	sp, #20
 8007cdc:	bfb8      	it	lt
 8007cde:	3101      	addlt	r1, #1
 8007ce0:	f7ff fe92 	bl	8007a08 <_Balloc>
 8007ce4:	b930      	cbnz	r0, 8007cf4 <__multiply+0x44>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	4b44      	ldr	r3, [pc, #272]	@ (8007dfc <__multiply+0x14c>)
 8007cea:	4845      	ldr	r0, [pc, #276]	@ (8007e00 <__multiply+0x150>)
 8007cec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007cf0:	f001 fc0a 	bl	8009508 <__assert_func>
 8007cf4:	f100 0514 	add.w	r5, r0, #20
 8007cf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4543      	cmp	r3, r8
 8007d02:	d321      	bcc.n	8007d48 <__multiply+0x98>
 8007d04:	f107 0114 	add.w	r1, r7, #20
 8007d08:	f104 0214 	add.w	r2, r4, #20
 8007d0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d14:	9302      	str	r3, [sp, #8]
 8007d16:	1b13      	subs	r3, r2, r4
 8007d18:	3b15      	subs	r3, #21
 8007d1a:	f023 0303 	bic.w	r3, r3, #3
 8007d1e:	3304      	adds	r3, #4
 8007d20:	f104 0715 	add.w	r7, r4, #21
 8007d24:	42ba      	cmp	r2, r7
 8007d26:	bf38      	it	cc
 8007d28:	2304      	movcc	r3, #4
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	9b02      	ldr	r3, [sp, #8]
 8007d2e:	9103      	str	r1, [sp, #12]
 8007d30:	428b      	cmp	r3, r1
 8007d32:	d80c      	bhi.n	8007d4e <__multiply+0x9e>
 8007d34:	2e00      	cmp	r6, #0
 8007d36:	dd03      	ble.n	8007d40 <__multiply+0x90>
 8007d38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d05b      	beq.n	8007df8 <__multiply+0x148>
 8007d40:	6106      	str	r6, [r0, #16]
 8007d42:	b005      	add	sp, #20
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	f843 2b04 	str.w	r2, [r3], #4
 8007d4c:	e7d8      	b.n	8007d00 <__multiply+0x50>
 8007d4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d52:	f1ba 0f00 	cmp.w	sl, #0
 8007d56:	d024      	beq.n	8007da2 <__multiply+0xf2>
 8007d58:	f104 0e14 	add.w	lr, r4, #20
 8007d5c:	46a9      	mov	r9, r5
 8007d5e:	f04f 0c00 	mov.w	ip, #0
 8007d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d66:	f8d9 3000 	ldr.w	r3, [r9]
 8007d6a:	fa1f fb87 	uxth.w	fp, r7
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d78:	f8d9 7000 	ldr.w	r7, [r9]
 8007d7c:	4463      	add	r3, ip
 8007d7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d82:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d90:	4572      	cmp	r2, lr
 8007d92:	f849 3b04 	str.w	r3, [r9], #4
 8007d96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d9a:	d8e2      	bhi.n	8007d62 <__multiply+0xb2>
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	f845 c003 	str.w	ip, [r5, r3]
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007da8:	3104      	adds	r1, #4
 8007daa:	f1b9 0f00 	cmp.w	r9, #0
 8007dae:	d021      	beq.n	8007df4 <__multiply+0x144>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	f104 0c14 	add.w	ip, r4, #20
 8007db6:	46ae      	mov	lr, r5
 8007db8:	f04f 0a00 	mov.w	sl, #0
 8007dbc:	f8bc b000 	ldrh.w	fp, [ip]
 8007dc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007dc4:	fb09 770b 	mla	r7, r9, fp, r7
 8007dc8:	4457      	add	r7, sl
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007dd0:	f84e 3b04 	str.w	r3, [lr], #4
 8007dd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ddc:	f8be 3000 	ldrh.w	r3, [lr]
 8007de0:	fb09 330a 	mla	r3, r9, sl, r3
 8007de4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007de8:	4562      	cmp	r2, ip
 8007dea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dee:	d8e5      	bhi.n	8007dbc <__multiply+0x10c>
 8007df0:	9f01      	ldr	r7, [sp, #4]
 8007df2:	51eb      	str	r3, [r5, r7]
 8007df4:	3504      	adds	r5, #4
 8007df6:	e799      	b.n	8007d2c <__multiply+0x7c>
 8007df8:	3e01      	subs	r6, #1
 8007dfa:	e79b      	b.n	8007d34 <__multiply+0x84>
 8007dfc:	0800a309 	.word	0x0800a309
 8007e00:	0800a31a 	.word	0x0800a31a

08007e04 <__pow5mult>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	4615      	mov	r5, r2
 8007e0a:	f012 0203 	ands.w	r2, r2, #3
 8007e0e:	4607      	mov	r7, r0
 8007e10:	460e      	mov	r6, r1
 8007e12:	d007      	beq.n	8007e24 <__pow5mult+0x20>
 8007e14:	4c25      	ldr	r4, [pc, #148]	@ (8007eac <__pow5mult+0xa8>)
 8007e16:	3a01      	subs	r2, #1
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e1e:	f7ff fe55 	bl	8007acc <__multadd>
 8007e22:	4606      	mov	r6, r0
 8007e24:	10ad      	asrs	r5, r5, #2
 8007e26:	d03d      	beq.n	8007ea4 <__pow5mult+0xa0>
 8007e28:	69fc      	ldr	r4, [r7, #28]
 8007e2a:	b97c      	cbnz	r4, 8007e4c <__pow5mult+0x48>
 8007e2c:	2010      	movs	r0, #16
 8007e2e:	f7ff fd35 	bl	800789c <malloc>
 8007e32:	4602      	mov	r2, r0
 8007e34:	61f8      	str	r0, [r7, #28]
 8007e36:	b928      	cbnz	r0, 8007e44 <__pow5mult+0x40>
 8007e38:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb0 <__pow5mult+0xac>)
 8007e3a:	481e      	ldr	r0, [pc, #120]	@ (8007eb4 <__pow5mult+0xb0>)
 8007e3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e40:	f001 fb62 	bl	8009508 <__assert_func>
 8007e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e48:	6004      	str	r4, [r0, #0]
 8007e4a:	60c4      	str	r4, [r0, #12]
 8007e4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e54:	b94c      	cbnz	r4, 8007e6a <__pow5mult+0x66>
 8007e56:	f240 2171 	movw	r1, #625	@ 0x271
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	f7ff ff12 	bl	8007c84 <__i2b>
 8007e60:	2300      	movs	r3, #0
 8007e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e66:	4604      	mov	r4, r0
 8007e68:	6003      	str	r3, [r0, #0]
 8007e6a:	f04f 0900 	mov.w	r9, #0
 8007e6e:	07eb      	lsls	r3, r5, #31
 8007e70:	d50a      	bpl.n	8007e88 <__pow5mult+0x84>
 8007e72:	4631      	mov	r1, r6
 8007e74:	4622      	mov	r2, r4
 8007e76:	4638      	mov	r0, r7
 8007e78:	f7ff ff1a 	bl	8007cb0 <__multiply>
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff fe01 	bl	8007a88 <_Bfree>
 8007e86:	4646      	mov	r6, r8
 8007e88:	106d      	asrs	r5, r5, #1
 8007e8a:	d00b      	beq.n	8007ea4 <__pow5mult+0xa0>
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	b938      	cbnz	r0, 8007ea0 <__pow5mult+0x9c>
 8007e90:	4622      	mov	r2, r4
 8007e92:	4621      	mov	r1, r4
 8007e94:	4638      	mov	r0, r7
 8007e96:	f7ff ff0b 	bl	8007cb0 <__multiply>
 8007e9a:	6020      	str	r0, [r4, #0]
 8007e9c:	f8c0 9000 	str.w	r9, [r0]
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	e7e4      	b.n	8007e6e <__pow5mult+0x6a>
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eaa:	bf00      	nop
 8007eac:	0800a374 	.word	0x0800a374
 8007eb0:	0800a29a 	.word	0x0800a29a
 8007eb4:	0800a31a 	.word	0x0800a31a

08007eb8 <__lshift>:
 8007eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	6849      	ldr	r1, [r1, #4]
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	4607      	mov	r7, r0
 8007eca:	4691      	mov	r9, r2
 8007ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ed0:	f108 0601 	add.w	r6, r8, #1
 8007ed4:	42b3      	cmp	r3, r6
 8007ed6:	db0b      	blt.n	8007ef0 <__lshift+0x38>
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff fd95 	bl	8007a08 <_Balloc>
 8007ede:	4605      	mov	r5, r0
 8007ee0:	b948      	cbnz	r0, 8007ef6 <__lshift+0x3e>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4b28      	ldr	r3, [pc, #160]	@ (8007f88 <__lshift+0xd0>)
 8007ee6:	4829      	ldr	r0, [pc, #164]	@ (8007f8c <__lshift+0xd4>)
 8007ee8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007eec:	f001 fb0c 	bl	8009508 <__assert_func>
 8007ef0:	3101      	adds	r1, #1
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	e7ee      	b.n	8007ed4 <__lshift+0x1c>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f100 0114 	add.w	r1, r0, #20
 8007efc:	f100 0210 	add.w	r2, r0, #16
 8007f00:	4618      	mov	r0, r3
 8007f02:	4553      	cmp	r3, sl
 8007f04:	db33      	blt.n	8007f6e <__lshift+0xb6>
 8007f06:	6920      	ldr	r0, [r4, #16]
 8007f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f0c:	f104 0314 	add.w	r3, r4, #20
 8007f10:	f019 091f 	ands.w	r9, r9, #31
 8007f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f1c:	d02b      	beq.n	8007f76 <__lshift+0xbe>
 8007f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f22:	468a      	mov	sl, r1
 8007f24:	2200      	movs	r2, #0
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	fa00 f009 	lsl.w	r0, r0, r9
 8007f2c:	4310      	orrs	r0, r2
 8007f2e:	f84a 0b04 	str.w	r0, [sl], #4
 8007f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f36:	459c      	cmp	ip, r3
 8007f38:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f3c:	d8f3      	bhi.n	8007f26 <__lshift+0x6e>
 8007f3e:	ebac 0304 	sub.w	r3, ip, r4
 8007f42:	3b15      	subs	r3, #21
 8007f44:	f023 0303 	bic.w	r3, r3, #3
 8007f48:	3304      	adds	r3, #4
 8007f4a:	f104 0015 	add.w	r0, r4, #21
 8007f4e:	4584      	cmp	ip, r0
 8007f50:	bf38      	it	cc
 8007f52:	2304      	movcc	r3, #4
 8007f54:	50ca      	str	r2, [r1, r3]
 8007f56:	b10a      	cbz	r2, 8007f5c <__lshift+0xa4>
 8007f58:	f108 0602 	add.w	r6, r8, #2
 8007f5c:	3e01      	subs	r6, #1
 8007f5e:	4638      	mov	r0, r7
 8007f60:	612e      	str	r6, [r5, #16]
 8007f62:	4621      	mov	r1, r4
 8007f64:	f7ff fd90 	bl	8007a88 <_Bfree>
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f72:	3301      	adds	r3, #1
 8007f74:	e7c5      	b.n	8007f02 <__lshift+0x4a>
 8007f76:	3904      	subs	r1, #4
 8007f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f80:	459c      	cmp	ip, r3
 8007f82:	d8f9      	bhi.n	8007f78 <__lshift+0xc0>
 8007f84:	e7ea      	b.n	8007f5c <__lshift+0xa4>
 8007f86:	bf00      	nop
 8007f88:	0800a309 	.word	0x0800a309
 8007f8c:	0800a31a 	.word	0x0800a31a

08007f90 <__mcmp>:
 8007f90:	690a      	ldr	r2, [r1, #16]
 8007f92:	4603      	mov	r3, r0
 8007f94:	6900      	ldr	r0, [r0, #16]
 8007f96:	1a80      	subs	r0, r0, r2
 8007f98:	b530      	push	{r4, r5, lr}
 8007f9a:	d10e      	bne.n	8007fba <__mcmp+0x2a>
 8007f9c:	3314      	adds	r3, #20
 8007f9e:	3114      	adds	r1, #20
 8007fa0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fa4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fb0:	4295      	cmp	r5, r2
 8007fb2:	d003      	beq.n	8007fbc <__mcmp+0x2c>
 8007fb4:	d205      	bcs.n	8007fc2 <__mcmp+0x32>
 8007fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fba:	bd30      	pop	{r4, r5, pc}
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d3f3      	bcc.n	8007fa8 <__mcmp+0x18>
 8007fc0:	e7fb      	b.n	8007fba <__mcmp+0x2a>
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	e7f9      	b.n	8007fba <__mcmp+0x2a>
	...

08007fc8 <__mdiff>:
 8007fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	4689      	mov	r9, r1
 8007fce:	4606      	mov	r6, r0
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4648      	mov	r0, r9
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	f7ff ffdb 	bl	8007f90 <__mcmp>
 8007fda:	1e05      	subs	r5, r0, #0
 8007fdc:	d112      	bne.n	8008004 <__mdiff+0x3c>
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7ff fd11 	bl	8007a08 <_Balloc>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	b928      	cbnz	r0, 8007ff6 <__mdiff+0x2e>
 8007fea:	4b3f      	ldr	r3, [pc, #252]	@ (80080e8 <__mdiff+0x120>)
 8007fec:	f240 2137 	movw	r1, #567	@ 0x237
 8007ff0:	483e      	ldr	r0, [pc, #248]	@ (80080ec <__mdiff+0x124>)
 8007ff2:	f001 fa89 	bl	8009508 <__assert_func>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	b003      	add	sp, #12
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	bfbc      	itt	lt
 8008006:	464b      	movlt	r3, r9
 8008008:	46a1      	movlt	r9, r4
 800800a:	4630      	mov	r0, r6
 800800c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008010:	bfba      	itte	lt
 8008012:	461c      	movlt	r4, r3
 8008014:	2501      	movlt	r5, #1
 8008016:	2500      	movge	r5, #0
 8008018:	f7ff fcf6 	bl	8007a08 <_Balloc>
 800801c:	4602      	mov	r2, r0
 800801e:	b918      	cbnz	r0, 8008028 <__mdiff+0x60>
 8008020:	4b31      	ldr	r3, [pc, #196]	@ (80080e8 <__mdiff+0x120>)
 8008022:	f240 2145 	movw	r1, #581	@ 0x245
 8008026:	e7e3      	b.n	8007ff0 <__mdiff+0x28>
 8008028:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800802c:	6926      	ldr	r6, [r4, #16]
 800802e:	60c5      	str	r5, [r0, #12]
 8008030:	f109 0310 	add.w	r3, r9, #16
 8008034:	f109 0514 	add.w	r5, r9, #20
 8008038:	f104 0e14 	add.w	lr, r4, #20
 800803c:	f100 0b14 	add.w	fp, r0, #20
 8008040:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008044:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	46d9      	mov	r9, fp
 800804c:	f04f 0c00 	mov.w	ip, #0
 8008050:	9b01      	ldr	r3, [sp, #4]
 8008052:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008056:	f853 af04 	ldr.w	sl, [r3, #4]!
 800805a:	9301      	str	r3, [sp, #4]
 800805c:	fa1f f38a 	uxth.w	r3, sl
 8008060:	4619      	mov	r1, r3
 8008062:	b283      	uxth	r3, r0
 8008064:	1acb      	subs	r3, r1, r3
 8008066:	0c00      	lsrs	r0, r0, #16
 8008068:	4463      	add	r3, ip
 800806a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800806e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008072:	b29b      	uxth	r3, r3
 8008074:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008078:	4576      	cmp	r6, lr
 800807a:	f849 3b04 	str.w	r3, [r9], #4
 800807e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008082:	d8e5      	bhi.n	8008050 <__mdiff+0x88>
 8008084:	1b33      	subs	r3, r6, r4
 8008086:	3b15      	subs	r3, #21
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	3415      	adds	r4, #21
 800808e:	3304      	adds	r3, #4
 8008090:	42a6      	cmp	r6, r4
 8008092:	bf38      	it	cc
 8008094:	2304      	movcc	r3, #4
 8008096:	441d      	add	r5, r3
 8008098:	445b      	add	r3, fp
 800809a:	461e      	mov	r6, r3
 800809c:	462c      	mov	r4, r5
 800809e:	4544      	cmp	r4, r8
 80080a0:	d30e      	bcc.n	80080c0 <__mdiff+0xf8>
 80080a2:	f108 0103 	add.w	r1, r8, #3
 80080a6:	1b49      	subs	r1, r1, r5
 80080a8:	f021 0103 	bic.w	r1, r1, #3
 80080ac:	3d03      	subs	r5, #3
 80080ae:	45a8      	cmp	r8, r5
 80080b0:	bf38      	it	cc
 80080b2:	2100      	movcc	r1, #0
 80080b4:	440b      	add	r3, r1
 80080b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ba:	b191      	cbz	r1, 80080e2 <__mdiff+0x11a>
 80080bc:	6117      	str	r7, [r2, #16]
 80080be:	e79d      	b.n	8007ffc <__mdiff+0x34>
 80080c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80080c4:	46e6      	mov	lr, ip
 80080c6:	0c08      	lsrs	r0, r1, #16
 80080c8:	fa1c fc81 	uxtah	ip, ip, r1
 80080cc:	4471      	add	r1, lr
 80080ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080d2:	b289      	uxth	r1, r1
 80080d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080d8:	f846 1b04 	str.w	r1, [r6], #4
 80080dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080e0:	e7dd      	b.n	800809e <__mdiff+0xd6>
 80080e2:	3f01      	subs	r7, #1
 80080e4:	e7e7      	b.n	80080b6 <__mdiff+0xee>
 80080e6:	bf00      	nop
 80080e8:	0800a309 	.word	0x0800a309
 80080ec:	0800a31a 	.word	0x0800a31a

080080f0 <__ulp>:
 80080f0:	b082      	sub	sp, #8
 80080f2:	ed8d 0b00 	vstr	d0, [sp]
 80080f6:	9a01      	ldr	r2, [sp, #4]
 80080f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008138 <__ulp+0x48>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008100:	2b00      	cmp	r3, #0
 8008102:	dc08      	bgt.n	8008116 <__ulp+0x26>
 8008104:	425b      	negs	r3, r3
 8008106:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800810a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800810e:	da04      	bge.n	800811a <__ulp+0x2a>
 8008110:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008114:	4113      	asrs	r3, r2
 8008116:	2200      	movs	r2, #0
 8008118:	e008      	b.n	800812c <__ulp+0x3c>
 800811a:	f1a2 0314 	sub.w	r3, r2, #20
 800811e:	2b1e      	cmp	r3, #30
 8008120:	bfda      	itte	le
 8008122:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008126:	40da      	lsrle	r2, r3
 8008128:	2201      	movgt	r2, #1
 800812a:	2300      	movs	r3, #0
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	ec41 0b10 	vmov	d0, r0, r1
 8008134:	b002      	add	sp, #8
 8008136:	4770      	bx	lr
 8008138:	7ff00000 	.word	0x7ff00000

0800813c <__b2d>:
 800813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008140:	6906      	ldr	r6, [r0, #16]
 8008142:	f100 0814 	add.w	r8, r0, #20
 8008146:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800814a:	1f37      	subs	r7, r6, #4
 800814c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008150:	4610      	mov	r0, r2
 8008152:	f7ff fd4b 	bl	8007bec <__hi0bits>
 8008156:	f1c0 0320 	rsb	r3, r0, #32
 800815a:	280a      	cmp	r0, #10
 800815c:	600b      	str	r3, [r1, #0]
 800815e:	491b      	ldr	r1, [pc, #108]	@ (80081cc <__b2d+0x90>)
 8008160:	dc15      	bgt.n	800818e <__b2d+0x52>
 8008162:	f1c0 0c0b 	rsb	ip, r0, #11
 8008166:	fa22 f30c 	lsr.w	r3, r2, ip
 800816a:	45b8      	cmp	r8, r7
 800816c:	ea43 0501 	orr.w	r5, r3, r1
 8008170:	bf34      	ite	cc
 8008172:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008176:	2300      	movcs	r3, #0
 8008178:	3015      	adds	r0, #21
 800817a:	fa02 f000 	lsl.w	r0, r2, r0
 800817e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008182:	4303      	orrs	r3, r0
 8008184:	461c      	mov	r4, r3
 8008186:	ec45 4b10 	vmov	d0, r4, r5
 800818a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800818e:	45b8      	cmp	r8, r7
 8008190:	bf3a      	itte	cc
 8008192:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008196:	f1a6 0708 	subcc.w	r7, r6, #8
 800819a:	2300      	movcs	r3, #0
 800819c:	380b      	subs	r0, #11
 800819e:	d012      	beq.n	80081c6 <__b2d+0x8a>
 80081a0:	f1c0 0120 	rsb	r1, r0, #32
 80081a4:	fa23 f401 	lsr.w	r4, r3, r1
 80081a8:	4082      	lsls	r2, r0
 80081aa:	4322      	orrs	r2, r4
 80081ac:	4547      	cmp	r7, r8
 80081ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80081b2:	bf8c      	ite	hi
 80081b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80081b8:	2200      	movls	r2, #0
 80081ba:	4083      	lsls	r3, r0
 80081bc:	40ca      	lsrs	r2, r1
 80081be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80081c2:	4313      	orrs	r3, r2
 80081c4:	e7de      	b.n	8008184 <__b2d+0x48>
 80081c6:	ea42 0501 	orr.w	r5, r2, r1
 80081ca:	e7db      	b.n	8008184 <__b2d+0x48>
 80081cc:	3ff00000 	.word	0x3ff00000

080081d0 <__d2b>:
 80081d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	460f      	mov	r7, r1
 80081d6:	2101      	movs	r1, #1
 80081d8:	ec59 8b10 	vmov	r8, r9, d0
 80081dc:	4616      	mov	r6, r2
 80081de:	f7ff fc13 	bl	8007a08 <_Balloc>
 80081e2:	4604      	mov	r4, r0
 80081e4:	b930      	cbnz	r0, 80081f4 <__d2b+0x24>
 80081e6:	4602      	mov	r2, r0
 80081e8:	4b23      	ldr	r3, [pc, #140]	@ (8008278 <__d2b+0xa8>)
 80081ea:	4824      	ldr	r0, [pc, #144]	@ (800827c <__d2b+0xac>)
 80081ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80081f0:	f001 f98a 	bl	8009508 <__assert_func>
 80081f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081fc:	b10d      	cbz	r5, 8008202 <__d2b+0x32>
 80081fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	f1b8 0300 	subs.w	r3, r8, #0
 8008208:	d023      	beq.n	8008252 <__d2b+0x82>
 800820a:	4668      	mov	r0, sp
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	f7ff fd0c 	bl	8007c2a <__lo0bits>
 8008212:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008216:	b1d0      	cbz	r0, 800824e <__d2b+0x7e>
 8008218:	f1c0 0320 	rsb	r3, r0, #32
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	430b      	orrs	r3, r1
 8008222:	40c2      	lsrs	r2, r0
 8008224:	6163      	str	r3, [r4, #20]
 8008226:	9201      	str	r2, [sp, #4]
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	61a3      	str	r3, [r4, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	bf0c      	ite	eq
 8008230:	2201      	moveq	r2, #1
 8008232:	2202      	movne	r2, #2
 8008234:	6122      	str	r2, [r4, #16]
 8008236:	b1a5      	cbz	r5, 8008262 <__d2b+0x92>
 8008238:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800823c:	4405      	add	r5, r0
 800823e:	603d      	str	r5, [r7, #0]
 8008240:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008244:	6030      	str	r0, [r6, #0]
 8008246:	4620      	mov	r0, r4
 8008248:	b003      	add	sp, #12
 800824a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800824e:	6161      	str	r1, [r4, #20]
 8008250:	e7ea      	b.n	8008228 <__d2b+0x58>
 8008252:	a801      	add	r0, sp, #4
 8008254:	f7ff fce9 	bl	8007c2a <__lo0bits>
 8008258:	9b01      	ldr	r3, [sp, #4]
 800825a:	6163      	str	r3, [r4, #20]
 800825c:	3020      	adds	r0, #32
 800825e:	2201      	movs	r2, #1
 8008260:	e7e8      	b.n	8008234 <__d2b+0x64>
 8008262:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008266:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800826a:	6038      	str	r0, [r7, #0]
 800826c:	6918      	ldr	r0, [r3, #16]
 800826e:	f7ff fcbd 	bl	8007bec <__hi0bits>
 8008272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008276:	e7e5      	b.n	8008244 <__d2b+0x74>
 8008278:	0800a309 	.word	0x0800a309
 800827c:	0800a31a 	.word	0x0800a31a

08008280 <__ratio>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b085      	sub	sp, #20
 8008286:	e9cd 1000 	strd	r1, r0, [sp]
 800828a:	a902      	add	r1, sp, #8
 800828c:	f7ff ff56 	bl	800813c <__b2d>
 8008290:	9800      	ldr	r0, [sp, #0]
 8008292:	a903      	add	r1, sp, #12
 8008294:	ec55 4b10 	vmov	r4, r5, d0
 8008298:	f7ff ff50 	bl	800813c <__b2d>
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	6919      	ldr	r1, [r3, #16]
 80082a0:	9b00      	ldr	r3, [sp, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	1ac9      	subs	r1, r1, r3
 80082a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	ec5b ab10 	vmov	sl, fp, d0
 80082b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bfce      	itee	gt
 80082b8:	462a      	movgt	r2, r5
 80082ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80082be:	465a      	movle	r2, fp
 80082c0:	462f      	mov	r7, r5
 80082c2:	46d9      	mov	r9, fp
 80082c4:	bfcc      	ite	gt
 80082c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80082ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80082ce:	464b      	mov	r3, r9
 80082d0:	4652      	mov	r2, sl
 80082d2:	4620      	mov	r0, r4
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f8 fab9 	bl	800084c <__aeabi_ddiv>
 80082da:	ec41 0b10 	vmov	d0, r0, r1
 80082de:	b005      	add	sp, #20
 80082e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080082e4 <__copybits>:
 80082e4:	3901      	subs	r1, #1
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	1149      	asrs	r1, r1, #5
 80082ea:	6914      	ldr	r4, [r2, #16]
 80082ec:	3101      	adds	r1, #1
 80082ee:	f102 0314 	add.w	r3, r2, #20
 80082f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80082f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80082fa:	1f05      	subs	r5, r0, #4
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d30c      	bcc.n	800831a <__copybits+0x36>
 8008300:	1aa3      	subs	r3, r4, r2
 8008302:	3b11      	subs	r3, #17
 8008304:	f023 0303 	bic.w	r3, r3, #3
 8008308:	3211      	adds	r2, #17
 800830a:	42a2      	cmp	r2, r4
 800830c:	bf88      	it	hi
 800830e:	2300      	movhi	r3, #0
 8008310:	4418      	add	r0, r3
 8008312:	2300      	movs	r3, #0
 8008314:	4288      	cmp	r0, r1
 8008316:	d305      	bcc.n	8008324 <__copybits+0x40>
 8008318:	bd70      	pop	{r4, r5, r6, pc}
 800831a:	f853 6b04 	ldr.w	r6, [r3], #4
 800831e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008322:	e7eb      	b.n	80082fc <__copybits+0x18>
 8008324:	f840 3b04 	str.w	r3, [r0], #4
 8008328:	e7f4      	b.n	8008314 <__copybits+0x30>

0800832a <__any_on>:
 800832a:	f100 0214 	add.w	r2, r0, #20
 800832e:	6900      	ldr	r0, [r0, #16]
 8008330:	114b      	asrs	r3, r1, #5
 8008332:	4298      	cmp	r0, r3
 8008334:	b510      	push	{r4, lr}
 8008336:	db11      	blt.n	800835c <__any_on+0x32>
 8008338:	dd0a      	ble.n	8008350 <__any_on+0x26>
 800833a:	f011 011f 	ands.w	r1, r1, #31
 800833e:	d007      	beq.n	8008350 <__any_on+0x26>
 8008340:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008344:	fa24 f001 	lsr.w	r0, r4, r1
 8008348:	fa00 f101 	lsl.w	r1, r0, r1
 800834c:	428c      	cmp	r4, r1
 800834e:	d10b      	bne.n	8008368 <__any_on+0x3e>
 8008350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008354:	4293      	cmp	r3, r2
 8008356:	d803      	bhi.n	8008360 <__any_on+0x36>
 8008358:	2000      	movs	r0, #0
 800835a:	bd10      	pop	{r4, pc}
 800835c:	4603      	mov	r3, r0
 800835e:	e7f7      	b.n	8008350 <__any_on+0x26>
 8008360:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008364:	2900      	cmp	r1, #0
 8008366:	d0f5      	beq.n	8008354 <__any_on+0x2a>
 8008368:	2001      	movs	r0, #1
 800836a:	e7f6      	b.n	800835a <__any_on+0x30>

0800836c <sulp>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4604      	mov	r4, r0
 8008370:	460d      	mov	r5, r1
 8008372:	ec45 4b10 	vmov	d0, r4, r5
 8008376:	4616      	mov	r6, r2
 8008378:	f7ff feba 	bl	80080f0 <__ulp>
 800837c:	ec51 0b10 	vmov	r0, r1, d0
 8008380:	b17e      	cbz	r6, 80083a2 <sulp+0x36>
 8008382:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008386:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800838a:	2b00      	cmp	r3, #0
 800838c:	dd09      	ble.n	80083a2 <sulp+0x36>
 800838e:	051b      	lsls	r3, r3, #20
 8008390:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008394:	2400      	movs	r4, #0
 8008396:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800839a:	4622      	mov	r2, r4
 800839c:	462b      	mov	r3, r5
 800839e:	f7f8 f92b 	bl	80005f8 <__aeabi_dmul>
 80083a2:	ec41 0b10 	vmov	d0, r0, r1
 80083a6:	bd70      	pop	{r4, r5, r6, pc}

080083a8 <_strtod_l>:
 80083a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	b09f      	sub	sp, #124	@ 0x7c
 80083ae:	460c      	mov	r4, r1
 80083b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80083b2:	2200      	movs	r2, #0
 80083b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80083b6:	9005      	str	r0, [sp, #20]
 80083b8:	f04f 0a00 	mov.w	sl, #0
 80083bc:	f04f 0b00 	mov.w	fp, #0
 80083c0:	460a      	mov	r2, r1
 80083c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80083c4:	7811      	ldrb	r1, [r2, #0]
 80083c6:	292b      	cmp	r1, #43	@ 0x2b
 80083c8:	d04a      	beq.n	8008460 <_strtod_l+0xb8>
 80083ca:	d838      	bhi.n	800843e <_strtod_l+0x96>
 80083cc:	290d      	cmp	r1, #13
 80083ce:	d832      	bhi.n	8008436 <_strtod_l+0x8e>
 80083d0:	2908      	cmp	r1, #8
 80083d2:	d832      	bhi.n	800843a <_strtod_l+0x92>
 80083d4:	2900      	cmp	r1, #0
 80083d6:	d03b      	beq.n	8008450 <_strtod_l+0xa8>
 80083d8:	2200      	movs	r2, #0
 80083da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80083dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80083de:	782a      	ldrb	r2, [r5, #0]
 80083e0:	2a30      	cmp	r2, #48	@ 0x30
 80083e2:	f040 80b3 	bne.w	800854c <_strtod_l+0x1a4>
 80083e6:	786a      	ldrb	r2, [r5, #1]
 80083e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083ec:	2a58      	cmp	r2, #88	@ 0x58
 80083ee:	d16e      	bne.n	80084ce <_strtod_l+0x126>
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	4a8e      	ldr	r2, [pc, #568]	@ (8008634 <_strtod_l+0x28c>)
 80083fc:	9805      	ldr	r0, [sp, #20]
 80083fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008400:	a919      	add	r1, sp, #100	@ 0x64
 8008402:	f001 f91b 	bl	800963c <__gethex>
 8008406:	f010 060f 	ands.w	r6, r0, #15
 800840a:	4604      	mov	r4, r0
 800840c:	d005      	beq.n	800841a <_strtod_l+0x72>
 800840e:	2e06      	cmp	r6, #6
 8008410:	d128      	bne.n	8008464 <_strtod_l+0xbc>
 8008412:	3501      	adds	r5, #1
 8008414:	2300      	movs	r3, #0
 8008416:	9519      	str	r5, [sp, #100]	@ 0x64
 8008418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800841a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800841c:	2b00      	cmp	r3, #0
 800841e:	f040 858e 	bne.w	8008f3e <_strtod_l+0xb96>
 8008422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008424:	b1cb      	cbz	r3, 800845a <_strtod_l+0xb2>
 8008426:	4652      	mov	r2, sl
 8008428:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800842c:	ec43 2b10 	vmov	d0, r2, r3
 8008430:	b01f      	add	sp, #124	@ 0x7c
 8008432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	2920      	cmp	r1, #32
 8008438:	d1ce      	bne.n	80083d8 <_strtod_l+0x30>
 800843a:	3201      	adds	r2, #1
 800843c:	e7c1      	b.n	80083c2 <_strtod_l+0x1a>
 800843e:	292d      	cmp	r1, #45	@ 0x2d
 8008440:	d1ca      	bne.n	80083d8 <_strtod_l+0x30>
 8008442:	2101      	movs	r1, #1
 8008444:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008446:	1c51      	adds	r1, r2, #1
 8008448:	9119      	str	r1, [sp, #100]	@ 0x64
 800844a:	7852      	ldrb	r2, [r2, #1]
 800844c:	2a00      	cmp	r2, #0
 800844e:	d1c5      	bne.n	80083dc <_strtod_l+0x34>
 8008450:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008452:	9419      	str	r4, [sp, #100]	@ 0x64
 8008454:	2b00      	cmp	r3, #0
 8008456:	f040 8570 	bne.w	8008f3a <_strtod_l+0xb92>
 800845a:	4652      	mov	r2, sl
 800845c:	465b      	mov	r3, fp
 800845e:	e7e5      	b.n	800842c <_strtod_l+0x84>
 8008460:	2100      	movs	r1, #0
 8008462:	e7ef      	b.n	8008444 <_strtod_l+0x9c>
 8008464:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008466:	b13a      	cbz	r2, 8008478 <_strtod_l+0xd0>
 8008468:	2135      	movs	r1, #53	@ 0x35
 800846a:	a81c      	add	r0, sp, #112	@ 0x70
 800846c:	f7ff ff3a 	bl	80082e4 <__copybits>
 8008470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008472:	9805      	ldr	r0, [sp, #20]
 8008474:	f7ff fb08 	bl	8007a88 <_Bfree>
 8008478:	3e01      	subs	r6, #1
 800847a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800847c:	2e04      	cmp	r6, #4
 800847e:	d806      	bhi.n	800848e <_strtod_l+0xe6>
 8008480:	e8df f006 	tbb	[pc, r6]
 8008484:	201d0314 	.word	0x201d0314
 8008488:	14          	.byte	0x14
 8008489:	00          	.byte	0x00
 800848a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800848e:	05e1      	lsls	r1, r4, #23
 8008490:	bf48      	it	mi
 8008492:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800849a:	0d1b      	lsrs	r3, r3, #20
 800849c:	051b      	lsls	r3, r3, #20
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1bb      	bne.n	800841a <_strtod_l+0x72>
 80084a2:	f7fe fb23 	bl	8006aec <__errno>
 80084a6:	2322      	movs	r3, #34	@ 0x22
 80084a8:	6003      	str	r3, [r0, #0]
 80084aa:	e7b6      	b.n	800841a <_strtod_l+0x72>
 80084ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80084b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80084b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80084b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084bc:	e7e7      	b.n	800848e <_strtod_l+0xe6>
 80084be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800863c <_strtod_l+0x294>
 80084c2:	e7e4      	b.n	800848e <_strtod_l+0xe6>
 80084c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80084c8:	f04f 3aff 	mov.w	sl, #4294967295
 80084cc:	e7df      	b.n	800848e <_strtod_l+0xe6>
 80084ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	2b30      	cmp	r3, #48	@ 0x30
 80084d8:	d0f9      	beq.n	80084ce <_strtod_l+0x126>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d09d      	beq.n	800841a <_strtod_l+0x72>
 80084de:	2301      	movs	r3, #1
 80084e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80084e6:	2300      	movs	r3, #0
 80084e8:	9308      	str	r3, [sp, #32]
 80084ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80084ec:	461f      	mov	r7, r3
 80084ee:	220a      	movs	r2, #10
 80084f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80084f2:	7805      	ldrb	r5, [r0, #0]
 80084f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80084f8:	b2d9      	uxtb	r1, r3
 80084fa:	2909      	cmp	r1, #9
 80084fc:	d928      	bls.n	8008550 <_strtod_l+0x1a8>
 80084fe:	494e      	ldr	r1, [pc, #312]	@ (8008638 <_strtod_l+0x290>)
 8008500:	2201      	movs	r2, #1
 8008502:	f000 ffd5 	bl	80094b0 <strncmp>
 8008506:	2800      	cmp	r0, #0
 8008508:	d032      	beq.n	8008570 <_strtod_l+0x1c8>
 800850a:	2000      	movs	r0, #0
 800850c:	462a      	mov	r2, r5
 800850e:	4681      	mov	r9, r0
 8008510:	463d      	mov	r5, r7
 8008512:	4603      	mov	r3, r0
 8008514:	2a65      	cmp	r2, #101	@ 0x65
 8008516:	d001      	beq.n	800851c <_strtod_l+0x174>
 8008518:	2a45      	cmp	r2, #69	@ 0x45
 800851a:	d114      	bne.n	8008546 <_strtod_l+0x19e>
 800851c:	b91d      	cbnz	r5, 8008526 <_strtod_l+0x17e>
 800851e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008520:	4302      	orrs	r2, r0
 8008522:	d095      	beq.n	8008450 <_strtod_l+0xa8>
 8008524:	2500      	movs	r5, #0
 8008526:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008528:	1c62      	adds	r2, r4, #1
 800852a:	9219      	str	r2, [sp, #100]	@ 0x64
 800852c:	7862      	ldrb	r2, [r4, #1]
 800852e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008530:	d077      	beq.n	8008622 <_strtod_l+0x27a>
 8008532:	2a2d      	cmp	r2, #45	@ 0x2d
 8008534:	d07b      	beq.n	800862e <_strtod_l+0x286>
 8008536:	f04f 0c00 	mov.w	ip, #0
 800853a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800853e:	2909      	cmp	r1, #9
 8008540:	f240 8082 	bls.w	8008648 <_strtod_l+0x2a0>
 8008544:	9419      	str	r4, [sp, #100]	@ 0x64
 8008546:	f04f 0800 	mov.w	r8, #0
 800854a:	e0a2      	b.n	8008692 <_strtod_l+0x2ea>
 800854c:	2300      	movs	r3, #0
 800854e:	e7c7      	b.n	80084e0 <_strtod_l+0x138>
 8008550:	2f08      	cmp	r7, #8
 8008552:	bfd5      	itete	le
 8008554:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008556:	9908      	ldrgt	r1, [sp, #32]
 8008558:	fb02 3301 	mlale	r3, r2, r1, r3
 800855c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008560:	f100 0001 	add.w	r0, r0, #1
 8008564:	bfd4      	ite	le
 8008566:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008568:	9308      	strgt	r3, [sp, #32]
 800856a:	3701      	adds	r7, #1
 800856c:	9019      	str	r0, [sp, #100]	@ 0x64
 800856e:	e7bf      	b.n	80084f0 <_strtod_l+0x148>
 8008570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008572:	1c5a      	adds	r2, r3, #1
 8008574:	9219      	str	r2, [sp, #100]	@ 0x64
 8008576:	785a      	ldrb	r2, [r3, #1]
 8008578:	b37f      	cbz	r7, 80085da <_strtod_l+0x232>
 800857a:	4681      	mov	r9, r0
 800857c:	463d      	mov	r5, r7
 800857e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008582:	2b09      	cmp	r3, #9
 8008584:	d912      	bls.n	80085ac <_strtod_l+0x204>
 8008586:	2301      	movs	r3, #1
 8008588:	e7c4      	b.n	8008514 <_strtod_l+0x16c>
 800858a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008590:	785a      	ldrb	r2, [r3, #1]
 8008592:	3001      	adds	r0, #1
 8008594:	2a30      	cmp	r2, #48	@ 0x30
 8008596:	d0f8      	beq.n	800858a <_strtod_l+0x1e2>
 8008598:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800859c:	2b08      	cmp	r3, #8
 800859e:	f200 84d3 	bhi.w	8008f48 <_strtod_l+0xba0>
 80085a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80085a6:	4681      	mov	r9, r0
 80085a8:	2000      	movs	r0, #0
 80085aa:	4605      	mov	r5, r0
 80085ac:	3a30      	subs	r2, #48	@ 0x30
 80085ae:	f100 0301 	add.w	r3, r0, #1
 80085b2:	d02a      	beq.n	800860a <_strtod_l+0x262>
 80085b4:	4499      	add	r9, r3
 80085b6:	eb00 0c05 	add.w	ip, r0, r5
 80085ba:	462b      	mov	r3, r5
 80085bc:	210a      	movs	r1, #10
 80085be:	4563      	cmp	r3, ip
 80085c0:	d10d      	bne.n	80085de <_strtod_l+0x236>
 80085c2:	1c69      	adds	r1, r5, #1
 80085c4:	4401      	add	r1, r0
 80085c6:	4428      	add	r0, r5
 80085c8:	2808      	cmp	r0, #8
 80085ca:	dc16      	bgt.n	80085fa <_strtod_l+0x252>
 80085cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80085ce:	230a      	movs	r3, #10
 80085d0:	fb03 2300 	mla	r3, r3, r0, r2
 80085d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d6:	2300      	movs	r3, #0
 80085d8:	e018      	b.n	800860c <_strtod_l+0x264>
 80085da:	4638      	mov	r0, r7
 80085dc:	e7da      	b.n	8008594 <_strtod_l+0x1ec>
 80085de:	2b08      	cmp	r3, #8
 80085e0:	f103 0301 	add.w	r3, r3, #1
 80085e4:	dc03      	bgt.n	80085ee <_strtod_l+0x246>
 80085e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80085e8:	434e      	muls	r6, r1
 80085ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80085ec:	e7e7      	b.n	80085be <_strtod_l+0x216>
 80085ee:	2b10      	cmp	r3, #16
 80085f0:	bfde      	ittt	le
 80085f2:	9e08      	ldrle	r6, [sp, #32]
 80085f4:	434e      	mulle	r6, r1
 80085f6:	9608      	strle	r6, [sp, #32]
 80085f8:	e7e1      	b.n	80085be <_strtod_l+0x216>
 80085fa:	280f      	cmp	r0, #15
 80085fc:	dceb      	bgt.n	80085d6 <_strtod_l+0x22e>
 80085fe:	9808      	ldr	r0, [sp, #32]
 8008600:	230a      	movs	r3, #10
 8008602:	fb03 2300 	mla	r3, r3, r0, r2
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	e7e5      	b.n	80085d6 <_strtod_l+0x22e>
 800860a:	4629      	mov	r1, r5
 800860c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800860e:	1c50      	adds	r0, r2, #1
 8008610:	9019      	str	r0, [sp, #100]	@ 0x64
 8008612:	7852      	ldrb	r2, [r2, #1]
 8008614:	4618      	mov	r0, r3
 8008616:	460d      	mov	r5, r1
 8008618:	e7b1      	b.n	800857e <_strtod_l+0x1d6>
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	2301      	movs	r3, #1
 8008620:	e77d      	b.n	800851e <_strtod_l+0x176>
 8008622:	f04f 0c00 	mov.w	ip, #0
 8008626:	1ca2      	adds	r2, r4, #2
 8008628:	9219      	str	r2, [sp, #100]	@ 0x64
 800862a:	78a2      	ldrb	r2, [r4, #2]
 800862c:	e785      	b.n	800853a <_strtod_l+0x192>
 800862e:	f04f 0c01 	mov.w	ip, #1
 8008632:	e7f8      	b.n	8008626 <_strtod_l+0x27e>
 8008634:	0800a488 	.word	0x0800a488
 8008638:	0800a470 	.word	0x0800a470
 800863c:	7ff00000 	.word	0x7ff00000
 8008640:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008642:	1c51      	adds	r1, r2, #1
 8008644:	9119      	str	r1, [sp, #100]	@ 0x64
 8008646:	7852      	ldrb	r2, [r2, #1]
 8008648:	2a30      	cmp	r2, #48	@ 0x30
 800864a:	d0f9      	beq.n	8008640 <_strtod_l+0x298>
 800864c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008650:	2908      	cmp	r1, #8
 8008652:	f63f af78 	bhi.w	8008546 <_strtod_l+0x19e>
 8008656:	3a30      	subs	r2, #48	@ 0x30
 8008658:	920e      	str	r2, [sp, #56]	@ 0x38
 800865a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800865c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800865e:	f04f 080a 	mov.w	r8, #10
 8008662:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008664:	1c56      	adds	r6, r2, #1
 8008666:	9619      	str	r6, [sp, #100]	@ 0x64
 8008668:	7852      	ldrb	r2, [r2, #1]
 800866a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800866e:	f1be 0f09 	cmp.w	lr, #9
 8008672:	d939      	bls.n	80086e8 <_strtod_l+0x340>
 8008674:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008676:	1a76      	subs	r6, r6, r1
 8008678:	2e08      	cmp	r6, #8
 800867a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800867e:	dc03      	bgt.n	8008688 <_strtod_l+0x2e0>
 8008680:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008682:	4588      	cmp	r8, r1
 8008684:	bfa8      	it	ge
 8008686:	4688      	movge	r8, r1
 8008688:	f1bc 0f00 	cmp.w	ip, #0
 800868c:	d001      	beq.n	8008692 <_strtod_l+0x2ea>
 800868e:	f1c8 0800 	rsb	r8, r8, #0
 8008692:	2d00      	cmp	r5, #0
 8008694:	d14e      	bne.n	8008734 <_strtod_l+0x38c>
 8008696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008698:	4308      	orrs	r0, r1
 800869a:	f47f aebe 	bne.w	800841a <_strtod_l+0x72>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f47f aed6 	bne.w	8008450 <_strtod_l+0xa8>
 80086a4:	2a69      	cmp	r2, #105	@ 0x69
 80086a6:	d028      	beq.n	80086fa <_strtod_l+0x352>
 80086a8:	dc25      	bgt.n	80086f6 <_strtod_l+0x34e>
 80086aa:	2a49      	cmp	r2, #73	@ 0x49
 80086ac:	d025      	beq.n	80086fa <_strtod_l+0x352>
 80086ae:	2a4e      	cmp	r2, #78	@ 0x4e
 80086b0:	f47f aece 	bne.w	8008450 <_strtod_l+0xa8>
 80086b4:	499b      	ldr	r1, [pc, #620]	@ (8008924 <_strtod_l+0x57c>)
 80086b6:	a819      	add	r0, sp, #100	@ 0x64
 80086b8:	f001 f9e2 	bl	8009a80 <__match>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f43f aec7 	beq.w	8008450 <_strtod_l+0xa8>
 80086c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b28      	cmp	r3, #40	@ 0x28
 80086c8:	d12e      	bne.n	8008728 <_strtod_l+0x380>
 80086ca:	4997      	ldr	r1, [pc, #604]	@ (8008928 <_strtod_l+0x580>)
 80086cc:	aa1c      	add	r2, sp, #112	@ 0x70
 80086ce:	a819      	add	r0, sp, #100	@ 0x64
 80086d0:	f001 f9ea 	bl	8009aa8 <__hexnan>
 80086d4:	2805      	cmp	r0, #5
 80086d6:	d127      	bne.n	8008728 <_strtod_l+0x380>
 80086d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80086de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80086e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80086e6:	e698      	b.n	800841a <_strtod_l+0x72>
 80086e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80086ea:	fb08 2101 	mla	r1, r8, r1, r2
 80086ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80086f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80086f4:	e7b5      	b.n	8008662 <_strtod_l+0x2ba>
 80086f6:	2a6e      	cmp	r2, #110	@ 0x6e
 80086f8:	e7da      	b.n	80086b0 <_strtod_l+0x308>
 80086fa:	498c      	ldr	r1, [pc, #560]	@ (800892c <_strtod_l+0x584>)
 80086fc:	a819      	add	r0, sp, #100	@ 0x64
 80086fe:	f001 f9bf 	bl	8009a80 <__match>
 8008702:	2800      	cmp	r0, #0
 8008704:	f43f aea4 	beq.w	8008450 <_strtod_l+0xa8>
 8008708:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800870a:	4989      	ldr	r1, [pc, #548]	@ (8008930 <_strtod_l+0x588>)
 800870c:	3b01      	subs	r3, #1
 800870e:	a819      	add	r0, sp, #100	@ 0x64
 8008710:	9319      	str	r3, [sp, #100]	@ 0x64
 8008712:	f001 f9b5 	bl	8009a80 <__match>
 8008716:	b910      	cbnz	r0, 800871e <_strtod_l+0x376>
 8008718:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800871a:	3301      	adds	r3, #1
 800871c:	9319      	str	r3, [sp, #100]	@ 0x64
 800871e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008940 <_strtod_l+0x598>
 8008722:	f04f 0a00 	mov.w	sl, #0
 8008726:	e678      	b.n	800841a <_strtod_l+0x72>
 8008728:	4882      	ldr	r0, [pc, #520]	@ (8008934 <_strtod_l+0x58c>)
 800872a:	f000 fee5 	bl	80094f8 <nan>
 800872e:	ec5b ab10 	vmov	sl, fp, d0
 8008732:	e672      	b.n	800841a <_strtod_l+0x72>
 8008734:	eba8 0309 	sub.w	r3, r8, r9
 8008738:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800873a:	9309      	str	r3, [sp, #36]	@ 0x24
 800873c:	2f00      	cmp	r7, #0
 800873e:	bf08      	it	eq
 8008740:	462f      	moveq	r7, r5
 8008742:	2d10      	cmp	r5, #16
 8008744:	462c      	mov	r4, r5
 8008746:	bfa8      	it	ge
 8008748:	2410      	movge	r4, #16
 800874a:	f7f7 fedb 	bl	8000504 <__aeabi_ui2d>
 800874e:	2d09      	cmp	r5, #9
 8008750:	4682      	mov	sl, r0
 8008752:	468b      	mov	fp, r1
 8008754:	dc13      	bgt.n	800877e <_strtod_l+0x3d6>
 8008756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008758:	2b00      	cmp	r3, #0
 800875a:	f43f ae5e 	beq.w	800841a <_strtod_l+0x72>
 800875e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008760:	dd78      	ble.n	8008854 <_strtod_l+0x4ac>
 8008762:	2b16      	cmp	r3, #22
 8008764:	dc5f      	bgt.n	8008826 <_strtod_l+0x47e>
 8008766:	4974      	ldr	r1, [pc, #464]	@ (8008938 <_strtod_l+0x590>)
 8008768:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800876c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008770:	4652      	mov	r2, sl
 8008772:	465b      	mov	r3, fp
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	4682      	mov	sl, r0
 800877a:	468b      	mov	fp, r1
 800877c:	e64d      	b.n	800841a <_strtod_l+0x72>
 800877e:	4b6e      	ldr	r3, [pc, #440]	@ (8008938 <_strtod_l+0x590>)
 8008780:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008784:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008788:	f7f7 ff36 	bl	80005f8 <__aeabi_dmul>
 800878c:	4682      	mov	sl, r0
 800878e:	9808      	ldr	r0, [sp, #32]
 8008790:	468b      	mov	fp, r1
 8008792:	f7f7 feb7 	bl	8000504 <__aeabi_ui2d>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4650      	mov	r0, sl
 800879c:	4659      	mov	r1, fp
 800879e:	f7f7 fd75 	bl	800028c <__adddf3>
 80087a2:	2d0f      	cmp	r5, #15
 80087a4:	4682      	mov	sl, r0
 80087a6:	468b      	mov	fp, r1
 80087a8:	ddd5      	ble.n	8008756 <_strtod_l+0x3ae>
 80087aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ac:	1b2c      	subs	r4, r5, r4
 80087ae:	441c      	add	r4, r3
 80087b0:	2c00      	cmp	r4, #0
 80087b2:	f340 8096 	ble.w	80088e2 <_strtod_l+0x53a>
 80087b6:	f014 030f 	ands.w	r3, r4, #15
 80087ba:	d00a      	beq.n	80087d2 <_strtod_l+0x42a>
 80087bc:	495e      	ldr	r1, [pc, #376]	@ (8008938 <_strtod_l+0x590>)
 80087be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087c2:	4652      	mov	r2, sl
 80087c4:	465b      	mov	r3, fp
 80087c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ca:	f7f7 ff15 	bl	80005f8 <__aeabi_dmul>
 80087ce:	4682      	mov	sl, r0
 80087d0:	468b      	mov	fp, r1
 80087d2:	f034 040f 	bics.w	r4, r4, #15
 80087d6:	d073      	beq.n	80088c0 <_strtod_l+0x518>
 80087d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80087dc:	dd48      	ble.n	8008870 <_strtod_l+0x4c8>
 80087de:	2400      	movs	r4, #0
 80087e0:	46a0      	mov	r8, r4
 80087e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80087e4:	46a1      	mov	r9, r4
 80087e6:	9a05      	ldr	r2, [sp, #20]
 80087e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008940 <_strtod_l+0x598>
 80087ec:	2322      	movs	r3, #34	@ 0x22
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	f04f 0a00 	mov.w	sl, #0
 80087f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f43f ae0f 	beq.w	800841a <_strtod_l+0x72>
 80087fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087fe:	9805      	ldr	r0, [sp, #20]
 8008800:	f7ff f942 	bl	8007a88 <_Bfree>
 8008804:	9805      	ldr	r0, [sp, #20]
 8008806:	4649      	mov	r1, r9
 8008808:	f7ff f93e 	bl	8007a88 <_Bfree>
 800880c:	9805      	ldr	r0, [sp, #20]
 800880e:	4641      	mov	r1, r8
 8008810:	f7ff f93a 	bl	8007a88 <_Bfree>
 8008814:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008816:	9805      	ldr	r0, [sp, #20]
 8008818:	f7ff f936 	bl	8007a88 <_Bfree>
 800881c:	9805      	ldr	r0, [sp, #20]
 800881e:	4621      	mov	r1, r4
 8008820:	f7ff f932 	bl	8007a88 <_Bfree>
 8008824:	e5f9      	b.n	800841a <_strtod_l+0x72>
 8008826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008828:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800882c:	4293      	cmp	r3, r2
 800882e:	dbbc      	blt.n	80087aa <_strtod_l+0x402>
 8008830:	4c41      	ldr	r4, [pc, #260]	@ (8008938 <_strtod_l+0x590>)
 8008832:	f1c5 050f 	rsb	r5, r5, #15
 8008836:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008842:	f7f7 fed9 	bl	80005f8 <__aeabi_dmul>
 8008846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008848:	1b5d      	subs	r5, r3, r5
 800884a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800884e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008852:	e78f      	b.n	8008774 <_strtod_l+0x3cc>
 8008854:	3316      	adds	r3, #22
 8008856:	dba8      	blt.n	80087aa <_strtod_l+0x402>
 8008858:	4b37      	ldr	r3, [pc, #220]	@ (8008938 <_strtod_l+0x590>)
 800885a:	eba9 0808 	sub.w	r8, r9, r8
 800885e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008862:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008866:	4650      	mov	r0, sl
 8008868:	4659      	mov	r1, fp
 800886a:	f7f7 ffef 	bl	800084c <__aeabi_ddiv>
 800886e:	e783      	b.n	8008778 <_strtod_l+0x3d0>
 8008870:	4b32      	ldr	r3, [pc, #200]	@ (800893c <_strtod_l+0x594>)
 8008872:	9308      	str	r3, [sp, #32]
 8008874:	2300      	movs	r3, #0
 8008876:	1124      	asrs	r4, r4, #4
 8008878:	4650      	mov	r0, sl
 800887a:	4659      	mov	r1, fp
 800887c:	461e      	mov	r6, r3
 800887e:	2c01      	cmp	r4, #1
 8008880:	dc21      	bgt.n	80088c6 <_strtod_l+0x51e>
 8008882:	b10b      	cbz	r3, 8008888 <_strtod_l+0x4e0>
 8008884:	4682      	mov	sl, r0
 8008886:	468b      	mov	fp, r1
 8008888:	492c      	ldr	r1, [pc, #176]	@ (800893c <_strtod_l+0x594>)
 800888a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800888e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008892:	4652      	mov	r2, sl
 8008894:	465b      	mov	r3, fp
 8008896:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889a:	f7f7 fead 	bl	80005f8 <__aeabi_dmul>
 800889e:	4b28      	ldr	r3, [pc, #160]	@ (8008940 <_strtod_l+0x598>)
 80088a0:	460a      	mov	r2, r1
 80088a2:	400b      	ands	r3, r1
 80088a4:	4927      	ldr	r1, [pc, #156]	@ (8008944 <_strtod_l+0x59c>)
 80088a6:	428b      	cmp	r3, r1
 80088a8:	4682      	mov	sl, r0
 80088aa:	d898      	bhi.n	80087de <_strtod_l+0x436>
 80088ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80088b0:	428b      	cmp	r3, r1
 80088b2:	bf86      	itte	hi
 80088b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008948 <_strtod_l+0x5a0>
 80088b8:	f04f 3aff 	movhi.w	sl, #4294967295
 80088bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80088c0:	2300      	movs	r3, #0
 80088c2:	9308      	str	r3, [sp, #32]
 80088c4:	e07a      	b.n	80089bc <_strtod_l+0x614>
 80088c6:	07e2      	lsls	r2, r4, #31
 80088c8:	d505      	bpl.n	80088d6 <_strtod_l+0x52e>
 80088ca:	9b08      	ldr	r3, [sp, #32]
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f7f7 fe92 	bl	80005f8 <__aeabi_dmul>
 80088d4:	2301      	movs	r3, #1
 80088d6:	9a08      	ldr	r2, [sp, #32]
 80088d8:	3208      	adds	r2, #8
 80088da:	3601      	adds	r6, #1
 80088dc:	1064      	asrs	r4, r4, #1
 80088de:	9208      	str	r2, [sp, #32]
 80088e0:	e7cd      	b.n	800887e <_strtod_l+0x4d6>
 80088e2:	d0ed      	beq.n	80088c0 <_strtod_l+0x518>
 80088e4:	4264      	negs	r4, r4
 80088e6:	f014 020f 	ands.w	r2, r4, #15
 80088ea:	d00a      	beq.n	8008902 <_strtod_l+0x55a>
 80088ec:	4b12      	ldr	r3, [pc, #72]	@ (8008938 <_strtod_l+0x590>)
 80088ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f2:	4650      	mov	r0, sl
 80088f4:	4659      	mov	r1, fp
 80088f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fa:	f7f7 ffa7 	bl	800084c <__aeabi_ddiv>
 80088fe:	4682      	mov	sl, r0
 8008900:	468b      	mov	fp, r1
 8008902:	1124      	asrs	r4, r4, #4
 8008904:	d0dc      	beq.n	80088c0 <_strtod_l+0x518>
 8008906:	2c1f      	cmp	r4, #31
 8008908:	dd20      	ble.n	800894c <_strtod_l+0x5a4>
 800890a:	2400      	movs	r4, #0
 800890c:	46a0      	mov	r8, r4
 800890e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008910:	46a1      	mov	r9, r4
 8008912:	9a05      	ldr	r2, [sp, #20]
 8008914:	2322      	movs	r3, #34	@ 0x22
 8008916:	f04f 0a00 	mov.w	sl, #0
 800891a:	f04f 0b00 	mov.w	fp, #0
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	e768      	b.n	80087f4 <_strtod_l+0x44c>
 8008922:	bf00      	nop
 8008924:	0800a261 	.word	0x0800a261
 8008928:	0800a474 	.word	0x0800a474
 800892c:	0800a259 	.word	0x0800a259
 8008930:	0800a290 	.word	0x0800a290
 8008934:	0800a61d 	.word	0x0800a61d
 8008938:	0800a3a8 	.word	0x0800a3a8
 800893c:	0800a380 	.word	0x0800a380
 8008940:	7ff00000 	.word	0x7ff00000
 8008944:	7ca00000 	.word	0x7ca00000
 8008948:	7fefffff 	.word	0x7fefffff
 800894c:	f014 0310 	ands.w	r3, r4, #16
 8008950:	bf18      	it	ne
 8008952:	236a      	movne	r3, #106	@ 0x6a
 8008954:	4ea9      	ldr	r6, [pc, #676]	@ (8008bfc <_strtod_l+0x854>)
 8008956:	9308      	str	r3, [sp, #32]
 8008958:	4650      	mov	r0, sl
 800895a:	4659      	mov	r1, fp
 800895c:	2300      	movs	r3, #0
 800895e:	07e2      	lsls	r2, r4, #31
 8008960:	d504      	bpl.n	800896c <_strtod_l+0x5c4>
 8008962:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008966:	f7f7 fe47 	bl	80005f8 <__aeabi_dmul>
 800896a:	2301      	movs	r3, #1
 800896c:	1064      	asrs	r4, r4, #1
 800896e:	f106 0608 	add.w	r6, r6, #8
 8008972:	d1f4      	bne.n	800895e <_strtod_l+0x5b6>
 8008974:	b10b      	cbz	r3, 800897a <_strtod_l+0x5d2>
 8008976:	4682      	mov	sl, r0
 8008978:	468b      	mov	fp, r1
 800897a:	9b08      	ldr	r3, [sp, #32]
 800897c:	b1b3      	cbz	r3, 80089ac <_strtod_l+0x604>
 800897e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008982:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008986:	2b00      	cmp	r3, #0
 8008988:	4659      	mov	r1, fp
 800898a:	dd0f      	ble.n	80089ac <_strtod_l+0x604>
 800898c:	2b1f      	cmp	r3, #31
 800898e:	dd55      	ble.n	8008a3c <_strtod_l+0x694>
 8008990:	2b34      	cmp	r3, #52	@ 0x34
 8008992:	bfde      	ittt	le
 8008994:	f04f 33ff 	movle.w	r3, #4294967295
 8008998:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800899c:	4093      	lslle	r3, r2
 800899e:	f04f 0a00 	mov.w	sl, #0
 80089a2:	bfcc      	ite	gt
 80089a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80089a8:	ea03 0b01 	andle.w	fp, r3, r1
 80089ac:	2200      	movs	r2, #0
 80089ae:	2300      	movs	r3, #0
 80089b0:	4650      	mov	r0, sl
 80089b2:	4659      	mov	r1, fp
 80089b4:	f7f8 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1a6      	bne.n	800890a <_strtod_l+0x562>
 80089bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80089c2:	9805      	ldr	r0, [sp, #20]
 80089c4:	462b      	mov	r3, r5
 80089c6:	463a      	mov	r2, r7
 80089c8:	f7ff f8c6 	bl	8007b58 <__s2b>
 80089cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f43f af05 	beq.w	80087de <_strtod_l+0x436>
 80089d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	eba9 0308 	sub.w	r3, r9, r8
 80089dc:	bfa8      	it	ge
 80089de:	2300      	movge	r3, #0
 80089e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80089e2:	2400      	movs	r4, #0
 80089e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80089ea:	46a0      	mov	r8, r4
 80089ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ee:	9805      	ldr	r0, [sp, #20]
 80089f0:	6859      	ldr	r1, [r3, #4]
 80089f2:	f7ff f809 	bl	8007a08 <_Balloc>
 80089f6:	4681      	mov	r9, r0
 80089f8:	2800      	cmp	r0, #0
 80089fa:	f43f aef4 	beq.w	80087e6 <_strtod_l+0x43e>
 80089fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a00:	691a      	ldr	r2, [r3, #16]
 8008a02:	3202      	adds	r2, #2
 8008a04:	f103 010c 	add.w	r1, r3, #12
 8008a08:	0092      	lsls	r2, r2, #2
 8008a0a:	300c      	adds	r0, #12
 8008a0c:	f7fe f89b 	bl	8006b46 <memcpy>
 8008a10:	ec4b ab10 	vmov	d0, sl, fp
 8008a14:	9805      	ldr	r0, [sp, #20]
 8008a16:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a18:	a91b      	add	r1, sp, #108	@ 0x6c
 8008a1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a1e:	f7ff fbd7 	bl	80081d0 <__d2b>
 8008a22:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f43f aede 	beq.w	80087e6 <_strtod_l+0x43e>
 8008a2a:	9805      	ldr	r0, [sp, #20]
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	f7ff f929 	bl	8007c84 <__i2b>
 8008a32:	4680      	mov	r8, r0
 8008a34:	b948      	cbnz	r0, 8008a4a <_strtod_l+0x6a2>
 8008a36:	f04f 0800 	mov.w	r8, #0
 8008a3a:	e6d4      	b.n	80087e6 <_strtod_l+0x43e>
 8008a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a40:	fa02 f303 	lsl.w	r3, r2, r3
 8008a44:	ea03 0a0a 	and.w	sl, r3, sl
 8008a48:	e7b0      	b.n	80089ac <_strtod_l+0x604>
 8008a4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008a4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008a4e:	2d00      	cmp	r5, #0
 8008a50:	bfab      	itete	ge
 8008a52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008a54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008a56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008a58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008a5a:	bfac      	ite	ge
 8008a5c:	18ef      	addge	r7, r5, r3
 8008a5e:	1b5e      	sublt	r6, r3, r5
 8008a60:	9b08      	ldr	r3, [sp, #32]
 8008a62:	1aed      	subs	r5, r5, r3
 8008a64:	4415      	add	r5, r2
 8008a66:	4b66      	ldr	r3, [pc, #408]	@ (8008c00 <_strtod_l+0x858>)
 8008a68:	3d01      	subs	r5, #1
 8008a6a:	429d      	cmp	r5, r3
 8008a6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008a70:	da50      	bge.n	8008b14 <_strtod_l+0x76c>
 8008a72:	1b5b      	subs	r3, r3, r5
 8008a74:	2b1f      	cmp	r3, #31
 8008a76:	eba2 0203 	sub.w	r2, r2, r3
 8008a7a:	f04f 0101 	mov.w	r1, #1
 8008a7e:	dc3d      	bgt.n	8008afc <_strtod_l+0x754>
 8008a80:	fa01 f303 	lsl.w	r3, r1, r3
 8008a84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a86:	2300      	movs	r3, #0
 8008a88:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a8a:	18bd      	adds	r5, r7, r2
 8008a8c:	9b08      	ldr	r3, [sp, #32]
 8008a8e:	42af      	cmp	r7, r5
 8008a90:	4416      	add	r6, r2
 8008a92:	441e      	add	r6, r3
 8008a94:	463b      	mov	r3, r7
 8008a96:	bfa8      	it	ge
 8008a98:	462b      	movge	r3, r5
 8008a9a:	42b3      	cmp	r3, r6
 8008a9c:	bfa8      	it	ge
 8008a9e:	4633      	movge	r3, r6
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bfc2      	ittt	gt
 8008aa4:	1aed      	subgt	r5, r5, r3
 8008aa6:	1af6      	subgt	r6, r6, r3
 8008aa8:	1aff      	subgt	r7, r7, r3
 8008aaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dd16      	ble.n	8008ade <_strtod_l+0x736>
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	9805      	ldr	r0, [sp, #20]
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f7ff f9a5 	bl	8007e04 <__pow5mult>
 8008aba:	4680      	mov	r8, r0
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d0ba      	beq.n	8008a36 <_strtod_l+0x68e>
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ac4:	9805      	ldr	r0, [sp, #20]
 8008ac6:	f7ff f8f3 	bl	8007cb0 <__multiply>
 8008aca:	900e      	str	r0, [sp, #56]	@ 0x38
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f43f ae8a 	beq.w	80087e6 <_strtod_l+0x43e>
 8008ad2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ad4:	9805      	ldr	r0, [sp, #20]
 8008ad6:	f7fe ffd7 	bl	8007a88 <_Bfree>
 8008ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	dc1d      	bgt.n	8008b1e <_strtod_l+0x776>
 8008ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd23      	ble.n	8008b30 <_strtod_l+0x788>
 8008ae8:	4649      	mov	r1, r9
 8008aea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008aec:	9805      	ldr	r0, [sp, #20]
 8008aee:	f7ff f989 	bl	8007e04 <__pow5mult>
 8008af2:	4681      	mov	r9, r0
 8008af4:	b9e0      	cbnz	r0, 8008b30 <_strtod_l+0x788>
 8008af6:	f04f 0900 	mov.w	r9, #0
 8008afa:	e674      	b.n	80087e6 <_strtod_l+0x43e>
 8008afc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b08:	35e2      	adds	r5, #226	@ 0xe2
 8008b0a:	fa01 f305 	lsl.w	r3, r1, r5
 8008b0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b12:	e7ba      	b.n	8008a8a <_strtod_l+0x6e2>
 8008b14:	2300      	movs	r3, #0
 8008b16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b18:	2301      	movs	r3, #1
 8008b1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b1c:	e7b5      	b.n	8008a8a <_strtod_l+0x6e2>
 8008b1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b20:	9805      	ldr	r0, [sp, #20]
 8008b22:	462a      	mov	r2, r5
 8008b24:	f7ff f9c8 	bl	8007eb8 <__lshift>
 8008b28:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d1d9      	bne.n	8008ae2 <_strtod_l+0x73a>
 8008b2e:	e65a      	b.n	80087e6 <_strtod_l+0x43e>
 8008b30:	2e00      	cmp	r6, #0
 8008b32:	dd07      	ble.n	8008b44 <_strtod_l+0x79c>
 8008b34:	4649      	mov	r1, r9
 8008b36:	9805      	ldr	r0, [sp, #20]
 8008b38:	4632      	mov	r2, r6
 8008b3a:	f7ff f9bd 	bl	8007eb8 <__lshift>
 8008b3e:	4681      	mov	r9, r0
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0d8      	beq.n	8008af6 <_strtod_l+0x74e>
 8008b44:	2f00      	cmp	r7, #0
 8008b46:	dd08      	ble.n	8008b5a <_strtod_l+0x7b2>
 8008b48:	4641      	mov	r1, r8
 8008b4a:	9805      	ldr	r0, [sp, #20]
 8008b4c:	463a      	mov	r2, r7
 8008b4e:	f7ff f9b3 	bl	8007eb8 <__lshift>
 8008b52:	4680      	mov	r8, r0
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f43f ae46 	beq.w	80087e6 <_strtod_l+0x43e>
 8008b5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b5c:	9805      	ldr	r0, [sp, #20]
 8008b5e:	464a      	mov	r2, r9
 8008b60:	f7ff fa32 	bl	8007fc8 <__mdiff>
 8008b64:	4604      	mov	r4, r0
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f ae3d 	beq.w	80087e6 <_strtod_l+0x43e>
 8008b6c:	68c3      	ldr	r3, [r0, #12]
 8008b6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b70:	2300      	movs	r3, #0
 8008b72:	60c3      	str	r3, [r0, #12]
 8008b74:	4641      	mov	r1, r8
 8008b76:	f7ff fa0b 	bl	8007f90 <__mcmp>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	da46      	bge.n	8008c0c <_strtod_l+0x864>
 8008b7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b80:	ea53 030a 	orrs.w	r3, r3, sl
 8008b84:	d16c      	bne.n	8008c60 <_strtod_l+0x8b8>
 8008b86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d168      	bne.n	8008c60 <_strtod_l+0x8b8>
 8008b8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b92:	0d1b      	lsrs	r3, r3, #20
 8008b94:	051b      	lsls	r3, r3, #20
 8008b96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b9a:	d961      	bls.n	8008c60 <_strtod_l+0x8b8>
 8008b9c:	6963      	ldr	r3, [r4, #20]
 8008b9e:	b913      	cbnz	r3, 8008ba6 <_strtod_l+0x7fe>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	dd5c      	ble.n	8008c60 <_strtod_l+0x8b8>
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	2201      	movs	r2, #1
 8008baa:	9805      	ldr	r0, [sp, #20]
 8008bac:	f7ff f984 	bl	8007eb8 <__lshift>
 8008bb0:	4641      	mov	r1, r8
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	f7ff f9ec 	bl	8007f90 <__mcmp>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	dd51      	ble.n	8008c60 <_strtod_l+0x8b8>
 8008bbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bc0:	9a08      	ldr	r2, [sp, #32]
 8008bc2:	0d1b      	lsrs	r3, r3, #20
 8008bc4:	051b      	lsls	r3, r3, #20
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	d06b      	beq.n	8008ca2 <_strtod_l+0x8fa>
 8008bca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008bce:	d868      	bhi.n	8008ca2 <_strtod_l+0x8fa>
 8008bd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008bd4:	f67f ae9d 	bls.w	8008912 <_strtod_l+0x56a>
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c04 <_strtod_l+0x85c>)
 8008bda:	4650      	mov	r0, sl
 8008bdc:	4659      	mov	r1, fp
 8008bde:	2200      	movs	r2, #0
 8008be0:	f7f7 fd0a 	bl	80005f8 <__aeabi_dmul>
 8008be4:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <_strtod_l+0x860>)
 8008be6:	400b      	ands	r3, r1
 8008be8:	4682      	mov	sl, r0
 8008bea:	468b      	mov	fp, r1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f47f ae05 	bne.w	80087fc <_strtod_l+0x454>
 8008bf2:	9a05      	ldr	r2, [sp, #20]
 8008bf4:	2322      	movs	r3, #34	@ 0x22
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	e600      	b.n	80087fc <_strtod_l+0x454>
 8008bfa:	bf00      	nop
 8008bfc:	0800a4a0 	.word	0x0800a4a0
 8008c00:	fffffc02 	.word	0xfffffc02
 8008c04:	39500000 	.word	0x39500000
 8008c08:	7ff00000 	.word	0x7ff00000
 8008c0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c10:	d165      	bne.n	8008cde <_strtod_l+0x936>
 8008c12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c18:	b35a      	cbz	r2, 8008c72 <_strtod_l+0x8ca>
 8008c1a:	4a9f      	ldr	r2, [pc, #636]	@ (8008e98 <_strtod_l+0xaf0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d12b      	bne.n	8008c78 <_strtod_l+0x8d0>
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	4651      	mov	r1, sl
 8008c24:	b303      	cbz	r3, 8008c68 <_strtod_l+0x8c0>
 8008c26:	4b9d      	ldr	r3, [pc, #628]	@ (8008e9c <_strtod_l+0xaf4>)
 8008c28:	465a      	mov	r2, fp
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c30:	f04f 32ff 	mov.w	r2, #4294967295
 8008c34:	d81b      	bhi.n	8008c6e <_strtod_l+0x8c6>
 8008c36:	0d1b      	lsrs	r3, r3, #20
 8008c38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c40:	4299      	cmp	r1, r3
 8008c42:	d119      	bne.n	8008c78 <_strtod_l+0x8d0>
 8008c44:	4b96      	ldr	r3, [pc, #600]	@ (8008ea0 <_strtod_l+0xaf8>)
 8008c46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d102      	bne.n	8008c52 <_strtod_l+0x8aa>
 8008c4c:	3101      	adds	r1, #1
 8008c4e:	f43f adca 	beq.w	80087e6 <_strtod_l+0x43e>
 8008c52:	4b92      	ldr	r3, [pc, #584]	@ (8008e9c <_strtod_l+0xaf4>)
 8008c54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c56:	401a      	ands	r2, r3
 8008c58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008c5c:	f04f 0a00 	mov.w	sl, #0
 8008c60:	9b08      	ldr	r3, [sp, #32]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1b8      	bne.n	8008bd8 <_strtod_l+0x830>
 8008c66:	e5c9      	b.n	80087fc <_strtod_l+0x454>
 8008c68:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6c:	e7e8      	b.n	8008c40 <_strtod_l+0x898>
 8008c6e:	4613      	mov	r3, r2
 8008c70:	e7e6      	b.n	8008c40 <_strtod_l+0x898>
 8008c72:	ea53 030a 	orrs.w	r3, r3, sl
 8008c76:	d0a1      	beq.n	8008bbc <_strtod_l+0x814>
 8008c78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c7a:	b1db      	cbz	r3, 8008cb4 <_strtod_l+0x90c>
 8008c7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c7e:	4213      	tst	r3, r2
 8008c80:	d0ee      	beq.n	8008c60 <_strtod_l+0x8b8>
 8008c82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c84:	9a08      	ldr	r2, [sp, #32]
 8008c86:	4650      	mov	r0, sl
 8008c88:	4659      	mov	r1, fp
 8008c8a:	b1bb      	cbz	r3, 8008cbc <_strtod_l+0x914>
 8008c8c:	f7ff fb6e 	bl	800836c <sulp>
 8008c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c94:	ec53 2b10 	vmov	r2, r3, d0
 8008c98:	f7f7 faf8 	bl	800028c <__adddf3>
 8008c9c:	4682      	mov	sl, r0
 8008c9e:	468b      	mov	fp, r1
 8008ca0:	e7de      	b.n	8008c60 <_strtod_l+0x8b8>
 8008ca2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008ca6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008caa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cae:	f04f 3aff 	mov.w	sl, #4294967295
 8008cb2:	e7d5      	b.n	8008c60 <_strtod_l+0x8b8>
 8008cb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cb6:	ea13 0f0a 	tst.w	r3, sl
 8008cba:	e7e1      	b.n	8008c80 <_strtod_l+0x8d8>
 8008cbc:	f7ff fb56 	bl	800836c <sulp>
 8008cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cc4:	ec53 2b10 	vmov	r2, r3, d0
 8008cc8:	f7f7 fade 	bl	8000288 <__aeabi_dsub>
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	468b      	mov	fp, r1
 8008cd4:	f7f7 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d0c1      	beq.n	8008c60 <_strtod_l+0x8b8>
 8008cdc:	e619      	b.n	8008912 <_strtod_l+0x56a>
 8008cde:	4641      	mov	r1, r8
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f7ff facd 	bl	8008280 <__ratio>
 8008ce6:	ec57 6b10 	vmov	r6, r7, d0
 8008cea:	2200      	movs	r2, #0
 8008cec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 fefc 	bl	8000af0 <__aeabi_dcmple>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d06f      	beq.n	8008ddc <_strtod_l+0xa34>
 8008cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d17a      	bne.n	8008df8 <_strtod_l+0xa50>
 8008d02:	f1ba 0f00 	cmp.w	sl, #0
 8008d06:	d158      	bne.n	8008dba <_strtod_l+0xa12>
 8008d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d15a      	bne.n	8008dc8 <_strtod_l+0xa20>
 8008d12:	4b64      	ldr	r3, [pc, #400]	@ (8008ea4 <_strtod_l+0xafc>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	4630      	mov	r0, r6
 8008d18:	4639      	mov	r1, r7
 8008d1a:	f7f7 fedf 	bl	8000adc <__aeabi_dcmplt>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d159      	bne.n	8008dd6 <_strtod_l+0xa2e>
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	4b60      	ldr	r3, [pc, #384]	@ (8008ea8 <_strtod_l+0xb00>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f7f7 fc65 	bl	80005f8 <__aeabi_dmul>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460f      	mov	r7, r1
 8008d32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d36:	9606      	str	r6, [sp, #24]
 8008d38:	9307      	str	r3, [sp, #28]
 8008d3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d3e:	4d57      	ldr	r5, [pc, #348]	@ (8008e9c <_strtod_l+0xaf4>)
 8008d40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d46:	401d      	ands	r5, r3
 8008d48:	4b58      	ldr	r3, [pc, #352]	@ (8008eac <_strtod_l+0xb04>)
 8008d4a:	429d      	cmp	r5, r3
 8008d4c:	f040 80b2 	bne.w	8008eb4 <_strtod_l+0xb0c>
 8008d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008d56:	ec4b ab10 	vmov	d0, sl, fp
 8008d5a:	f7ff f9c9 	bl	80080f0 <__ulp>
 8008d5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d62:	ec51 0b10 	vmov	r0, r1, d0
 8008d66:	f7f7 fc47 	bl	80005f8 <__aeabi_dmul>
 8008d6a:	4652      	mov	r2, sl
 8008d6c:	465b      	mov	r3, fp
 8008d6e:	f7f7 fa8d 	bl	800028c <__adddf3>
 8008d72:	460b      	mov	r3, r1
 8008d74:	4949      	ldr	r1, [pc, #292]	@ (8008e9c <_strtod_l+0xaf4>)
 8008d76:	4a4e      	ldr	r2, [pc, #312]	@ (8008eb0 <_strtod_l+0xb08>)
 8008d78:	4019      	ands	r1, r3
 8008d7a:	4291      	cmp	r1, r2
 8008d7c:	4682      	mov	sl, r0
 8008d7e:	d942      	bls.n	8008e06 <_strtod_l+0xa5e>
 8008d80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d82:	4b47      	ldr	r3, [pc, #284]	@ (8008ea0 <_strtod_l+0xaf8>)
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d103      	bne.n	8008d90 <_strtod_l+0x9e8>
 8008d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	f43f ad2b 	beq.w	80087e6 <_strtod_l+0x43e>
 8008d90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008ea0 <_strtod_l+0xaf8>
 8008d94:	f04f 3aff 	mov.w	sl, #4294967295
 8008d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d9a:	9805      	ldr	r0, [sp, #20]
 8008d9c:	f7fe fe74 	bl	8007a88 <_Bfree>
 8008da0:	9805      	ldr	r0, [sp, #20]
 8008da2:	4649      	mov	r1, r9
 8008da4:	f7fe fe70 	bl	8007a88 <_Bfree>
 8008da8:	9805      	ldr	r0, [sp, #20]
 8008daa:	4641      	mov	r1, r8
 8008dac:	f7fe fe6c 	bl	8007a88 <_Bfree>
 8008db0:	9805      	ldr	r0, [sp, #20]
 8008db2:	4621      	mov	r1, r4
 8008db4:	f7fe fe68 	bl	8007a88 <_Bfree>
 8008db8:	e618      	b.n	80089ec <_strtod_l+0x644>
 8008dba:	f1ba 0f01 	cmp.w	sl, #1
 8008dbe:	d103      	bne.n	8008dc8 <_strtod_l+0xa20>
 8008dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f43f ada5 	beq.w	8008912 <_strtod_l+0x56a>
 8008dc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008e78 <_strtod_l+0xad0>
 8008dcc:	4f35      	ldr	r7, [pc, #212]	@ (8008ea4 <_strtod_l+0xafc>)
 8008dce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	e7b1      	b.n	8008d3a <_strtod_l+0x992>
 8008dd6:	4f34      	ldr	r7, [pc, #208]	@ (8008ea8 <_strtod_l+0xb00>)
 8008dd8:	2600      	movs	r6, #0
 8008dda:	e7aa      	b.n	8008d32 <_strtod_l+0x98a>
 8008ddc:	4b32      	ldr	r3, [pc, #200]	@ (8008ea8 <_strtod_l+0xb00>)
 8008dde:	4630      	mov	r0, r6
 8008de0:	4639      	mov	r1, r7
 8008de2:	2200      	movs	r2, #0
 8008de4:	f7f7 fc08 	bl	80005f8 <__aeabi_dmul>
 8008de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dea:	4606      	mov	r6, r0
 8008dec:	460f      	mov	r7, r1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d09f      	beq.n	8008d32 <_strtod_l+0x98a>
 8008df2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008df6:	e7a0      	b.n	8008d3a <_strtod_l+0x992>
 8008df8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008e80 <_strtod_l+0xad8>
 8008dfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e00:	ec57 6b17 	vmov	r6, r7, d7
 8008e04:	e799      	b.n	8008d3a <_strtod_l+0x992>
 8008e06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e0a:	9b08      	ldr	r3, [sp, #32]
 8008e0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1c1      	bne.n	8008d98 <_strtod_l+0x9f0>
 8008e14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e18:	0d1b      	lsrs	r3, r3, #20
 8008e1a:	051b      	lsls	r3, r3, #20
 8008e1c:	429d      	cmp	r5, r3
 8008e1e:	d1bb      	bne.n	8008d98 <_strtod_l+0x9f0>
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	f7f7 ff48 	bl	8000cb8 <__aeabi_d2lz>
 8008e28:	f7f7 fbb8 	bl	800059c <__aeabi_l2d>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fa28 	bl	8000288 <__aeabi_dsub>
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e46:	ea46 060a 	orr.w	r6, r6, sl
 8008e4a:	431e      	orrs	r6, r3
 8008e4c:	d06f      	beq.n	8008f2e <_strtod_l+0xb86>
 8008e4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e88 <_strtod_l+0xae0>)
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	f7f7 fe42 	bl	8000adc <__aeabi_dcmplt>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f47f accf 	bne.w	80087fc <_strtod_l+0x454>
 8008e5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008e90 <_strtod_l+0xae8>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e68:	f7f7 fe56 	bl	8000b18 <__aeabi_dcmpgt>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d093      	beq.n	8008d98 <_strtod_l+0x9f0>
 8008e70:	e4c4      	b.n	80087fc <_strtod_l+0x454>
 8008e72:	bf00      	nop
 8008e74:	f3af 8000 	nop.w
 8008e78:	00000000 	.word	0x00000000
 8008e7c:	bff00000 	.word	0xbff00000
 8008e80:	00000000 	.word	0x00000000
 8008e84:	3ff00000 	.word	0x3ff00000
 8008e88:	94a03595 	.word	0x94a03595
 8008e8c:	3fdfffff 	.word	0x3fdfffff
 8008e90:	35afe535 	.word	0x35afe535
 8008e94:	3fe00000 	.word	0x3fe00000
 8008e98:	000fffff 	.word	0x000fffff
 8008e9c:	7ff00000 	.word	0x7ff00000
 8008ea0:	7fefffff 	.word	0x7fefffff
 8008ea4:	3ff00000 	.word	0x3ff00000
 8008ea8:	3fe00000 	.word	0x3fe00000
 8008eac:	7fe00000 	.word	0x7fe00000
 8008eb0:	7c9fffff 	.word	0x7c9fffff
 8008eb4:	9b08      	ldr	r3, [sp, #32]
 8008eb6:	b323      	cbz	r3, 8008f02 <_strtod_l+0xb5a>
 8008eb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008ebc:	d821      	bhi.n	8008f02 <_strtod_l+0xb5a>
 8008ebe:	a328      	add	r3, pc, #160	@ (adr r3, 8008f60 <_strtod_l+0xbb8>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 fe12 	bl	8000af0 <__aeabi_dcmple>
 8008ecc:	b1a0      	cbz	r0, 8008ef8 <_strtod_l+0xb50>
 8008ece:	4639      	mov	r1, r7
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f7f7 fe69 	bl	8000ba8 <__aeabi_d2uiz>
 8008ed6:	2801      	cmp	r0, #1
 8008ed8:	bf38      	it	cc
 8008eda:	2001      	movcc	r0, #1
 8008edc:	f7f7 fb12 	bl	8000504 <__aeabi_ui2d>
 8008ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	b9fb      	cbnz	r3, 8008f28 <_strtod_l+0xb80>
 8008ee8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008eec:	9014      	str	r0, [sp, #80]	@ 0x50
 8008eee:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ef0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008ef4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ef8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008efa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008efe:	1b5b      	subs	r3, r3, r5
 8008f00:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008f06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f0a:	f7ff f8f1 	bl	80080f0 <__ulp>
 8008f0e:	4650      	mov	r0, sl
 8008f10:	ec53 2b10 	vmov	r2, r3, d0
 8008f14:	4659      	mov	r1, fp
 8008f16:	f7f7 fb6f 	bl	80005f8 <__aeabi_dmul>
 8008f1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f1e:	f7f7 f9b5 	bl	800028c <__adddf3>
 8008f22:	4682      	mov	sl, r0
 8008f24:	468b      	mov	fp, r1
 8008f26:	e770      	b.n	8008e0a <_strtod_l+0xa62>
 8008f28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f2c:	e7e0      	b.n	8008ef0 <_strtod_l+0xb48>
 8008f2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f68 <_strtod_l+0xbc0>)
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f7f7 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8008f38:	e798      	b.n	8008e6c <_strtod_l+0xac4>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	f7ff ba6d 	b.w	8008422 <_strtod_l+0x7a>
 8008f48:	2a65      	cmp	r2, #101	@ 0x65
 8008f4a:	f43f ab66 	beq.w	800861a <_strtod_l+0x272>
 8008f4e:	2a45      	cmp	r2, #69	@ 0x45
 8008f50:	f43f ab63 	beq.w	800861a <_strtod_l+0x272>
 8008f54:	2301      	movs	r3, #1
 8008f56:	f7ff bb9e 	b.w	8008696 <_strtod_l+0x2ee>
 8008f5a:	bf00      	nop
 8008f5c:	f3af 8000 	nop.w
 8008f60:	ffc00000 	.word	0xffc00000
 8008f64:	41dfffff 	.word	0x41dfffff
 8008f68:	94a03595 	.word	0x94a03595
 8008f6c:	3fcfffff 	.word	0x3fcfffff

08008f70 <_strtod_r>:
 8008f70:	4b01      	ldr	r3, [pc, #4]	@ (8008f78 <_strtod_r+0x8>)
 8008f72:	f7ff ba19 	b.w	80083a8 <_strtod_l>
 8008f76:	bf00      	nop
 8008f78:	20000070 	.word	0x20000070

08008f7c <_strtol_l.constprop.0>:
 8008f7c:	2b24      	cmp	r3, #36	@ 0x24
 8008f7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f82:	4686      	mov	lr, r0
 8008f84:	4690      	mov	r8, r2
 8008f86:	d801      	bhi.n	8008f8c <_strtol_l.constprop.0+0x10>
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d106      	bne.n	8008f9a <_strtol_l.constprop.0+0x1e>
 8008f8c:	f7fd fdae 	bl	8006aec <__errno>
 8008f90:	2316      	movs	r3, #22
 8008f92:	6003      	str	r3, [r0, #0]
 8008f94:	2000      	movs	r0, #0
 8008f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9a:	4834      	ldr	r0, [pc, #208]	@ (800906c <_strtol_l.constprop.0+0xf0>)
 8008f9c:	460d      	mov	r5, r1
 8008f9e:	462a      	mov	r2, r5
 8008fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fa4:	5d06      	ldrb	r6, [r0, r4]
 8008fa6:	f016 0608 	ands.w	r6, r6, #8
 8008faa:	d1f8      	bne.n	8008f9e <_strtol_l.constprop.0+0x22>
 8008fac:	2c2d      	cmp	r4, #45	@ 0x2d
 8008fae:	d12d      	bne.n	800900c <_strtol_l.constprop.0+0x90>
 8008fb0:	782c      	ldrb	r4, [r5, #0]
 8008fb2:	2601      	movs	r6, #1
 8008fb4:	1c95      	adds	r5, r2, #2
 8008fb6:	f033 0210 	bics.w	r2, r3, #16
 8008fba:	d109      	bne.n	8008fd0 <_strtol_l.constprop.0+0x54>
 8008fbc:	2c30      	cmp	r4, #48	@ 0x30
 8008fbe:	d12a      	bne.n	8009016 <_strtol_l.constprop.0+0x9a>
 8008fc0:	782a      	ldrb	r2, [r5, #0]
 8008fc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fc6:	2a58      	cmp	r2, #88	@ 0x58
 8008fc8:	d125      	bne.n	8009016 <_strtol_l.constprop.0+0x9a>
 8008fca:	786c      	ldrb	r4, [r5, #1]
 8008fcc:	2310      	movs	r3, #16
 8008fce:	3502      	adds	r5, #2
 8008fd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008fd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008fd8:	2200      	movs	r2, #0
 8008fda:	fbbc f9f3 	udiv	r9, ip, r3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008fe4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008fe8:	2f09      	cmp	r7, #9
 8008fea:	d81b      	bhi.n	8009024 <_strtol_l.constprop.0+0xa8>
 8008fec:	463c      	mov	r4, r7
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	dd27      	ble.n	8009042 <_strtol_l.constprop.0+0xc6>
 8008ff2:	1c57      	adds	r7, r2, #1
 8008ff4:	d007      	beq.n	8009006 <_strtol_l.constprop.0+0x8a>
 8008ff6:	4581      	cmp	r9, r0
 8008ff8:	d320      	bcc.n	800903c <_strtol_l.constprop.0+0xc0>
 8008ffa:	d101      	bne.n	8009000 <_strtol_l.constprop.0+0x84>
 8008ffc:	45a2      	cmp	sl, r4
 8008ffe:	db1d      	blt.n	800903c <_strtol_l.constprop.0+0xc0>
 8009000:	fb00 4003 	mla	r0, r0, r3, r4
 8009004:	2201      	movs	r2, #1
 8009006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800900a:	e7eb      	b.n	8008fe4 <_strtol_l.constprop.0+0x68>
 800900c:	2c2b      	cmp	r4, #43	@ 0x2b
 800900e:	bf04      	itt	eq
 8009010:	782c      	ldrbeq	r4, [r5, #0]
 8009012:	1c95      	addeq	r5, r2, #2
 8009014:	e7cf      	b.n	8008fb6 <_strtol_l.constprop.0+0x3a>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1da      	bne.n	8008fd0 <_strtol_l.constprop.0+0x54>
 800901a:	2c30      	cmp	r4, #48	@ 0x30
 800901c:	bf0c      	ite	eq
 800901e:	2308      	moveq	r3, #8
 8009020:	230a      	movne	r3, #10
 8009022:	e7d5      	b.n	8008fd0 <_strtol_l.constprop.0+0x54>
 8009024:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009028:	2f19      	cmp	r7, #25
 800902a:	d801      	bhi.n	8009030 <_strtol_l.constprop.0+0xb4>
 800902c:	3c37      	subs	r4, #55	@ 0x37
 800902e:	e7de      	b.n	8008fee <_strtol_l.constprop.0+0x72>
 8009030:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009034:	2f19      	cmp	r7, #25
 8009036:	d804      	bhi.n	8009042 <_strtol_l.constprop.0+0xc6>
 8009038:	3c57      	subs	r4, #87	@ 0x57
 800903a:	e7d8      	b.n	8008fee <_strtol_l.constprop.0+0x72>
 800903c:	f04f 32ff 	mov.w	r2, #4294967295
 8009040:	e7e1      	b.n	8009006 <_strtol_l.constprop.0+0x8a>
 8009042:	1c53      	adds	r3, r2, #1
 8009044:	d108      	bne.n	8009058 <_strtol_l.constprop.0+0xdc>
 8009046:	2322      	movs	r3, #34	@ 0x22
 8009048:	f8ce 3000 	str.w	r3, [lr]
 800904c:	4660      	mov	r0, ip
 800904e:	f1b8 0f00 	cmp.w	r8, #0
 8009052:	d0a0      	beq.n	8008f96 <_strtol_l.constprop.0+0x1a>
 8009054:	1e69      	subs	r1, r5, #1
 8009056:	e006      	b.n	8009066 <_strtol_l.constprop.0+0xea>
 8009058:	b106      	cbz	r6, 800905c <_strtol_l.constprop.0+0xe0>
 800905a:	4240      	negs	r0, r0
 800905c:	f1b8 0f00 	cmp.w	r8, #0
 8009060:	d099      	beq.n	8008f96 <_strtol_l.constprop.0+0x1a>
 8009062:	2a00      	cmp	r2, #0
 8009064:	d1f6      	bne.n	8009054 <_strtol_l.constprop.0+0xd8>
 8009066:	f8c8 1000 	str.w	r1, [r8]
 800906a:	e794      	b.n	8008f96 <_strtol_l.constprop.0+0x1a>
 800906c:	0800a4c9 	.word	0x0800a4c9

08009070 <_strtol_r>:
 8009070:	f7ff bf84 	b.w	8008f7c <_strtol_l.constprop.0>

08009074 <__ssputs_r>:
 8009074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009078:	688e      	ldr	r6, [r1, #8]
 800907a:	461f      	mov	r7, r3
 800907c:	42be      	cmp	r6, r7
 800907e:	680b      	ldr	r3, [r1, #0]
 8009080:	4682      	mov	sl, r0
 8009082:	460c      	mov	r4, r1
 8009084:	4690      	mov	r8, r2
 8009086:	d82d      	bhi.n	80090e4 <__ssputs_r+0x70>
 8009088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800908c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009090:	d026      	beq.n	80090e0 <__ssputs_r+0x6c>
 8009092:	6965      	ldr	r5, [r4, #20]
 8009094:	6909      	ldr	r1, [r1, #16]
 8009096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800909a:	eba3 0901 	sub.w	r9, r3, r1
 800909e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a2:	1c7b      	adds	r3, r7, #1
 80090a4:	444b      	add	r3, r9
 80090a6:	106d      	asrs	r5, r5, #1
 80090a8:	429d      	cmp	r5, r3
 80090aa:	bf38      	it	cc
 80090ac:	461d      	movcc	r5, r3
 80090ae:	0553      	lsls	r3, r2, #21
 80090b0:	d527      	bpl.n	8009102 <__ssputs_r+0x8e>
 80090b2:	4629      	mov	r1, r5
 80090b4:	f7fe fc1c 	bl	80078f0 <_malloc_r>
 80090b8:	4606      	mov	r6, r0
 80090ba:	b360      	cbz	r0, 8009116 <__ssputs_r+0xa2>
 80090bc:	6921      	ldr	r1, [r4, #16]
 80090be:	464a      	mov	r2, r9
 80090c0:	f7fd fd41 	bl	8006b46 <memcpy>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	6126      	str	r6, [r4, #16]
 80090d2:	6165      	str	r5, [r4, #20]
 80090d4:	444e      	add	r6, r9
 80090d6:	eba5 0509 	sub.w	r5, r5, r9
 80090da:	6026      	str	r6, [r4, #0]
 80090dc:	60a5      	str	r5, [r4, #8]
 80090de:	463e      	mov	r6, r7
 80090e0:	42be      	cmp	r6, r7
 80090e2:	d900      	bls.n	80090e6 <__ssputs_r+0x72>
 80090e4:	463e      	mov	r6, r7
 80090e6:	6820      	ldr	r0, [r4, #0]
 80090e8:	4632      	mov	r2, r6
 80090ea:	4641      	mov	r1, r8
 80090ec:	f000 f9c6 	bl	800947c <memmove>
 80090f0:	68a3      	ldr	r3, [r4, #8]
 80090f2:	1b9b      	subs	r3, r3, r6
 80090f4:	60a3      	str	r3, [r4, #8]
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	4433      	add	r3, r6
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	2000      	movs	r0, #0
 80090fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009102:	462a      	mov	r2, r5
 8009104:	f000 fd7d 	bl	8009c02 <_realloc_r>
 8009108:	4606      	mov	r6, r0
 800910a:	2800      	cmp	r0, #0
 800910c:	d1e0      	bne.n	80090d0 <__ssputs_r+0x5c>
 800910e:	6921      	ldr	r1, [r4, #16]
 8009110:	4650      	mov	r0, sl
 8009112:	f7fe fb79 	bl	8007808 <_free_r>
 8009116:	230c      	movs	r3, #12
 8009118:	f8ca 3000 	str.w	r3, [sl]
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	f04f 30ff 	mov.w	r0, #4294967295
 8009128:	e7e9      	b.n	80090fe <__ssputs_r+0x8a>
	...

0800912c <_svfiprintf_r>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	4698      	mov	r8, r3
 8009132:	898b      	ldrh	r3, [r1, #12]
 8009134:	061b      	lsls	r3, r3, #24
 8009136:	b09d      	sub	sp, #116	@ 0x74
 8009138:	4607      	mov	r7, r0
 800913a:	460d      	mov	r5, r1
 800913c:	4614      	mov	r4, r2
 800913e:	d510      	bpl.n	8009162 <_svfiprintf_r+0x36>
 8009140:	690b      	ldr	r3, [r1, #16]
 8009142:	b973      	cbnz	r3, 8009162 <_svfiprintf_r+0x36>
 8009144:	2140      	movs	r1, #64	@ 0x40
 8009146:	f7fe fbd3 	bl	80078f0 <_malloc_r>
 800914a:	6028      	str	r0, [r5, #0]
 800914c:	6128      	str	r0, [r5, #16]
 800914e:	b930      	cbnz	r0, 800915e <_svfiprintf_r+0x32>
 8009150:	230c      	movs	r3, #12
 8009152:	603b      	str	r3, [r7, #0]
 8009154:	f04f 30ff 	mov.w	r0, #4294967295
 8009158:	b01d      	add	sp, #116	@ 0x74
 800915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915e:	2340      	movs	r3, #64	@ 0x40
 8009160:	616b      	str	r3, [r5, #20]
 8009162:	2300      	movs	r3, #0
 8009164:	9309      	str	r3, [sp, #36]	@ 0x24
 8009166:	2320      	movs	r3, #32
 8009168:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800916c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009170:	2330      	movs	r3, #48	@ 0x30
 8009172:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009310 <_svfiprintf_r+0x1e4>
 8009176:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800917a:	f04f 0901 	mov.w	r9, #1
 800917e:	4623      	mov	r3, r4
 8009180:	469a      	mov	sl, r3
 8009182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009186:	b10a      	cbz	r2, 800918c <_svfiprintf_r+0x60>
 8009188:	2a25      	cmp	r2, #37	@ 0x25
 800918a:	d1f9      	bne.n	8009180 <_svfiprintf_r+0x54>
 800918c:	ebba 0b04 	subs.w	fp, sl, r4
 8009190:	d00b      	beq.n	80091aa <_svfiprintf_r+0x7e>
 8009192:	465b      	mov	r3, fp
 8009194:	4622      	mov	r2, r4
 8009196:	4629      	mov	r1, r5
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff ff6b 	bl	8009074 <__ssputs_r>
 800919e:	3001      	adds	r0, #1
 80091a0:	f000 80a7 	beq.w	80092f2 <_svfiprintf_r+0x1c6>
 80091a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091a6:	445a      	add	r2, fp
 80091a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80091aa:	f89a 3000 	ldrb.w	r3, [sl]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 809f 	beq.w	80092f2 <_svfiprintf_r+0x1c6>
 80091b4:	2300      	movs	r3, #0
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091be:	f10a 0a01 	add.w	sl, sl, #1
 80091c2:	9304      	str	r3, [sp, #16]
 80091c4:	9307      	str	r3, [sp, #28]
 80091c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80091cc:	4654      	mov	r4, sl
 80091ce:	2205      	movs	r2, #5
 80091d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d4:	484e      	ldr	r0, [pc, #312]	@ (8009310 <_svfiprintf_r+0x1e4>)
 80091d6:	f7f6 fffb 	bl	80001d0 <memchr>
 80091da:	9a04      	ldr	r2, [sp, #16]
 80091dc:	b9d8      	cbnz	r0, 8009216 <_svfiprintf_r+0xea>
 80091de:	06d0      	lsls	r0, r2, #27
 80091e0:	bf44      	itt	mi
 80091e2:	2320      	movmi	r3, #32
 80091e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e8:	0711      	lsls	r1, r2, #28
 80091ea:	bf44      	itt	mi
 80091ec:	232b      	movmi	r3, #43	@ 0x2b
 80091ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f2:	f89a 3000 	ldrb.w	r3, [sl]
 80091f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f8:	d015      	beq.n	8009226 <_svfiprintf_r+0xfa>
 80091fa:	9a07      	ldr	r2, [sp, #28]
 80091fc:	4654      	mov	r4, sl
 80091fe:	2000      	movs	r0, #0
 8009200:	f04f 0c0a 	mov.w	ip, #10
 8009204:	4621      	mov	r1, r4
 8009206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800920a:	3b30      	subs	r3, #48	@ 0x30
 800920c:	2b09      	cmp	r3, #9
 800920e:	d94b      	bls.n	80092a8 <_svfiprintf_r+0x17c>
 8009210:	b1b0      	cbz	r0, 8009240 <_svfiprintf_r+0x114>
 8009212:	9207      	str	r2, [sp, #28]
 8009214:	e014      	b.n	8009240 <_svfiprintf_r+0x114>
 8009216:	eba0 0308 	sub.w	r3, r0, r8
 800921a:	fa09 f303 	lsl.w	r3, r9, r3
 800921e:	4313      	orrs	r3, r2
 8009220:	9304      	str	r3, [sp, #16]
 8009222:	46a2      	mov	sl, r4
 8009224:	e7d2      	b.n	80091cc <_svfiprintf_r+0xa0>
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	1d19      	adds	r1, r3, #4
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	9103      	str	r1, [sp, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	bfbb      	ittet	lt
 8009232:	425b      	neglt	r3, r3
 8009234:	f042 0202 	orrlt.w	r2, r2, #2
 8009238:	9307      	strge	r3, [sp, #28]
 800923a:	9307      	strlt	r3, [sp, #28]
 800923c:	bfb8      	it	lt
 800923e:	9204      	strlt	r2, [sp, #16]
 8009240:	7823      	ldrb	r3, [r4, #0]
 8009242:	2b2e      	cmp	r3, #46	@ 0x2e
 8009244:	d10a      	bne.n	800925c <_svfiprintf_r+0x130>
 8009246:	7863      	ldrb	r3, [r4, #1]
 8009248:	2b2a      	cmp	r3, #42	@ 0x2a
 800924a:	d132      	bne.n	80092b2 <_svfiprintf_r+0x186>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	1d1a      	adds	r2, r3, #4
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	9203      	str	r2, [sp, #12]
 8009254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009258:	3402      	adds	r4, #2
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009320 <_svfiprintf_r+0x1f4>
 8009260:	7821      	ldrb	r1, [r4, #0]
 8009262:	2203      	movs	r2, #3
 8009264:	4650      	mov	r0, sl
 8009266:	f7f6 ffb3 	bl	80001d0 <memchr>
 800926a:	b138      	cbz	r0, 800927c <_svfiprintf_r+0x150>
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	eba0 000a 	sub.w	r0, r0, sl
 8009272:	2240      	movs	r2, #64	@ 0x40
 8009274:	4082      	lsls	r2, r0
 8009276:	4313      	orrs	r3, r2
 8009278:	3401      	adds	r4, #1
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009280:	4824      	ldr	r0, [pc, #144]	@ (8009314 <_svfiprintf_r+0x1e8>)
 8009282:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009286:	2206      	movs	r2, #6
 8009288:	f7f6 ffa2 	bl	80001d0 <memchr>
 800928c:	2800      	cmp	r0, #0
 800928e:	d036      	beq.n	80092fe <_svfiprintf_r+0x1d2>
 8009290:	4b21      	ldr	r3, [pc, #132]	@ (8009318 <_svfiprintf_r+0x1ec>)
 8009292:	bb1b      	cbnz	r3, 80092dc <_svfiprintf_r+0x1b0>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	3307      	adds	r3, #7
 8009298:	f023 0307 	bic.w	r3, r3, #7
 800929c:	3308      	adds	r3, #8
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a2:	4433      	add	r3, r6
 80092a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a6:	e76a      	b.n	800917e <_svfiprintf_r+0x52>
 80092a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ac:	460c      	mov	r4, r1
 80092ae:	2001      	movs	r0, #1
 80092b0:	e7a8      	b.n	8009204 <_svfiprintf_r+0xd8>
 80092b2:	2300      	movs	r3, #0
 80092b4:	3401      	adds	r4, #1
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	4619      	mov	r1, r3
 80092ba:	f04f 0c0a 	mov.w	ip, #10
 80092be:	4620      	mov	r0, r4
 80092c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c4:	3a30      	subs	r2, #48	@ 0x30
 80092c6:	2a09      	cmp	r2, #9
 80092c8:	d903      	bls.n	80092d2 <_svfiprintf_r+0x1a6>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0c6      	beq.n	800925c <_svfiprintf_r+0x130>
 80092ce:	9105      	str	r1, [sp, #20]
 80092d0:	e7c4      	b.n	800925c <_svfiprintf_r+0x130>
 80092d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d6:	4604      	mov	r4, r0
 80092d8:	2301      	movs	r3, #1
 80092da:	e7f0      	b.n	80092be <_svfiprintf_r+0x192>
 80092dc:	ab03      	add	r3, sp, #12
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	462a      	mov	r2, r5
 80092e2:	4b0e      	ldr	r3, [pc, #56]	@ (800931c <_svfiprintf_r+0x1f0>)
 80092e4:	a904      	add	r1, sp, #16
 80092e6:	4638      	mov	r0, r7
 80092e8:	f7fc fc88 	bl	8005bfc <_printf_float>
 80092ec:	1c42      	adds	r2, r0, #1
 80092ee:	4606      	mov	r6, r0
 80092f0:	d1d6      	bne.n	80092a0 <_svfiprintf_r+0x174>
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	065b      	lsls	r3, r3, #25
 80092f6:	f53f af2d 	bmi.w	8009154 <_svfiprintf_r+0x28>
 80092fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092fc:	e72c      	b.n	8009158 <_svfiprintf_r+0x2c>
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	462a      	mov	r2, r5
 8009304:	4b05      	ldr	r3, [pc, #20]	@ (800931c <_svfiprintf_r+0x1f0>)
 8009306:	a904      	add	r1, sp, #16
 8009308:	4638      	mov	r0, r7
 800930a:	f7fc ff0f 	bl	800612c <_printf_i>
 800930e:	e7ed      	b.n	80092ec <_svfiprintf_r+0x1c0>
 8009310:	0800a5c9 	.word	0x0800a5c9
 8009314:	0800a5d3 	.word	0x0800a5d3
 8009318:	08005bfd 	.word	0x08005bfd
 800931c:	08009075 	.word	0x08009075
 8009320:	0800a5cf 	.word	0x0800a5cf

08009324 <__sflush_r>:
 8009324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932c:	0716      	lsls	r6, r2, #28
 800932e:	4605      	mov	r5, r0
 8009330:	460c      	mov	r4, r1
 8009332:	d454      	bmi.n	80093de <__sflush_r+0xba>
 8009334:	684b      	ldr	r3, [r1, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	dc02      	bgt.n	8009340 <__sflush_r+0x1c>
 800933a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	dd48      	ble.n	80093d2 <__sflush_r+0xae>
 8009340:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009342:	2e00      	cmp	r6, #0
 8009344:	d045      	beq.n	80093d2 <__sflush_r+0xae>
 8009346:	2300      	movs	r3, #0
 8009348:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800934c:	682f      	ldr	r7, [r5, #0]
 800934e:	6a21      	ldr	r1, [r4, #32]
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	d030      	beq.n	80093b6 <__sflush_r+0x92>
 8009354:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009356:	89a3      	ldrh	r3, [r4, #12]
 8009358:	0759      	lsls	r1, r3, #29
 800935a:	d505      	bpl.n	8009368 <__sflush_r+0x44>
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	1ad2      	subs	r2, r2, r3
 8009360:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009362:	b10b      	cbz	r3, 8009368 <__sflush_r+0x44>
 8009364:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	2300      	movs	r3, #0
 800936a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800936c:	6a21      	ldr	r1, [r4, #32]
 800936e:	4628      	mov	r0, r5
 8009370:	47b0      	blx	r6
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	d106      	bne.n	8009386 <__sflush_r+0x62>
 8009378:	6829      	ldr	r1, [r5, #0]
 800937a:	291d      	cmp	r1, #29
 800937c:	d82b      	bhi.n	80093d6 <__sflush_r+0xb2>
 800937e:	4a2a      	ldr	r2, [pc, #168]	@ (8009428 <__sflush_r+0x104>)
 8009380:	410a      	asrs	r2, r1
 8009382:	07d6      	lsls	r6, r2, #31
 8009384:	d427      	bmi.n	80093d6 <__sflush_r+0xb2>
 8009386:	2200      	movs	r2, #0
 8009388:	6062      	str	r2, [r4, #4]
 800938a:	04d9      	lsls	r1, r3, #19
 800938c:	6922      	ldr	r2, [r4, #16]
 800938e:	6022      	str	r2, [r4, #0]
 8009390:	d504      	bpl.n	800939c <__sflush_r+0x78>
 8009392:	1c42      	adds	r2, r0, #1
 8009394:	d101      	bne.n	800939a <__sflush_r+0x76>
 8009396:	682b      	ldr	r3, [r5, #0]
 8009398:	b903      	cbnz	r3, 800939c <__sflush_r+0x78>
 800939a:	6560      	str	r0, [r4, #84]	@ 0x54
 800939c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800939e:	602f      	str	r7, [r5, #0]
 80093a0:	b1b9      	cbz	r1, 80093d2 <__sflush_r+0xae>
 80093a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093a6:	4299      	cmp	r1, r3
 80093a8:	d002      	beq.n	80093b0 <__sflush_r+0x8c>
 80093aa:	4628      	mov	r0, r5
 80093ac:	f7fe fa2c 	bl	8007808 <_free_r>
 80093b0:	2300      	movs	r3, #0
 80093b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80093b4:	e00d      	b.n	80093d2 <__sflush_r+0xae>
 80093b6:	2301      	movs	r3, #1
 80093b8:	4628      	mov	r0, r5
 80093ba:	47b0      	blx	r6
 80093bc:	4602      	mov	r2, r0
 80093be:	1c50      	adds	r0, r2, #1
 80093c0:	d1c9      	bne.n	8009356 <__sflush_r+0x32>
 80093c2:	682b      	ldr	r3, [r5, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0c6      	beq.n	8009356 <__sflush_r+0x32>
 80093c8:	2b1d      	cmp	r3, #29
 80093ca:	d001      	beq.n	80093d0 <__sflush_r+0xac>
 80093cc:	2b16      	cmp	r3, #22
 80093ce:	d11e      	bne.n	800940e <__sflush_r+0xea>
 80093d0:	602f      	str	r7, [r5, #0]
 80093d2:	2000      	movs	r0, #0
 80093d4:	e022      	b.n	800941c <__sflush_r+0xf8>
 80093d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093da:	b21b      	sxth	r3, r3
 80093dc:	e01b      	b.n	8009416 <__sflush_r+0xf2>
 80093de:	690f      	ldr	r7, [r1, #16]
 80093e0:	2f00      	cmp	r7, #0
 80093e2:	d0f6      	beq.n	80093d2 <__sflush_r+0xae>
 80093e4:	0793      	lsls	r3, r2, #30
 80093e6:	680e      	ldr	r6, [r1, #0]
 80093e8:	bf08      	it	eq
 80093ea:	694b      	ldreq	r3, [r1, #20]
 80093ec:	600f      	str	r7, [r1, #0]
 80093ee:	bf18      	it	ne
 80093f0:	2300      	movne	r3, #0
 80093f2:	eba6 0807 	sub.w	r8, r6, r7
 80093f6:	608b      	str	r3, [r1, #8]
 80093f8:	f1b8 0f00 	cmp.w	r8, #0
 80093fc:	dde9      	ble.n	80093d2 <__sflush_r+0xae>
 80093fe:	6a21      	ldr	r1, [r4, #32]
 8009400:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009402:	4643      	mov	r3, r8
 8009404:	463a      	mov	r2, r7
 8009406:	4628      	mov	r0, r5
 8009408:	47b0      	blx	r6
 800940a:	2800      	cmp	r0, #0
 800940c:	dc08      	bgt.n	8009420 <__sflush_r+0xfc>
 800940e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009416:	81a3      	strh	r3, [r4, #12]
 8009418:	f04f 30ff 	mov.w	r0, #4294967295
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	4407      	add	r7, r0
 8009422:	eba8 0800 	sub.w	r8, r8, r0
 8009426:	e7e7      	b.n	80093f8 <__sflush_r+0xd4>
 8009428:	dfbffffe 	.word	0xdfbffffe

0800942c <_fflush_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	690b      	ldr	r3, [r1, #16]
 8009430:	4605      	mov	r5, r0
 8009432:	460c      	mov	r4, r1
 8009434:	b913      	cbnz	r3, 800943c <_fflush_r+0x10>
 8009436:	2500      	movs	r5, #0
 8009438:	4628      	mov	r0, r5
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	b118      	cbz	r0, 8009446 <_fflush_r+0x1a>
 800943e:	6a03      	ldr	r3, [r0, #32]
 8009440:	b90b      	cbnz	r3, 8009446 <_fflush_r+0x1a>
 8009442:	f7fd fa33 	bl	80068ac <__sinit>
 8009446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0f3      	beq.n	8009436 <_fflush_r+0xa>
 800944e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009450:	07d0      	lsls	r0, r2, #31
 8009452:	d404      	bmi.n	800945e <_fflush_r+0x32>
 8009454:	0599      	lsls	r1, r3, #22
 8009456:	d402      	bmi.n	800945e <_fflush_r+0x32>
 8009458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800945a:	f7fd fb72 	bl	8006b42 <__retarget_lock_acquire_recursive>
 800945e:	4628      	mov	r0, r5
 8009460:	4621      	mov	r1, r4
 8009462:	f7ff ff5f 	bl	8009324 <__sflush_r>
 8009466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009468:	07da      	lsls	r2, r3, #31
 800946a:	4605      	mov	r5, r0
 800946c:	d4e4      	bmi.n	8009438 <_fflush_r+0xc>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	059b      	lsls	r3, r3, #22
 8009472:	d4e1      	bmi.n	8009438 <_fflush_r+0xc>
 8009474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009476:	f7fd fb65 	bl	8006b44 <__retarget_lock_release_recursive>
 800947a:	e7dd      	b.n	8009438 <_fflush_r+0xc>

0800947c <memmove>:
 800947c:	4288      	cmp	r0, r1
 800947e:	b510      	push	{r4, lr}
 8009480:	eb01 0402 	add.w	r4, r1, r2
 8009484:	d902      	bls.n	800948c <memmove+0x10>
 8009486:	4284      	cmp	r4, r0
 8009488:	4623      	mov	r3, r4
 800948a:	d807      	bhi.n	800949c <memmove+0x20>
 800948c:	1e43      	subs	r3, r0, #1
 800948e:	42a1      	cmp	r1, r4
 8009490:	d008      	beq.n	80094a4 <memmove+0x28>
 8009492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009496:	f803 2f01 	strb.w	r2, [r3, #1]!
 800949a:	e7f8      	b.n	800948e <memmove+0x12>
 800949c:	4402      	add	r2, r0
 800949e:	4601      	mov	r1, r0
 80094a0:	428a      	cmp	r2, r1
 80094a2:	d100      	bne.n	80094a6 <memmove+0x2a>
 80094a4:	bd10      	pop	{r4, pc}
 80094a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ae:	e7f7      	b.n	80094a0 <memmove+0x24>

080094b0 <strncmp>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	b16a      	cbz	r2, 80094d0 <strncmp+0x20>
 80094b4:	3901      	subs	r1, #1
 80094b6:	1884      	adds	r4, r0, r2
 80094b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d103      	bne.n	80094cc <strncmp+0x1c>
 80094c4:	42a0      	cmp	r0, r4
 80094c6:	d001      	beq.n	80094cc <strncmp+0x1c>
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	d1f5      	bne.n	80094b8 <strncmp+0x8>
 80094cc:	1ad0      	subs	r0, r2, r3
 80094ce:	bd10      	pop	{r4, pc}
 80094d0:	4610      	mov	r0, r2
 80094d2:	e7fc      	b.n	80094ce <strncmp+0x1e>

080094d4 <_sbrk_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	@ (80094f0 <_sbrk_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7f8 fa7a 	bl	80019d8 <_sbrk>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_sbrk_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_sbrk_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	200004a4 	.word	0x200004a4
 80094f4:	00000000 	.word	0x00000000

080094f8 <nan>:
 80094f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009500 <nan+0x8>
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	00000000 	.word	0x00000000
 8009504:	7ff80000 	.word	0x7ff80000

08009508 <__assert_func>:
 8009508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800950a:	4614      	mov	r4, r2
 800950c:	461a      	mov	r2, r3
 800950e:	4b09      	ldr	r3, [pc, #36]	@ (8009534 <__assert_func+0x2c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4605      	mov	r5, r0
 8009514:	68d8      	ldr	r0, [r3, #12]
 8009516:	b954      	cbnz	r4, 800952e <__assert_func+0x26>
 8009518:	4b07      	ldr	r3, [pc, #28]	@ (8009538 <__assert_func+0x30>)
 800951a:	461c      	mov	r4, r3
 800951c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009520:	9100      	str	r1, [sp, #0]
 8009522:	462b      	mov	r3, r5
 8009524:	4905      	ldr	r1, [pc, #20]	@ (800953c <__assert_func+0x34>)
 8009526:	f000 fba7 	bl	8009c78 <fiprintf>
 800952a:	f000 fbb7 	bl	8009c9c <abort>
 800952e:	4b04      	ldr	r3, [pc, #16]	@ (8009540 <__assert_func+0x38>)
 8009530:	e7f4      	b.n	800951c <__assert_func+0x14>
 8009532:	bf00      	nop
 8009534:	20000020 	.word	0x20000020
 8009538:	0800a61d 	.word	0x0800a61d
 800953c:	0800a5ef 	.word	0x0800a5ef
 8009540:	0800a5e2 	.word	0x0800a5e2

08009544 <_calloc_r>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	fba1 5402 	umull	r5, r4, r1, r2
 800954a:	b93c      	cbnz	r4, 800955c <_calloc_r+0x18>
 800954c:	4629      	mov	r1, r5
 800954e:	f7fe f9cf 	bl	80078f0 <_malloc_r>
 8009552:	4606      	mov	r6, r0
 8009554:	b928      	cbnz	r0, 8009562 <_calloc_r+0x1e>
 8009556:	2600      	movs	r6, #0
 8009558:	4630      	mov	r0, r6
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	220c      	movs	r2, #12
 800955e:	6002      	str	r2, [r0, #0]
 8009560:	e7f9      	b.n	8009556 <_calloc_r+0x12>
 8009562:	462a      	mov	r2, r5
 8009564:	4621      	mov	r1, r4
 8009566:	f7fd fa6e 	bl	8006a46 <memset>
 800956a:	e7f5      	b.n	8009558 <_calloc_r+0x14>

0800956c <rshift>:
 800956c:	6903      	ldr	r3, [r0, #16]
 800956e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009576:	ea4f 1261 	mov.w	r2, r1, asr #5
 800957a:	f100 0414 	add.w	r4, r0, #20
 800957e:	dd45      	ble.n	800960c <rshift+0xa0>
 8009580:	f011 011f 	ands.w	r1, r1, #31
 8009584:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009588:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800958c:	d10c      	bne.n	80095a8 <rshift+0x3c>
 800958e:	f100 0710 	add.w	r7, r0, #16
 8009592:	4629      	mov	r1, r5
 8009594:	42b1      	cmp	r1, r6
 8009596:	d334      	bcc.n	8009602 <rshift+0x96>
 8009598:	1a9b      	subs	r3, r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	1eea      	subs	r2, r5, #3
 800959e:	4296      	cmp	r6, r2
 80095a0:	bf38      	it	cc
 80095a2:	2300      	movcc	r3, #0
 80095a4:	4423      	add	r3, r4
 80095a6:	e015      	b.n	80095d4 <rshift+0x68>
 80095a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095ac:	f1c1 0820 	rsb	r8, r1, #32
 80095b0:	40cf      	lsrs	r7, r1
 80095b2:	f105 0e04 	add.w	lr, r5, #4
 80095b6:	46a1      	mov	r9, r4
 80095b8:	4576      	cmp	r6, lr
 80095ba:	46f4      	mov	ip, lr
 80095bc:	d815      	bhi.n	80095ea <rshift+0x7e>
 80095be:	1a9a      	subs	r2, r3, r2
 80095c0:	0092      	lsls	r2, r2, #2
 80095c2:	3a04      	subs	r2, #4
 80095c4:	3501      	adds	r5, #1
 80095c6:	42ae      	cmp	r6, r5
 80095c8:	bf38      	it	cc
 80095ca:	2200      	movcc	r2, #0
 80095cc:	18a3      	adds	r3, r4, r2
 80095ce:	50a7      	str	r7, [r4, r2]
 80095d0:	b107      	cbz	r7, 80095d4 <rshift+0x68>
 80095d2:	3304      	adds	r3, #4
 80095d4:	1b1a      	subs	r2, r3, r4
 80095d6:	42a3      	cmp	r3, r4
 80095d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095dc:	bf08      	it	eq
 80095de:	2300      	moveq	r3, #0
 80095e0:	6102      	str	r2, [r0, #16]
 80095e2:	bf08      	it	eq
 80095e4:	6143      	streq	r3, [r0, #20]
 80095e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095ea:	f8dc c000 	ldr.w	ip, [ip]
 80095ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80095f2:	ea4c 0707 	orr.w	r7, ip, r7
 80095f6:	f849 7b04 	str.w	r7, [r9], #4
 80095fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095fe:	40cf      	lsrs	r7, r1
 8009600:	e7da      	b.n	80095b8 <rshift+0x4c>
 8009602:	f851 cb04 	ldr.w	ip, [r1], #4
 8009606:	f847 cf04 	str.w	ip, [r7, #4]!
 800960a:	e7c3      	b.n	8009594 <rshift+0x28>
 800960c:	4623      	mov	r3, r4
 800960e:	e7e1      	b.n	80095d4 <rshift+0x68>

08009610 <__hexdig_fun>:
 8009610:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009614:	2b09      	cmp	r3, #9
 8009616:	d802      	bhi.n	800961e <__hexdig_fun+0xe>
 8009618:	3820      	subs	r0, #32
 800961a:	b2c0      	uxtb	r0, r0
 800961c:	4770      	bx	lr
 800961e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009622:	2b05      	cmp	r3, #5
 8009624:	d801      	bhi.n	800962a <__hexdig_fun+0x1a>
 8009626:	3847      	subs	r0, #71	@ 0x47
 8009628:	e7f7      	b.n	800961a <__hexdig_fun+0xa>
 800962a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800962e:	2b05      	cmp	r3, #5
 8009630:	d801      	bhi.n	8009636 <__hexdig_fun+0x26>
 8009632:	3827      	subs	r0, #39	@ 0x27
 8009634:	e7f1      	b.n	800961a <__hexdig_fun+0xa>
 8009636:	2000      	movs	r0, #0
 8009638:	4770      	bx	lr
	...

0800963c <__gethex>:
 800963c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009640:	b085      	sub	sp, #20
 8009642:	468a      	mov	sl, r1
 8009644:	9302      	str	r3, [sp, #8]
 8009646:	680b      	ldr	r3, [r1, #0]
 8009648:	9001      	str	r0, [sp, #4]
 800964a:	4690      	mov	r8, r2
 800964c:	1c9c      	adds	r4, r3, #2
 800964e:	46a1      	mov	r9, r4
 8009650:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009654:	2830      	cmp	r0, #48	@ 0x30
 8009656:	d0fa      	beq.n	800964e <__gethex+0x12>
 8009658:	eba9 0303 	sub.w	r3, r9, r3
 800965c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009660:	f7ff ffd6 	bl	8009610 <__hexdig_fun>
 8009664:	4605      	mov	r5, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d168      	bne.n	800973c <__gethex+0x100>
 800966a:	49a0      	ldr	r1, [pc, #640]	@ (80098ec <__gethex+0x2b0>)
 800966c:	2201      	movs	r2, #1
 800966e:	4648      	mov	r0, r9
 8009670:	f7ff ff1e 	bl	80094b0 <strncmp>
 8009674:	4607      	mov	r7, r0
 8009676:	2800      	cmp	r0, #0
 8009678:	d167      	bne.n	800974a <__gethex+0x10e>
 800967a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800967e:	4626      	mov	r6, r4
 8009680:	f7ff ffc6 	bl	8009610 <__hexdig_fun>
 8009684:	2800      	cmp	r0, #0
 8009686:	d062      	beq.n	800974e <__gethex+0x112>
 8009688:	4623      	mov	r3, r4
 800968a:	7818      	ldrb	r0, [r3, #0]
 800968c:	2830      	cmp	r0, #48	@ 0x30
 800968e:	4699      	mov	r9, r3
 8009690:	f103 0301 	add.w	r3, r3, #1
 8009694:	d0f9      	beq.n	800968a <__gethex+0x4e>
 8009696:	f7ff ffbb 	bl	8009610 <__hexdig_fun>
 800969a:	fab0 f580 	clz	r5, r0
 800969e:	096d      	lsrs	r5, r5, #5
 80096a0:	f04f 0b01 	mov.w	fp, #1
 80096a4:	464a      	mov	r2, r9
 80096a6:	4616      	mov	r6, r2
 80096a8:	3201      	adds	r2, #1
 80096aa:	7830      	ldrb	r0, [r6, #0]
 80096ac:	f7ff ffb0 	bl	8009610 <__hexdig_fun>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d1f8      	bne.n	80096a6 <__gethex+0x6a>
 80096b4:	498d      	ldr	r1, [pc, #564]	@ (80098ec <__gethex+0x2b0>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	4630      	mov	r0, r6
 80096ba:	f7ff fef9 	bl	80094b0 <strncmp>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d13f      	bne.n	8009742 <__gethex+0x106>
 80096c2:	b944      	cbnz	r4, 80096d6 <__gethex+0x9a>
 80096c4:	1c74      	adds	r4, r6, #1
 80096c6:	4622      	mov	r2, r4
 80096c8:	4616      	mov	r6, r2
 80096ca:	3201      	adds	r2, #1
 80096cc:	7830      	ldrb	r0, [r6, #0]
 80096ce:	f7ff ff9f 	bl	8009610 <__hexdig_fun>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d1f8      	bne.n	80096c8 <__gethex+0x8c>
 80096d6:	1ba4      	subs	r4, r4, r6
 80096d8:	00a7      	lsls	r7, r4, #2
 80096da:	7833      	ldrb	r3, [r6, #0]
 80096dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80096e0:	2b50      	cmp	r3, #80	@ 0x50
 80096e2:	d13e      	bne.n	8009762 <__gethex+0x126>
 80096e4:	7873      	ldrb	r3, [r6, #1]
 80096e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80096e8:	d033      	beq.n	8009752 <__gethex+0x116>
 80096ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80096ec:	d034      	beq.n	8009758 <__gethex+0x11c>
 80096ee:	1c71      	adds	r1, r6, #1
 80096f0:	2400      	movs	r4, #0
 80096f2:	7808      	ldrb	r0, [r1, #0]
 80096f4:	f7ff ff8c 	bl	8009610 <__hexdig_fun>
 80096f8:	1e43      	subs	r3, r0, #1
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b18      	cmp	r3, #24
 80096fe:	d830      	bhi.n	8009762 <__gethex+0x126>
 8009700:	f1a0 0210 	sub.w	r2, r0, #16
 8009704:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009708:	f7ff ff82 	bl	8009610 <__hexdig_fun>
 800970c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009710:	fa5f fc8c 	uxtb.w	ip, ip
 8009714:	f1bc 0f18 	cmp.w	ip, #24
 8009718:	f04f 030a 	mov.w	r3, #10
 800971c:	d91e      	bls.n	800975c <__gethex+0x120>
 800971e:	b104      	cbz	r4, 8009722 <__gethex+0xe6>
 8009720:	4252      	negs	r2, r2
 8009722:	4417      	add	r7, r2
 8009724:	f8ca 1000 	str.w	r1, [sl]
 8009728:	b1ed      	cbz	r5, 8009766 <__gethex+0x12a>
 800972a:	f1bb 0f00 	cmp.w	fp, #0
 800972e:	bf0c      	ite	eq
 8009730:	2506      	moveq	r5, #6
 8009732:	2500      	movne	r5, #0
 8009734:	4628      	mov	r0, r5
 8009736:	b005      	add	sp, #20
 8009738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973c:	2500      	movs	r5, #0
 800973e:	462c      	mov	r4, r5
 8009740:	e7b0      	b.n	80096a4 <__gethex+0x68>
 8009742:	2c00      	cmp	r4, #0
 8009744:	d1c7      	bne.n	80096d6 <__gethex+0x9a>
 8009746:	4627      	mov	r7, r4
 8009748:	e7c7      	b.n	80096da <__gethex+0x9e>
 800974a:	464e      	mov	r6, r9
 800974c:	462f      	mov	r7, r5
 800974e:	2501      	movs	r5, #1
 8009750:	e7c3      	b.n	80096da <__gethex+0x9e>
 8009752:	2400      	movs	r4, #0
 8009754:	1cb1      	adds	r1, r6, #2
 8009756:	e7cc      	b.n	80096f2 <__gethex+0xb6>
 8009758:	2401      	movs	r4, #1
 800975a:	e7fb      	b.n	8009754 <__gethex+0x118>
 800975c:	fb03 0002 	mla	r0, r3, r2, r0
 8009760:	e7ce      	b.n	8009700 <__gethex+0xc4>
 8009762:	4631      	mov	r1, r6
 8009764:	e7de      	b.n	8009724 <__gethex+0xe8>
 8009766:	eba6 0309 	sub.w	r3, r6, r9
 800976a:	3b01      	subs	r3, #1
 800976c:	4629      	mov	r1, r5
 800976e:	2b07      	cmp	r3, #7
 8009770:	dc0a      	bgt.n	8009788 <__gethex+0x14c>
 8009772:	9801      	ldr	r0, [sp, #4]
 8009774:	f7fe f948 	bl	8007a08 <_Balloc>
 8009778:	4604      	mov	r4, r0
 800977a:	b940      	cbnz	r0, 800978e <__gethex+0x152>
 800977c:	4b5c      	ldr	r3, [pc, #368]	@ (80098f0 <__gethex+0x2b4>)
 800977e:	4602      	mov	r2, r0
 8009780:	21e4      	movs	r1, #228	@ 0xe4
 8009782:	485c      	ldr	r0, [pc, #368]	@ (80098f4 <__gethex+0x2b8>)
 8009784:	f7ff fec0 	bl	8009508 <__assert_func>
 8009788:	3101      	adds	r1, #1
 800978a:	105b      	asrs	r3, r3, #1
 800978c:	e7ef      	b.n	800976e <__gethex+0x132>
 800978e:	f100 0a14 	add.w	sl, r0, #20
 8009792:	2300      	movs	r3, #0
 8009794:	4655      	mov	r5, sl
 8009796:	469b      	mov	fp, r3
 8009798:	45b1      	cmp	r9, r6
 800979a:	d337      	bcc.n	800980c <__gethex+0x1d0>
 800979c:	f845 bb04 	str.w	fp, [r5], #4
 80097a0:	eba5 050a 	sub.w	r5, r5, sl
 80097a4:	10ad      	asrs	r5, r5, #2
 80097a6:	6125      	str	r5, [r4, #16]
 80097a8:	4658      	mov	r0, fp
 80097aa:	f7fe fa1f 	bl	8007bec <__hi0bits>
 80097ae:	016d      	lsls	r5, r5, #5
 80097b0:	f8d8 6000 	ldr.w	r6, [r8]
 80097b4:	1a2d      	subs	r5, r5, r0
 80097b6:	42b5      	cmp	r5, r6
 80097b8:	dd54      	ble.n	8009864 <__gethex+0x228>
 80097ba:	1bad      	subs	r5, r5, r6
 80097bc:	4629      	mov	r1, r5
 80097be:	4620      	mov	r0, r4
 80097c0:	f7fe fdb3 	bl	800832a <__any_on>
 80097c4:	4681      	mov	r9, r0
 80097c6:	b178      	cbz	r0, 80097e8 <__gethex+0x1ac>
 80097c8:	1e6b      	subs	r3, r5, #1
 80097ca:	1159      	asrs	r1, r3, #5
 80097cc:	f003 021f 	and.w	r2, r3, #31
 80097d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80097d4:	f04f 0901 	mov.w	r9, #1
 80097d8:	fa09 f202 	lsl.w	r2, r9, r2
 80097dc:	420a      	tst	r2, r1
 80097de:	d003      	beq.n	80097e8 <__gethex+0x1ac>
 80097e0:	454b      	cmp	r3, r9
 80097e2:	dc36      	bgt.n	8009852 <__gethex+0x216>
 80097e4:	f04f 0902 	mov.w	r9, #2
 80097e8:	4629      	mov	r1, r5
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff febe 	bl	800956c <rshift>
 80097f0:	442f      	add	r7, r5
 80097f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097f6:	42bb      	cmp	r3, r7
 80097f8:	da42      	bge.n	8009880 <__gethex+0x244>
 80097fa:	9801      	ldr	r0, [sp, #4]
 80097fc:	4621      	mov	r1, r4
 80097fe:	f7fe f943 	bl	8007a88 <_Bfree>
 8009802:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009804:	2300      	movs	r3, #0
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	25a3      	movs	r5, #163	@ 0xa3
 800980a:	e793      	b.n	8009734 <__gethex+0xf8>
 800980c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009810:	2a2e      	cmp	r2, #46	@ 0x2e
 8009812:	d012      	beq.n	800983a <__gethex+0x1fe>
 8009814:	2b20      	cmp	r3, #32
 8009816:	d104      	bne.n	8009822 <__gethex+0x1e6>
 8009818:	f845 bb04 	str.w	fp, [r5], #4
 800981c:	f04f 0b00 	mov.w	fp, #0
 8009820:	465b      	mov	r3, fp
 8009822:	7830      	ldrb	r0, [r6, #0]
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	f7ff fef3 	bl	8009610 <__hexdig_fun>
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	f000 000f 	and.w	r0, r0, #15
 8009830:	4098      	lsls	r0, r3
 8009832:	ea4b 0b00 	orr.w	fp, fp, r0
 8009836:	3304      	adds	r3, #4
 8009838:	e7ae      	b.n	8009798 <__gethex+0x15c>
 800983a:	45b1      	cmp	r9, r6
 800983c:	d8ea      	bhi.n	8009814 <__gethex+0x1d8>
 800983e:	492b      	ldr	r1, [pc, #172]	@ (80098ec <__gethex+0x2b0>)
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	2201      	movs	r2, #1
 8009844:	4630      	mov	r0, r6
 8009846:	f7ff fe33 	bl	80094b0 <strncmp>
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	2800      	cmp	r0, #0
 800984e:	d1e1      	bne.n	8009814 <__gethex+0x1d8>
 8009850:	e7a2      	b.n	8009798 <__gethex+0x15c>
 8009852:	1ea9      	subs	r1, r5, #2
 8009854:	4620      	mov	r0, r4
 8009856:	f7fe fd68 	bl	800832a <__any_on>
 800985a:	2800      	cmp	r0, #0
 800985c:	d0c2      	beq.n	80097e4 <__gethex+0x1a8>
 800985e:	f04f 0903 	mov.w	r9, #3
 8009862:	e7c1      	b.n	80097e8 <__gethex+0x1ac>
 8009864:	da09      	bge.n	800987a <__gethex+0x23e>
 8009866:	1b75      	subs	r5, r6, r5
 8009868:	4621      	mov	r1, r4
 800986a:	9801      	ldr	r0, [sp, #4]
 800986c:	462a      	mov	r2, r5
 800986e:	f7fe fb23 	bl	8007eb8 <__lshift>
 8009872:	1b7f      	subs	r7, r7, r5
 8009874:	4604      	mov	r4, r0
 8009876:	f100 0a14 	add.w	sl, r0, #20
 800987a:	f04f 0900 	mov.w	r9, #0
 800987e:	e7b8      	b.n	80097f2 <__gethex+0x1b6>
 8009880:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009884:	42bd      	cmp	r5, r7
 8009886:	dd6f      	ble.n	8009968 <__gethex+0x32c>
 8009888:	1bed      	subs	r5, r5, r7
 800988a:	42ae      	cmp	r6, r5
 800988c:	dc34      	bgt.n	80098f8 <__gethex+0x2bc>
 800988e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009892:	2b02      	cmp	r3, #2
 8009894:	d022      	beq.n	80098dc <__gethex+0x2a0>
 8009896:	2b03      	cmp	r3, #3
 8009898:	d024      	beq.n	80098e4 <__gethex+0x2a8>
 800989a:	2b01      	cmp	r3, #1
 800989c:	d115      	bne.n	80098ca <__gethex+0x28e>
 800989e:	42ae      	cmp	r6, r5
 80098a0:	d113      	bne.n	80098ca <__gethex+0x28e>
 80098a2:	2e01      	cmp	r6, #1
 80098a4:	d10b      	bne.n	80098be <__gethex+0x282>
 80098a6:	9a02      	ldr	r2, [sp, #8]
 80098a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	2301      	movs	r3, #1
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	f8ca 3000 	str.w	r3, [sl]
 80098b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098b8:	2562      	movs	r5, #98	@ 0x62
 80098ba:	601c      	str	r4, [r3, #0]
 80098bc:	e73a      	b.n	8009734 <__gethex+0xf8>
 80098be:	1e71      	subs	r1, r6, #1
 80098c0:	4620      	mov	r0, r4
 80098c2:	f7fe fd32 	bl	800832a <__any_on>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d1ed      	bne.n	80098a6 <__gethex+0x26a>
 80098ca:	9801      	ldr	r0, [sp, #4]
 80098cc:	4621      	mov	r1, r4
 80098ce:	f7fe f8db 	bl	8007a88 <_Bfree>
 80098d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098d4:	2300      	movs	r3, #0
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	2550      	movs	r5, #80	@ 0x50
 80098da:	e72b      	b.n	8009734 <__gethex+0xf8>
 80098dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1f3      	bne.n	80098ca <__gethex+0x28e>
 80098e2:	e7e0      	b.n	80098a6 <__gethex+0x26a>
 80098e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1dd      	bne.n	80098a6 <__gethex+0x26a>
 80098ea:	e7ee      	b.n	80098ca <__gethex+0x28e>
 80098ec:	0800a470 	.word	0x0800a470
 80098f0:	0800a309 	.word	0x0800a309
 80098f4:	0800a61e 	.word	0x0800a61e
 80098f8:	1e6f      	subs	r7, r5, #1
 80098fa:	f1b9 0f00 	cmp.w	r9, #0
 80098fe:	d130      	bne.n	8009962 <__gethex+0x326>
 8009900:	b127      	cbz	r7, 800990c <__gethex+0x2d0>
 8009902:	4639      	mov	r1, r7
 8009904:	4620      	mov	r0, r4
 8009906:	f7fe fd10 	bl	800832a <__any_on>
 800990a:	4681      	mov	r9, r0
 800990c:	117a      	asrs	r2, r7, #5
 800990e:	2301      	movs	r3, #1
 8009910:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009914:	f007 071f 	and.w	r7, r7, #31
 8009918:	40bb      	lsls	r3, r7
 800991a:	4213      	tst	r3, r2
 800991c:	4629      	mov	r1, r5
 800991e:	4620      	mov	r0, r4
 8009920:	bf18      	it	ne
 8009922:	f049 0902 	orrne.w	r9, r9, #2
 8009926:	f7ff fe21 	bl	800956c <rshift>
 800992a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800992e:	1b76      	subs	r6, r6, r5
 8009930:	2502      	movs	r5, #2
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	d047      	beq.n	80099c8 <__gethex+0x38c>
 8009938:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800993c:	2b02      	cmp	r3, #2
 800993e:	d015      	beq.n	800996c <__gethex+0x330>
 8009940:	2b03      	cmp	r3, #3
 8009942:	d017      	beq.n	8009974 <__gethex+0x338>
 8009944:	2b01      	cmp	r3, #1
 8009946:	d109      	bne.n	800995c <__gethex+0x320>
 8009948:	f019 0f02 	tst.w	r9, #2
 800994c:	d006      	beq.n	800995c <__gethex+0x320>
 800994e:	f8da 3000 	ldr.w	r3, [sl]
 8009952:	ea49 0903 	orr.w	r9, r9, r3
 8009956:	f019 0f01 	tst.w	r9, #1
 800995a:	d10e      	bne.n	800997a <__gethex+0x33e>
 800995c:	f045 0510 	orr.w	r5, r5, #16
 8009960:	e032      	b.n	80099c8 <__gethex+0x38c>
 8009962:	f04f 0901 	mov.w	r9, #1
 8009966:	e7d1      	b.n	800990c <__gethex+0x2d0>
 8009968:	2501      	movs	r5, #1
 800996a:	e7e2      	b.n	8009932 <__gethex+0x2f6>
 800996c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800996e:	f1c3 0301 	rsb	r3, r3, #1
 8009972:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0f0      	beq.n	800995c <__gethex+0x320>
 800997a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800997e:	f104 0314 	add.w	r3, r4, #20
 8009982:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009986:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800998a:	f04f 0c00 	mov.w	ip, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f853 2b04 	ldr.w	r2, [r3], #4
 8009994:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009998:	d01b      	beq.n	80099d2 <__gethex+0x396>
 800999a:	3201      	adds	r2, #1
 800999c:	6002      	str	r2, [r0, #0]
 800999e:	2d02      	cmp	r5, #2
 80099a0:	f104 0314 	add.w	r3, r4, #20
 80099a4:	d13c      	bne.n	8009a20 <__gethex+0x3e4>
 80099a6:	f8d8 2000 	ldr.w	r2, [r8]
 80099aa:	3a01      	subs	r2, #1
 80099ac:	42b2      	cmp	r2, r6
 80099ae:	d109      	bne.n	80099c4 <__gethex+0x388>
 80099b0:	1171      	asrs	r1, r6, #5
 80099b2:	2201      	movs	r2, #1
 80099b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099b8:	f006 061f 	and.w	r6, r6, #31
 80099bc:	fa02 f606 	lsl.w	r6, r2, r6
 80099c0:	421e      	tst	r6, r3
 80099c2:	d13a      	bne.n	8009a3a <__gethex+0x3fe>
 80099c4:	f045 0520 	orr.w	r5, r5, #32
 80099c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ca:	601c      	str	r4, [r3, #0]
 80099cc:	9b02      	ldr	r3, [sp, #8]
 80099ce:	601f      	str	r7, [r3, #0]
 80099d0:	e6b0      	b.n	8009734 <__gethex+0xf8>
 80099d2:	4299      	cmp	r1, r3
 80099d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80099d8:	d8d9      	bhi.n	800998e <__gethex+0x352>
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	459b      	cmp	fp, r3
 80099de:	db17      	blt.n	8009a10 <__gethex+0x3d4>
 80099e0:	6861      	ldr	r1, [r4, #4]
 80099e2:	9801      	ldr	r0, [sp, #4]
 80099e4:	3101      	adds	r1, #1
 80099e6:	f7fe f80f 	bl	8007a08 <_Balloc>
 80099ea:	4681      	mov	r9, r0
 80099ec:	b918      	cbnz	r0, 80099f6 <__gethex+0x3ba>
 80099ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009a58 <__gethex+0x41c>)
 80099f0:	4602      	mov	r2, r0
 80099f2:	2184      	movs	r1, #132	@ 0x84
 80099f4:	e6c5      	b.n	8009782 <__gethex+0x146>
 80099f6:	6922      	ldr	r2, [r4, #16]
 80099f8:	3202      	adds	r2, #2
 80099fa:	f104 010c 	add.w	r1, r4, #12
 80099fe:	0092      	lsls	r2, r2, #2
 8009a00:	300c      	adds	r0, #12
 8009a02:	f7fd f8a0 	bl	8006b46 <memcpy>
 8009a06:	4621      	mov	r1, r4
 8009a08:	9801      	ldr	r0, [sp, #4]
 8009a0a:	f7fe f83d 	bl	8007a88 <_Bfree>
 8009a0e:	464c      	mov	r4, r9
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a18:	6122      	str	r2, [r4, #16]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	615a      	str	r2, [r3, #20]
 8009a1e:	e7be      	b.n	800999e <__gethex+0x362>
 8009a20:	6922      	ldr	r2, [r4, #16]
 8009a22:	455a      	cmp	r2, fp
 8009a24:	dd0b      	ble.n	8009a3e <__gethex+0x402>
 8009a26:	2101      	movs	r1, #1
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7ff fd9f 	bl	800956c <rshift>
 8009a2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a32:	3701      	adds	r7, #1
 8009a34:	42bb      	cmp	r3, r7
 8009a36:	f6ff aee0 	blt.w	80097fa <__gethex+0x1be>
 8009a3a:	2501      	movs	r5, #1
 8009a3c:	e7c2      	b.n	80099c4 <__gethex+0x388>
 8009a3e:	f016 061f 	ands.w	r6, r6, #31
 8009a42:	d0fa      	beq.n	8009a3a <__gethex+0x3fe>
 8009a44:	4453      	add	r3, sl
 8009a46:	f1c6 0620 	rsb	r6, r6, #32
 8009a4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a4e:	f7fe f8cd 	bl	8007bec <__hi0bits>
 8009a52:	42b0      	cmp	r0, r6
 8009a54:	dbe7      	blt.n	8009a26 <__gethex+0x3ea>
 8009a56:	e7f0      	b.n	8009a3a <__gethex+0x3fe>
 8009a58:	0800a309 	.word	0x0800a309

08009a5c <L_shift>:
 8009a5c:	f1c2 0208 	rsb	r2, r2, #8
 8009a60:	0092      	lsls	r2, r2, #2
 8009a62:	b570      	push	{r4, r5, r6, lr}
 8009a64:	f1c2 0620 	rsb	r6, r2, #32
 8009a68:	6843      	ldr	r3, [r0, #4]
 8009a6a:	6804      	ldr	r4, [r0, #0]
 8009a6c:	fa03 f506 	lsl.w	r5, r3, r6
 8009a70:	432c      	orrs	r4, r5
 8009a72:	40d3      	lsrs	r3, r2
 8009a74:	6004      	str	r4, [r0, #0]
 8009a76:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a7a:	4288      	cmp	r0, r1
 8009a7c:	d3f4      	bcc.n	8009a68 <L_shift+0xc>
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}

08009a80 <__match>:
 8009a80:	b530      	push	{r4, r5, lr}
 8009a82:	6803      	ldr	r3, [r0, #0]
 8009a84:	3301      	adds	r3, #1
 8009a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a8a:	b914      	cbnz	r4, 8009a92 <__match+0x12>
 8009a8c:	6003      	str	r3, [r0, #0]
 8009a8e:	2001      	movs	r0, #1
 8009a90:	bd30      	pop	{r4, r5, pc}
 8009a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009a9a:	2d19      	cmp	r5, #25
 8009a9c:	bf98      	it	ls
 8009a9e:	3220      	addls	r2, #32
 8009aa0:	42a2      	cmp	r2, r4
 8009aa2:	d0f0      	beq.n	8009a86 <__match+0x6>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e7f3      	b.n	8009a90 <__match+0x10>

08009aa8 <__hexnan>:
 8009aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aac:	680b      	ldr	r3, [r1, #0]
 8009aae:	6801      	ldr	r1, [r0, #0]
 8009ab0:	115e      	asrs	r6, r3, #5
 8009ab2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ab6:	f013 031f 	ands.w	r3, r3, #31
 8009aba:	b087      	sub	sp, #28
 8009abc:	bf18      	it	ne
 8009abe:	3604      	addne	r6, #4
 8009ac0:	2500      	movs	r5, #0
 8009ac2:	1f37      	subs	r7, r6, #4
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	4690      	mov	r8, r2
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ace:	46b9      	mov	r9, r7
 8009ad0:	463c      	mov	r4, r7
 8009ad2:	9502      	str	r5, [sp, #8]
 8009ad4:	46ab      	mov	fp, r5
 8009ad6:	784a      	ldrb	r2, [r1, #1]
 8009ad8:	1c4b      	adds	r3, r1, #1
 8009ada:	9303      	str	r3, [sp, #12]
 8009adc:	b342      	cbz	r2, 8009b30 <__hexnan+0x88>
 8009ade:	4610      	mov	r0, r2
 8009ae0:	9105      	str	r1, [sp, #20]
 8009ae2:	9204      	str	r2, [sp, #16]
 8009ae4:	f7ff fd94 	bl	8009610 <__hexdig_fun>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d151      	bne.n	8009b90 <__hexnan+0xe8>
 8009aec:	9a04      	ldr	r2, [sp, #16]
 8009aee:	9905      	ldr	r1, [sp, #20]
 8009af0:	2a20      	cmp	r2, #32
 8009af2:	d818      	bhi.n	8009b26 <__hexnan+0x7e>
 8009af4:	9b02      	ldr	r3, [sp, #8]
 8009af6:	459b      	cmp	fp, r3
 8009af8:	dd13      	ble.n	8009b22 <__hexnan+0x7a>
 8009afa:	454c      	cmp	r4, r9
 8009afc:	d206      	bcs.n	8009b0c <__hexnan+0x64>
 8009afe:	2d07      	cmp	r5, #7
 8009b00:	dc04      	bgt.n	8009b0c <__hexnan+0x64>
 8009b02:	462a      	mov	r2, r5
 8009b04:	4649      	mov	r1, r9
 8009b06:	4620      	mov	r0, r4
 8009b08:	f7ff ffa8 	bl	8009a5c <L_shift>
 8009b0c:	4544      	cmp	r4, r8
 8009b0e:	d952      	bls.n	8009bb6 <__hexnan+0x10e>
 8009b10:	2300      	movs	r3, #0
 8009b12:	f1a4 0904 	sub.w	r9, r4, #4
 8009b16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b1a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b1e:	464c      	mov	r4, r9
 8009b20:	461d      	mov	r5, r3
 8009b22:	9903      	ldr	r1, [sp, #12]
 8009b24:	e7d7      	b.n	8009ad6 <__hexnan+0x2e>
 8009b26:	2a29      	cmp	r2, #41	@ 0x29
 8009b28:	d157      	bne.n	8009bda <__hexnan+0x132>
 8009b2a:	3102      	adds	r1, #2
 8009b2c:	f8ca 1000 	str.w	r1, [sl]
 8009b30:	f1bb 0f00 	cmp.w	fp, #0
 8009b34:	d051      	beq.n	8009bda <__hexnan+0x132>
 8009b36:	454c      	cmp	r4, r9
 8009b38:	d206      	bcs.n	8009b48 <__hexnan+0xa0>
 8009b3a:	2d07      	cmp	r5, #7
 8009b3c:	dc04      	bgt.n	8009b48 <__hexnan+0xa0>
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4649      	mov	r1, r9
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff ff8a 	bl	8009a5c <L_shift>
 8009b48:	4544      	cmp	r4, r8
 8009b4a:	d936      	bls.n	8009bba <__hexnan+0x112>
 8009b4c:	f1a8 0204 	sub.w	r2, r8, #4
 8009b50:	4623      	mov	r3, r4
 8009b52:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b56:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b5a:	429f      	cmp	r7, r3
 8009b5c:	d2f9      	bcs.n	8009b52 <__hexnan+0xaa>
 8009b5e:	1b3b      	subs	r3, r7, r4
 8009b60:	f023 0303 	bic.w	r3, r3, #3
 8009b64:	3304      	adds	r3, #4
 8009b66:	3401      	adds	r4, #1
 8009b68:	3e03      	subs	r6, #3
 8009b6a:	42b4      	cmp	r4, r6
 8009b6c:	bf88      	it	hi
 8009b6e:	2304      	movhi	r3, #4
 8009b70:	4443      	add	r3, r8
 8009b72:	2200      	movs	r2, #0
 8009b74:	f843 2b04 	str.w	r2, [r3], #4
 8009b78:	429f      	cmp	r7, r3
 8009b7a:	d2fb      	bcs.n	8009b74 <__hexnan+0xcc>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	b91b      	cbnz	r3, 8009b88 <__hexnan+0xe0>
 8009b80:	4547      	cmp	r7, r8
 8009b82:	d128      	bne.n	8009bd6 <__hexnan+0x12e>
 8009b84:	2301      	movs	r3, #1
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	2005      	movs	r0, #5
 8009b8a:	b007      	add	sp, #28
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	3501      	adds	r5, #1
 8009b92:	2d08      	cmp	r5, #8
 8009b94:	f10b 0b01 	add.w	fp, fp, #1
 8009b98:	dd06      	ble.n	8009ba8 <__hexnan+0x100>
 8009b9a:	4544      	cmp	r4, r8
 8009b9c:	d9c1      	bls.n	8009b22 <__hexnan+0x7a>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ba4:	2501      	movs	r5, #1
 8009ba6:	3c04      	subs	r4, #4
 8009ba8:	6822      	ldr	r2, [r4, #0]
 8009baa:	f000 000f 	and.w	r0, r0, #15
 8009bae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009bb2:	6020      	str	r0, [r4, #0]
 8009bb4:	e7b5      	b.n	8009b22 <__hexnan+0x7a>
 8009bb6:	2508      	movs	r5, #8
 8009bb8:	e7b3      	b.n	8009b22 <__hexnan+0x7a>
 8009bba:	9b01      	ldr	r3, [sp, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0dd      	beq.n	8009b7c <__hexnan+0xd4>
 8009bc0:	f1c3 0320 	rsb	r3, r3, #32
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	40da      	lsrs	r2, r3
 8009bca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009bd4:	e7d2      	b.n	8009b7c <__hexnan+0xd4>
 8009bd6:	3f04      	subs	r7, #4
 8009bd8:	e7d0      	b.n	8009b7c <__hexnan+0xd4>
 8009bda:	2004      	movs	r0, #4
 8009bdc:	e7d5      	b.n	8009b8a <__hexnan+0xe2>

08009bde <__ascii_mbtowc>:
 8009bde:	b082      	sub	sp, #8
 8009be0:	b901      	cbnz	r1, 8009be4 <__ascii_mbtowc+0x6>
 8009be2:	a901      	add	r1, sp, #4
 8009be4:	b142      	cbz	r2, 8009bf8 <__ascii_mbtowc+0x1a>
 8009be6:	b14b      	cbz	r3, 8009bfc <__ascii_mbtowc+0x1e>
 8009be8:	7813      	ldrb	r3, [r2, #0]
 8009bea:	600b      	str	r3, [r1, #0]
 8009bec:	7812      	ldrb	r2, [r2, #0]
 8009bee:	1e10      	subs	r0, r2, #0
 8009bf0:	bf18      	it	ne
 8009bf2:	2001      	movne	r0, #1
 8009bf4:	b002      	add	sp, #8
 8009bf6:	4770      	bx	lr
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	e7fb      	b.n	8009bf4 <__ascii_mbtowc+0x16>
 8009bfc:	f06f 0001 	mvn.w	r0, #1
 8009c00:	e7f8      	b.n	8009bf4 <__ascii_mbtowc+0x16>

08009c02 <_realloc_r>:
 8009c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c06:	4680      	mov	r8, r0
 8009c08:	4615      	mov	r5, r2
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	b921      	cbnz	r1, 8009c18 <_realloc_r+0x16>
 8009c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c12:	4611      	mov	r1, r2
 8009c14:	f7fd be6c 	b.w	80078f0 <_malloc_r>
 8009c18:	b92a      	cbnz	r2, 8009c26 <_realloc_r+0x24>
 8009c1a:	f7fd fdf5 	bl	8007808 <_free_r>
 8009c1e:	2400      	movs	r4, #0
 8009c20:	4620      	mov	r0, r4
 8009c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c26:	f000 f840 	bl	8009caa <_malloc_usable_size_r>
 8009c2a:	4285      	cmp	r5, r0
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	d802      	bhi.n	8009c36 <_realloc_r+0x34>
 8009c30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c34:	d8f4      	bhi.n	8009c20 <_realloc_r+0x1e>
 8009c36:	4629      	mov	r1, r5
 8009c38:	4640      	mov	r0, r8
 8009c3a:	f7fd fe59 	bl	80078f0 <_malloc_r>
 8009c3e:	4607      	mov	r7, r0
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d0ec      	beq.n	8009c1e <_realloc_r+0x1c>
 8009c44:	42b5      	cmp	r5, r6
 8009c46:	462a      	mov	r2, r5
 8009c48:	4621      	mov	r1, r4
 8009c4a:	bf28      	it	cs
 8009c4c:	4632      	movcs	r2, r6
 8009c4e:	f7fc ff7a 	bl	8006b46 <memcpy>
 8009c52:	4621      	mov	r1, r4
 8009c54:	4640      	mov	r0, r8
 8009c56:	f7fd fdd7 	bl	8007808 <_free_r>
 8009c5a:	463c      	mov	r4, r7
 8009c5c:	e7e0      	b.n	8009c20 <_realloc_r+0x1e>

08009c5e <__ascii_wctomb>:
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	b141      	cbz	r1, 8009c76 <__ascii_wctomb+0x18>
 8009c64:	2aff      	cmp	r2, #255	@ 0xff
 8009c66:	d904      	bls.n	8009c72 <__ascii_wctomb+0x14>
 8009c68:	228a      	movs	r2, #138	@ 0x8a
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c70:	4770      	bx	lr
 8009c72:	700a      	strb	r2, [r1, #0]
 8009c74:	2001      	movs	r0, #1
 8009c76:	4770      	bx	lr

08009c78 <fiprintf>:
 8009c78:	b40e      	push	{r1, r2, r3}
 8009c7a:	b503      	push	{r0, r1, lr}
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	ab03      	add	r3, sp, #12
 8009c80:	4805      	ldr	r0, [pc, #20]	@ (8009c98 <fiprintf+0x20>)
 8009c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c86:	6800      	ldr	r0, [r0, #0]
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	f000 f83f 	bl	8009d0c <_vfiprintf_r>
 8009c8e:	b002      	add	sp, #8
 8009c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c94:	b003      	add	sp, #12
 8009c96:	4770      	bx	lr
 8009c98:	20000020 	.word	0x20000020

08009c9c <abort>:
 8009c9c:	b508      	push	{r3, lr}
 8009c9e:	2006      	movs	r0, #6
 8009ca0:	f000 fa08 	bl	800a0b4 <raise>
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	f7f7 fe1f 	bl	80018e8 <_exit>

08009caa <_malloc_usable_size_r>:
 8009caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cae:	1f18      	subs	r0, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfbc      	itt	lt
 8009cb4:	580b      	ldrlt	r3, [r1, r0]
 8009cb6:	18c0      	addlt	r0, r0, r3
 8009cb8:	4770      	bx	lr

08009cba <__sfputc_r>:
 8009cba:	6893      	ldr	r3, [r2, #8]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	b410      	push	{r4}
 8009cc2:	6093      	str	r3, [r2, #8]
 8009cc4:	da08      	bge.n	8009cd8 <__sfputc_r+0x1e>
 8009cc6:	6994      	ldr	r4, [r2, #24]
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	db01      	blt.n	8009cd0 <__sfputc_r+0x16>
 8009ccc:	290a      	cmp	r1, #10
 8009cce:	d103      	bne.n	8009cd8 <__sfputc_r+0x1e>
 8009cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cd4:	f000 b932 	b.w	8009f3c <__swbuf_r>
 8009cd8:	6813      	ldr	r3, [r2, #0]
 8009cda:	1c58      	adds	r0, r3, #1
 8009cdc:	6010      	str	r0, [r2, #0]
 8009cde:	7019      	strb	r1, [r3, #0]
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <__sfputs_r>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	4614      	mov	r4, r2
 8009cf0:	18d5      	adds	r5, r2, r3
 8009cf2:	42ac      	cmp	r4, r5
 8009cf4:	d101      	bne.n	8009cfa <__sfputs_r+0x12>
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e007      	b.n	8009d0a <__sfputs_r+0x22>
 8009cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfe:	463a      	mov	r2, r7
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff ffda 	bl	8009cba <__sfputc_r>
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d1f3      	bne.n	8009cf2 <__sfputs_r+0xa>
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d0c <_vfiprintf_r>:
 8009d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	460d      	mov	r5, r1
 8009d12:	b09d      	sub	sp, #116	@ 0x74
 8009d14:	4614      	mov	r4, r2
 8009d16:	4698      	mov	r8, r3
 8009d18:	4606      	mov	r6, r0
 8009d1a:	b118      	cbz	r0, 8009d24 <_vfiprintf_r+0x18>
 8009d1c:	6a03      	ldr	r3, [r0, #32]
 8009d1e:	b90b      	cbnz	r3, 8009d24 <_vfiprintf_r+0x18>
 8009d20:	f7fc fdc4 	bl	80068ac <__sinit>
 8009d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	d405      	bmi.n	8009d36 <_vfiprintf_r+0x2a>
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	059a      	lsls	r2, r3, #22
 8009d2e:	d402      	bmi.n	8009d36 <_vfiprintf_r+0x2a>
 8009d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d32:	f7fc ff06 	bl	8006b42 <__retarget_lock_acquire_recursive>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	071b      	lsls	r3, r3, #28
 8009d3a:	d501      	bpl.n	8009d40 <_vfiprintf_r+0x34>
 8009d3c:	692b      	ldr	r3, [r5, #16]
 8009d3e:	b99b      	cbnz	r3, 8009d68 <_vfiprintf_r+0x5c>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4630      	mov	r0, r6
 8009d44:	f000 f938 	bl	8009fb8 <__swsetup_r>
 8009d48:	b170      	cbz	r0, 8009d68 <_vfiprintf_r+0x5c>
 8009d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d4c:	07dc      	lsls	r4, r3, #31
 8009d4e:	d504      	bpl.n	8009d5a <_vfiprintf_r+0x4e>
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295
 8009d54:	b01d      	add	sp, #116	@ 0x74
 8009d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5a:	89ab      	ldrh	r3, [r5, #12]
 8009d5c:	0598      	lsls	r0, r3, #22
 8009d5e:	d4f7      	bmi.n	8009d50 <_vfiprintf_r+0x44>
 8009d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d62:	f7fc feef 	bl	8006b44 <__retarget_lock_release_recursive>
 8009d66:	e7f3      	b.n	8009d50 <_vfiprintf_r+0x44>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d6c:	2320      	movs	r3, #32
 8009d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d76:	2330      	movs	r3, #48	@ 0x30
 8009d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f28 <_vfiprintf_r+0x21c>
 8009d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d80:	f04f 0901 	mov.w	r9, #1
 8009d84:	4623      	mov	r3, r4
 8009d86:	469a      	mov	sl, r3
 8009d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d8c:	b10a      	cbz	r2, 8009d92 <_vfiprintf_r+0x86>
 8009d8e:	2a25      	cmp	r2, #37	@ 0x25
 8009d90:	d1f9      	bne.n	8009d86 <_vfiprintf_r+0x7a>
 8009d92:	ebba 0b04 	subs.w	fp, sl, r4
 8009d96:	d00b      	beq.n	8009db0 <_vfiprintf_r+0xa4>
 8009d98:	465b      	mov	r3, fp
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ffa2 	bl	8009ce8 <__sfputs_r>
 8009da4:	3001      	adds	r0, #1
 8009da6:	f000 80a7 	beq.w	8009ef8 <_vfiprintf_r+0x1ec>
 8009daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dac:	445a      	add	r2, fp
 8009dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8009db0:	f89a 3000 	ldrb.w	r3, [sl]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 809f 	beq.w	8009ef8 <_vfiprintf_r+0x1ec>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc4:	f10a 0a01 	add.w	sl, sl, #1
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dd2:	4654      	mov	r4, sl
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dda:	4853      	ldr	r0, [pc, #332]	@ (8009f28 <_vfiprintf_r+0x21c>)
 8009ddc:	f7f6 f9f8 	bl	80001d0 <memchr>
 8009de0:	9a04      	ldr	r2, [sp, #16]
 8009de2:	b9d8      	cbnz	r0, 8009e1c <_vfiprintf_r+0x110>
 8009de4:	06d1      	lsls	r1, r2, #27
 8009de6:	bf44      	itt	mi
 8009de8:	2320      	movmi	r3, #32
 8009dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dee:	0713      	lsls	r3, r2, #28
 8009df0:	bf44      	itt	mi
 8009df2:	232b      	movmi	r3, #43	@ 0x2b
 8009df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009df8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfe:	d015      	beq.n	8009e2c <_vfiprintf_r+0x120>
 8009e00:	9a07      	ldr	r2, [sp, #28]
 8009e02:	4654      	mov	r4, sl
 8009e04:	2000      	movs	r0, #0
 8009e06:	f04f 0c0a 	mov.w	ip, #10
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e10:	3b30      	subs	r3, #48	@ 0x30
 8009e12:	2b09      	cmp	r3, #9
 8009e14:	d94b      	bls.n	8009eae <_vfiprintf_r+0x1a2>
 8009e16:	b1b0      	cbz	r0, 8009e46 <_vfiprintf_r+0x13a>
 8009e18:	9207      	str	r2, [sp, #28]
 8009e1a:	e014      	b.n	8009e46 <_vfiprintf_r+0x13a>
 8009e1c:	eba0 0308 	sub.w	r3, r0, r8
 8009e20:	fa09 f303 	lsl.w	r3, r9, r3
 8009e24:	4313      	orrs	r3, r2
 8009e26:	9304      	str	r3, [sp, #16]
 8009e28:	46a2      	mov	sl, r4
 8009e2a:	e7d2      	b.n	8009dd2 <_vfiprintf_r+0xc6>
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	1d19      	adds	r1, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	9103      	str	r1, [sp, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	bfbb      	ittet	lt
 8009e38:	425b      	neglt	r3, r3
 8009e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e3e:	9307      	strge	r3, [sp, #28]
 8009e40:	9307      	strlt	r3, [sp, #28]
 8009e42:	bfb8      	it	lt
 8009e44:	9204      	strlt	r2, [sp, #16]
 8009e46:	7823      	ldrb	r3, [r4, #0]
 8009e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e4a:	d10a      	bne.n	8009e62 <_vfiprintf_r+0x156>
 8009e4c:	7863      	ldrb	r3, [r4, #1]
 8009e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e50:	d132      	bne.n	8009eb8 <_vfiprintf_r+0x1ac>
 8009e52:	9b03      	ldr	r3, [sp, #12]
 8009e54:	1d1a      	adds	r2, r3, #4
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	9203      	str	r2, [sp, #12]
 8009e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e5e:	3402      	adds	r4, #2
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f38 <_vfiprintf_r+0x22c>
 8009e66:	7821      	ldrb	r1, [r4, #0]
 8009e68:	2203      	movs	r2, #3
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	f7f6 f9b0 	bl	80001d0 <memchr>
 8009e70:	b138      	cbz	r0, 8009e82 <_vfiprintf_r+0x176>
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	eba0 000a 	sub.w	r0, r0, sl
 8009e78:	2240      	movs	r2, #64	@ 0x40
 8009e7a:	4082      	lsls	r2, r0
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	3401      	adds	r4, #1
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e86:	4829      	ldr	r0, [pc, #164]	@ (8009f2c <_vfiprintf_r+0x220>)
 8009e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e8c:	2206      	movs	r2, #6
 8009e8e:	f7f6 f99f 	bl	80001d0 <memchr>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d03f      	beq.n	8009f16 <_vfiprintf_r+0x20a>
 8009e96:	4b26      	ldr	r3, [pc, #152]	@ (8009f30 <_vfiprintf_r+0x224>)
 8009e98:	bb1b      	cbnz	r3, 8009ee2 <_vfiprintf_r+0x1d6>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	3307      	adds	r3, #7
 8009e9e:	f023 0307 	bic.w	r3, r3, #7
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	9303      	str	r3, [sp, #12]
 8009ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea8:	443b      	add	r3, r7
 8009eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eac:	e76a      	b.n	8009d84 <_vfiprintf_r+0x78>
 8009eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	e7a8      	b.n	8009e0a <_vfiprintf_r+0xfe>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	3401      	adds	r4, #1
 8009ebc:	9305      	str	r3, [sp, #20]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	f04f 0c0a 	mov.w	ip, #10
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eca:	3a30      	subs	r2, #48	@ 0x30
 8009ecc:	2a09      	cmp	r2, #9
 8009ece:	d903      	bls.n	8009ed8 <_vfiprintf_r+0x1cc>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0c6      	beq.n	8009e62 <_vfiprintf_r+0x156>
 8009ed4:	9105      	str	r1, [sp, #20]
 8009ed6:	e7c4      	b.n	8009e62 <_vfiprintf_r+0x156>
 8009ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009edc:	4604      	mov	r4, r0
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e7f0      	b.n	8009ec4 <_vfiprintf_r+0x1b8>
 8009ee2:	ab03      	add	r3, sp, #12
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	4b12      	ldr	r3, [pc, #72]	@ (8009f34 <_vfiprintf_r+0x228>)
 8009eea:	a904      	add	r1, sp, #16
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7fb fe85 	bl	8005bfc <_printf_float>
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	1c78      	adds	r0, r7, #1
 8009ef6:	d1d6      	bne.n	8009ea6 <_vfiprintf_r+0x19a>
 8009ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009efa:	07d9      	lsls	r1, r3, #31
 8009efc:	d405      	bmi.n	8009f0a <_vfiprintf_r+0x1fe>
 8009efe:	89ab      	ldrh	r3, [r5, #12]
 8009f00:	059a      	lsls	r2, r3, #22
 8009f02:	d402      	bmi.n	8009f0a <_vfiprintf_r+0x1fe>
 8009f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f06:	f7fc fe1d 	bl	8006b44 <__retarget_lock_release_recursive>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	065b      	lsls	r3, r3, #25
 8009f0e:	f53f af1f 	bmi.w	8009d50 <_vfiprintf_r+0x44>
 8009f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f14:	e71e      	b.n	8009d54 <_vfiprintf_r+0x48>
 8009f16:	ab03      	add	r3, sp, #12
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4b05      	ldr	r3, [pc, #20]	@ (8009f34 <_vfiprintf_r+0x228>)
 8009f1e:	a904      	add	r1, sp, #16
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7fc f903 	bl	800612c <_printf_i>
 8009f26:	e7e4      	b.n	8009ef2 <_vfiprintf_r+0x1e6>
 8009f28:	0800a5c9 	.word	0x0800a5c9
 8009f2c:	0800a5d3 	.word	0x0800a5d3
 8009f30:	08005bfd 	.word	0x08005bfd
 8009f34:	08009ce9 	.word	0x08009ce9
 8009f38:	0800a5cf 	.word	0x0800a5cf

08009f3c <__swbuf_r>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	460e      	mov	r6, r1
 8009f40:	4614      	mov	r4, r2
 8009f42:	4605      	mov	r5, r0
 8009f44:	b118      	cbz	r0, 8009f4e <__swbuf_r+0x12>
 8009f46:	6a03      	ldr	r3, [r0, #32]
 8009f48:	b90b      	cbnz	r3, 8009f4e <__swbuf_r+0x12>
 8009f4a:	f7fc fcaf 	bl	80068ac <__sinit>
 8009f4e:	69a3      	ldr	r3, [r4, #24]
 8009f50:	60a3      	str	r3, [r4, #8]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	071a      	lsls	r2, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <__swbuf_r+0x20>
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	b943      	cbnz	r3, 8009f6e <__swbuf_r+0x32>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f82a 	bl	8009fb8 <__swsetup_r>
 8009f64:	b118      	cbz	r0, 8009f6e <__swbuf_r+0x32>
 8009f66:	f04f 37ff 	mov.w	r7, #4294967295
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	1a98      	subs	r0, r3, r2
 8009f74:	6963      	ldr	r3, [r4, #20]
 8009f76:	b2f6      	uxtb	r6, r6
 8009f78:	4283      	cmp	r3, r0
 8009f7a:	4637      	mov	r7, r6
 8009f7c:	dc05      	bgt.n	8009f8a <__swbuf_r+0x4e>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f7ff fa53 	bl	800942c <_fflush_r>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d1ed      	bne.n	8009f66 <__swbuf_r+0x2a>
 8009f8a:	68a3      	ldr	r3, [r4, #8]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	60a3      	str	r3, [r4, #8]
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	701e      	strb	r6, [r3, #0]
 8009f98:	6962      	ldr	r2, [r4, #20]
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d004      	beq.n	8009faa <__swbuf_r+0x6e>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	07db      	lsls	r3, r3, #31
 8009fa4:	d5e1      	bpl.n	8009f6a <__swbuf_r+0x2e>
 8009fa6:	2e0a      	cmp	r6, #10
 8009fa8:	d1df      	bne.n	8009f6a <__swbuf_r+0x2e>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	f7ff fa3d 	bl	800942c <_fflush_r>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d0d9      	beq.n	8009f6a <__swbuf_r+0x2e>
 8009fb6:	e7d6      	b.n	8009f66 <__swbuf_r+0x2a>

08009fb8 <__swsetup_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4b29      	ldr	r3, [pc, #164]	@ (800a060 <__swsetup_r+0xa8>)
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	b118      	cbz	r0, 8009fcc <__swsetup_r+0x14>
 8009fc4:	6a03      	ldr	r3, [r0, #32]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <__swsetup_r+0x14>
 8009fc8:	f7fc fc70 	bl	80068ac <__sinit>
 8009fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd0:	0719      	lsls	r1, r3, #28
 8009fd2:	d422      	bmi.n	800a01a <__swsetup_r+0x62>
 8009fd4:	06da      	lsls	r2, r3, #27
 8009fd6:	d407      	bmi.n	8009fe8 <__swsetup_r+0x30>
 8009fd8:	2209      	movs	r2, #9
 8009fda:	602a      	str	r2, [r5, #0]
 8009fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe6:	e033      	b.n	800a050 <__swsetup_r+0x98>
 8009fe8:	0758      	lsls	r0, r3, #29
 8009fea:	d512      	bpl.n	800a012 <__swsetup_r+0x5a>
 8009fec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fee:	b141      	cbz	r1, 800a002 <__swsetup_r+0x4a>
 8009ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ff4:	4299      	cmp	r1, r3
 8009ff6:	d002      	beq.n	8009ffe <__swsetup_r+0x46>
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f7fd fc05 	bl	8007808 <_free_r>
 8009ffe:	2300      	movs	r3, #0
 800a000:	6363      	str	r3, [r4, #52]	@ 0x34
 800a002:	89a3      	ldrh	r3, [r4, #12]
 800a004:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a008:	81a3      	strh	r3, [r4, #12]
 800a00a:	2300      	movs	r3, #0
 800a00c:	6063      	str	r3, [r4, #4]
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	f043 0308 	orr.w	r3, r3, #8
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	6923      	ldr	r3, [r4, #16]
 800a01c:	b94b      	cbnz	r3, 800a032 <__swsetup_r+0x7a>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a028:	d003      	beq.n	800a032 <__swsetup_r+0x7a>
 800a02a:	4621      	mov	r1, r4
 800a02c:	4628      	mov	r0, r5
 800a02e:	f000 f883 	bl	800a138 <__smakebuf_r>
 800a032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a036:	f013 0201 	ands.w	r2, r3, #1
 800a03a:	d00a      	beq.n	800a052 <__swsetup_r+0x9a>
 800a03c:	2200      	movs	r2, #0
 800a03e:	60a2      	str	r2, [r4, #8]
 800a040:	6962      	ldr	r2, [r4, #20]
 800a042:	4252      	negs	r2, r2
 800a044:	61a2      	str	r2, [r4, #24]
 800a046:	6922      	ldr	r2, [r4, #16]
 800a048:	b942      	cbnz	r2, 800a05c <__swsetup_r+0xa4>
 800a04a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a04e:	d1c5      	bne.n	8009fdc <__swsetup_r+0x24>
 800a050:	bd38      	pop	{r3, r4, r5, pc}
 800a052:	0799      	lsls	r1, r3, #30
 800a054:	bf58      	it	pl
 800a056:	6962      	ldrpl	r2, [r4, #20]
 800a058:	60a2      	str	r2, [r4, #8]
 800a05a:	e7f4      	b.n	800a046 <__swsetup_r+0x8e>
 800a05c:	2000      	movs	r0, #0
 800a05e:	e7f7      	b.n	800a050 <__swsetup_r+0x98>
 800a060:	20000020 	.word	0x20000020

0800a064 <_raise_r>:
 800a064:	291f      	cmp	r1, #31
 800a066:	b538      	push	{r3, r4, r5, lr}
 800a068:	4605      	mov	r5, r0
 800a06a:	460c      	mov	r4, r1
 800a06c:	d904      	bls.n	800a078 <_raise_r+0x14>
 800a06e:	2316      	movs	r3, #22
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	f04f 30ff 	mov.w	r0, #4294967295
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a07a:	b112      	cbz	r2, 800a082 <_raise_r+0x1e>
 800a07c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a080:	b94b      	cbnz	r3, 800a096 <_raise_r+0x32>
 800a082:	4628      	mov	r0, r5
 800a084:	f000 f830 	bl	800a0e8 <_getpid_r>
 800a088:	4622      	mov	r2, r4
 800a08a:	4601      	mov	r1, r0
 800a08c:	4628      	mov	r0, r5
 800a08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a092:	f000 b817 	b.w	800a0c4 <_kill_r>
 800a096:	2b01      	cmp	r3, #1
 800a098:	d00a      	beq.n	800a0b0 <_raise_r+0x4c>
 800a09a:	1c59      	adds	r1, r3, #1
 800a09c:	d103      	bne.n	800a0a6 <_raise_r+0x42>
 800a09e:	2316      	movs	r3, #22
 800a0a0:	6003      	str	r3, [r0, #0]
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	e7e7      	b.n	800a076 <_raise_r+0x12>
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4798      	blx	r3
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	e7e0      	b.n	800a076 <_raise_r+0x12>

0800a0b4 <raise>:
 800a0b4:	4b02      	ldr	r3, [pc, #8]	@ (800a0c0 <raise+0xc>)
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	f7ff bfd3 	b.w	800a064 <_raise_r>
 800a0be:	bf00      	nop
 800a0c0:	20000020 	.word	0x20000020

0800a0c4 <_kill_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4d07      	ldr	r5, [pc, #28]	@ (800a0e4 <_kill_r+0x20>)
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	4608      	mov	r0, r1
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	f7f7 fbf9 	bl	80018c8 <_kill>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	d102      	bne.n	800a0e0 <_kill_r+0x1c>
 800a0da:	682b      	ldr	r3, [r5, #0]
 800a0dc:	b103      	cbz	r3, 800a0e0 <_kill_r+0x1c>
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	bd38      	pop	{r3, r4, r5, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200004a4 	.word	0x200004a4

0800a0e8 <_getpid_r>:
 800a0e8:	f7f7 bbe6 	b.w	80018b8 <_getpid>

0800a0ec <__swhatbuf_r>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	b096      	sub	sp, #88	@ 0x58
 800a0f8:	4615      	mov	r5, r2
 800a0fa:	461e      	mov	r6, r3
 800a0fc:	da0d      	bge.n	800a11a <__swhatbuf_r+0x2e>
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a104:	f04f 0100 	mov.w	r1, #0
 800a108:	bf14      	ite	ne
 800a10a:	2340      	movne	r3, #64	@ 0x40
 800a10c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a110:	2000      	movs	r0, #0
 800a112:	6031      	str	r1, [r6, #0]
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	b016      	add	sp, #88	@ 0x58
 800a118:	bd70      	pop	{r4, r5, r6, pc}
 800a11a:	466a      	mov	r2, sp
 800a11c:	f000 f848 	bl	800a1b0 <_fstat_r>
 800a120:	2800      	cmp	r0, #0
 800a122:	dbec      	blt.n	800a0fe <__swhatbuf_r+0x12>
 800a124:	9901      	ldr	r1, [sp, #4]
 800a126:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a12a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a12e:	4259      	negs	r1, r3
 800a130:	4159      	adcs	r1, r3
 800a132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a136:	e7eb      	b.n	800a110 <__swhatbuf_r+0x24>

0800a138 <__smakebuf_r>:
 800a138:	898b      	ldrh	r3, [r1, #12]
 800a13a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a13c:	079d      	lsls	r5, r3, #30
 800a13e:	4606      	mov	r6, r0
 800a140:	460c      	mov	r4, r1
 800a142:	d507      	bpl.n	800a154 <__smakebuf_r+0x1c>
 800a144:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	6123      	str	r3, [r4, #16]
 800a14c:	2301      	movs	r3, #1
 800a14e:	6163      	str	r3, [r4, #20]
 800a150:	b003      	add	sp, #12
 800a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a154:	ab01      	add	r3, sp, #4
 800a156:	466a      	mov	r2, sp
 800a158:	f7ff ffc8 	bl	800a0ec <__swhatbuf_r>
 800a15c:	9f00      	ldr	r7, [sp, #0]
 800a15e:	4605      	mov	r5, r0
 800a160:	4639      	mov	r1, r7
 800a162:	4630      	mov	r0, r6
 800a164:	f7fd fbc4 	bl	80078f0 <_malloc_r>
 800a168:	b948      	cbnz	r0, 800a17e <__smakebuf_r+0x46>
 800a16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16e:	059a      	lsls	r2, r3, #22
 800a170:	d4ee      	bmi.n	800a150 <__smakebuf_r+0x18>
 800a172:	f023 0303 	bic.w	r3, r3, #3
 800a176:	f043 0302 	orr.w	r3, r3, #2
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	e7e2      	b.n	800a144 <__smakebuf_r+0xc>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	6020      	str	r0, [r4, #0]
 800a182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a186:	81a3      	strh	r3, [r4, #12]
 800a188:	9b01      	ldr	r3, [sp, #4]
 800a18a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a18e:	b15b      	cbz	r3, 800a1a8 <__smakebuf_r+0x70>
 800a190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a194:	4630      	mov	r0, r6
 800a196:	f000 f81d 	bl	800a1d4 <_isatty_r>
 800a19a:	b128      	cbz	r0, 800a1a8 <__smakebuf_r+0x70>
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	431d      	orrs	r5, r3
 800a1ac:	81a5      	strh	r5, [r4, #12]
 800a1ae:	e7cf      	b.n	800a150 <__smakebuf_r+0x18>

0800a1b0 <_fstat_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d07      	ldr	r5, [pc, #28]	@ (800a1d0 <_fstat_r+0x20>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	f7f7 fbe3 	bl	8001988 <_fstat>
 800a1c2:	1c43      	adds	r3, r0, #1
 800a1c4:	d102      	bne.n	800a1cc <_fstat_r+0x1c>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	b103      	cbz	r3, 800a1cc <_fstat_r+0x1c>
 800a1ca:	6023      	str	r3, [r4, #0]
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200004a4 	.word	0x200004a4

0800a1d4 <_isatty_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4d06      	ldr	r5, [pc, #24]	@ (800a1f0 <_isatty_r+0x1c>)
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4604      	mov	r4, r0
 800a1dc:	4608      	mov	r0, r1
 800a1de:	602b      	str	r3, [r5, #0]
 800a1e0:	f7f7 fbe2 	bl	80019a8 <_isatty>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_isatty_r+0x1a>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_isatty_r+0x1a>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	200004a4 	.word	0x200004a4

0800a1f4 <_init>:
 800a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f6:	bf00      	nop
 800a1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fa:	bc08      	pop	{r3}
 800a1fc:	469e      	mov	lr, r3
 800a1fe:	4770      	bx	lr

0800a200 <_fini>:
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a202:	bf00      	nop
 800a204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a206:	bc08      	pop	{r3}
 800a208:	469e      	mov	lr, r3
 800a20a:	4770      	bx	lr
